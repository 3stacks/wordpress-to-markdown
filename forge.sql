-- MySQL dump 10.16  Distrib 10.1.17-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: forge
-- ------------------------------------------------------
-- Server version	10.1.17-MariaDB-1~xenial

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=947 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (3,'siteurl','http://lukeboyle.com/wp','yes'),(4,'home','http://lukeboyle.com/wp','yes'),(5,'blogname','Boyleing Point','yes'),(6,'blogdescription','7/11 was an inside job','yes'),(7,'users_can_register','0','yes'),(8,'admin_email','luke.boyle.au@gmail.com','yes'),(9,'start_of_week','1','yes'),(10,'use_balanceTags','0','yes'),(11,'use_smilies','1','yes'),(12,'require_name_email','1','yes'),(13,'comments_notify','1','yes'),(14,'posts_per_rss','10','yes'),(15,'rss_use_excerpt','0','yes'),(16,'mailserver_url','mail.example.com','yes'),(17,'mailserver_login','login@example.com','yes'),(18,'mailserver_pass','password','yes'),(19,'mailserver_port','110','yes'),(20,'default_category','1','yes'),(21,'default_comment_status','open','yes'),(22,'default_ping_status','open','yes'),(23,'default_pingback_flag','1','yes'),(24,'posts_per_page','3','yes'),(25,'date_format','F j, Y','yes'),(26,'time_format','g:i a','yes'),(27,'links_updated_date_format','F j, Y g:i a','yes'),(28,'comment_moderation','0','yes'),(29,'moderation_notify','1','yes'),(30,'permalink_structure','/%postname%/','yes'),(31,'rewrite_rules','a:108:{s:19:\"sitemap_index\\.xml$\";s:19:\"index.php?sitemap=1\";s:31:\"([^/]+?)-sitemap([0-9]+)?\\.xml$\";s:51:\"index.php?sitemap=$matches[1]&sitemap_n=$matches[2]\";s:24:\"([a-z]+)?-?sitemap\\.xsl$\";s:25:\"index.php?xsl=$matches[1]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:42:\"portfolio_item/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:52:\"portfolio_item/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:72:\"portfolio_item/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:67:\"portfolio_item/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:67:\"portfolio_item/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:48:\"portfolio_item/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:31:\"portfolio_item/([^/]+)/embed/?$\";s:47:\"index.php?portfolio_item=$matches[1]&embed=true\";s:35:\"portfolio_item/([^/]+)/trackback/?$\";s:41:\"index.php?portfolio_item=$matches[1]&tb=1\";s:43:\"portfolio_item/([^/]+)/page/?([0-9]{1,})/?$\";s:54:\"index.php?portfolio_item=$matches[1]&paged=$matches[2]\";s:50:\"portfolio_item/([^/]+)/comment-page-([0-9]{1,})/?$\";s:54:\"index.php?portfolio_item=$matches[1]&cpage=$matches[2]\";s:39:\"portfolio_item/([^/]+)(?:/([0-9]+))?/?$\";s:53:\"index.php?portfolio_item=$matches[1]&page=$matches[2]\";s:31:\"portfolio_item/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:41:\"portfolio_item/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:61:\"portfolio_item/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"portfolio_item/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\"portfolio_item/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:37:\"portfolio_item/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:39:\"index.php?&page_id=14&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\"[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"([^/]+)/embed/?$\";s:37:\"index.php?name=$matches[1]&embed=true\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:24:\"([^/]+)(?:/([0-9]+))?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:22:\"[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";}','yes'),(32,'hack_file','0','yes'),(33,'wp_charset','UTF-8','yes'),(34,'moderation_keys','','no'),(35,'active_plugins','a:6:{i:0;s:34:\"advanced-custom-fields-pro/acf.php\";i:1;s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";i:2;s:43:\"custom-post-type-ui/custom-post-type-ui.php\";i:3;s:29:\"jetpack-markdown/markdown.php\";i:4;s:33:\"w3-total-cache/w3-total-cache.php\";i:5;s:24:\"wordpress-seo/wp-seo.php\";}','yes'),(36,'category_base','','yes'),(37,'ping_sites','http://rpc.pingomatic.com/','yes'),(38,'comment_max_links','2','yes'),(39,'gmt_offset','0','yes'),(40,'default_email_category','1','yes'),(41,'recently_edited','a:5:{i:0;s:64:\"/home/forge/lukeboyle.com/web/app/themes/lukeboyle/page-home.php\";i:2;s:60:\"/home/forge/lukeboyle.com/web/app/themes/lukeboyle/style.css\";i:3;s:61:\"/home/forge/lukeboyle.com/web/app/themes/lukeboyle/header.php\";i:4;s:59:\"/home/forge/lukeboyle.com/web/app/themes/lukeboyle/home.php\";i:5;s:69:\"/home/forge/lukeboyle.com/web/app/themes/lukeboyle/page-portfolio.php\";}','no'),(42,'template','lukeboyle','yes'),(43,'stylesheet','lukeboyle','yes'),(44,'comment_whitelist','1','yes'),(45,'blacklist_keys','','no'),(46,'comment_registration','0','yes'),(47,'html_type','text/html','yes'),(48,'use_trackback','0','yes'),(49,'default_role','subscriber','yes'),(50,'db_version','38590','yes'),(51,'uploads_use_yearmonth_folders','1','yes'),(52,'upload_path','','yes'),(53,'wp_public','1','yes'),(54,'default_link_category','2','yes'),(55,'show_on_front','page','yes'),(56,'tag_base','','yes'),(57,'show_avatars','1','yes'),(58,'avatar_rating','G','yes'),(59,'upload_url_path','','yes'),(60,'thumbnail_size_w','150','yes'),(61,'thumbnail_size_h','150','yes'),(62,'thumbnail_crop','1','yes'),(63,'medium_size_w','300','yes'),(64,'medium_size_h','300','yes'),(65,'avatar_default','mystery','yes'),(66,'large_size_w','1024','yes'),(67,'large_size_h','1024','yes'),(68,'image_default_link_type','none','yes'),(69,'image_default_size','','yes'),(70,'image_default_align','','yes'),(71,'close_comments_for_old_posts','0','yes'),(72,'close_comments_days_old','14','yes'),(73,'thread_comments','1','yes'),(74,'thread_comments_depth','5','yes'),(75,'page_comments','0','yes'),(76,'comments_per_page','50','yes'),(77,'default_comments_page','newest','yes'),(78,'comment_order','asc','yes'),(79,'sticky_posts','a:0:{}','yes'),(80,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(81,'widget_text','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(82,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(83,'uninstall_plugins','a:0:{}','no'),(84,'timezone_string','','yes'),(85,'page_for_posts','54','yes'),(86,'page_on_front','14','yes'),(87,'default_post_format','0','yes'),(88,'link_manager_enabled','0','yes'),(89,'finished_splitting_shared_terms','1','yes'),(90,'site_icon','0','yes'),(91,'medium_large_size_w','768','yes'),(92,'medium_large_size_h','0','yes'),(93,'initial_db_version','37965','yes'),(94,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:62:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:15:\"wpseo_bulk_edit\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:35:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:15:\"wpseo_bulk_edit\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(95,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(96,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(98,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(99,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(100,'sidebars_widgets','a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:18:\"orphaned_widgets_1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(101,'bedrock_autoloader','a:2:{s:7:\"plugins\";a:0:{}s:5:\"count\";i:0;}','no'),(102,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(103,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(104,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(105,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(106,'cron','a:6:{i:1493738454;a:1:{s:18:\"w3_pgcache_cleanup\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:18:\"w3_pgcache_cleanup\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1493738527;a:1:{s:18:\"w3_dbcache_cleanup\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:18:\"w3_dbcache_cleanup\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1493744171;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1493787393;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1493819512;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}','yes'),(109,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.6.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.6.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.6.1\";s:7:\"version\";s:5:\"4.6.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.4\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1474692972;s:15:\"version_checked\";s:5:\"4.6.1\";s:12:\"translations\";a:0:{}}','no'),(111,'_site_transient_update_themes','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1474692974;s:7:\"checked\";a:7:{s:9:\"lukeboyle\";s:0:\"\";s:12:\"twentyeleven\";s:3:\"2.5\";s:13:\"twentyfifteen\";s:3:\"1.6\";s:14:\"twentyfourteen\";s:3:\"1.8\";s:9:\"twentyten\";s:3:\"2.2\";s:14:\"twentythirteen\";s:3:\"2.0\";s:12:\"twentytwelve\";s:3:\"2.1\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}','no'),(134,'theme_mods_twentyfifteen','a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1473574654;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(135,'template_root','/themes','yes'),(136,'stylesheet_root','/themes','yes'),(137,'current_theme','Luke Boyle Theme','yes'),(138,'theme_mods_lukeboyle','a:2:{i:0;b:0;s:18:\"custom_css_post_id\";i:-1;}','yes'),(139,'theme_switched','','yes'),(142,'recently_activated','a:0:{}','yes'),(147,'acf_version','5.3.2.2','yes'),(164,'nav_menu_options','a:1:{s:8:\"auto_add\";a:0:{}}','yes'),(180,'cptui_post_types','a:1:{s:14:\"portfolio_item\";a:28:{s:4:\"name\";s:14:\"portfolio_item\";s:5:\"label\";s:15:\"Portfolio Items\";s:14:\"singular_label\";s:14:\"Portfolio Item\";s:11:\"description\";s:0:\"\";s:6:\"public\";s:4:\"true\";s:18:\"publicly_queryable\";s:4:\"true\";s:7:\"show_ui\";s:4:\"true\";s:17:\"show_in_nav_menus\";s:4:\"true\";s:12:\"show_in_rest\";s:5:\"false\";s:9:\"rest_base\";s:0:\"\";s:11:\"has_archive\";s:5:\"false\";s:18:\"has_archive_string\";s:0:\"\";s:19:\"exclude_from_search\";s:4:\"true\";s:15:\"capability_type\";s:4:\"post\";s:12:\"hierarchical\";s:5:\"false\";s:7:\"rewrite\";s:4:\"true\";s:12:\"rewrite_slug\";s:0:\"\";s:17:\"rewrite_withfront\";s:4:\"true\";s:9:\"query_var\";s:4:\"true\";s:14:\"query_var_slug\";s:0:\"\";s:13:\"menu_position\";s:1:\"5\";s:12:\"show_in_menu\";s:4:\"true\";s:19:\"show_in_menu_string\";s:0:\"\";s:9:\"menu_icon\";s:0:\"\";s:8:\"supports\";a:2:{i:0;s:5:\"title\";i:1;s:9:\"thumbnail\";}s:10:\"taxonomies\";a:0:{}s:6:\"labels\";a:21:{s:9:\"menu_name\";s:0:\"\";s:9:\"all_items\";s:0:\"\";s:7:\"add_new\";s:0:\"\";s:12:\"add_new_item\";s:0:\"\";s:9:\"edit_item\";s:0:\"\";s:8:\"new_item\";s:0:\"\";s:9:\"view_item\";s:0:\"\";s:12:\"search_items\";s:0:\"\";s:9:\"not_found\";s:0:\"\";s:18:\"not_found_in_trash\";s:0:\"\";s:17:\"parent_item_colon\";s:0:\"\";s:14:\"featured_image\";s:0:\"\";s:18:\"set_featured_image\";s:0:\"\";s:21:\"remove_featured_image\";s:0:\"\";s:18:\"use_featured_image\";s:0:\"\";s:8:\"archives\";s:0:\"\";s:16:\"insert_into_item\";s:0:\"\";s:21:\"uploaded_to_this_item\";s:0:\"\";s:17:\"filter_items_list\";s:0:\"\";s:21:\"items_list_navigation\";s:0:\"\";s:10:\"items_list\";s:0:\"\";}s:15:\"custom_supports\";s:0:\"\";}}','yes'),(359,'ai1wm_secret_key','xiIEwQ42ozjY','yes'),(367,'ai1wm_updater','a:0:{}','yes'),(400,'category_children','a:0:{}','yes'),(407,'frmsvr_last_folder','/home/forge/lukeboyle.com/web/app/uploads/2015/09','yes'),(415,'w3tc_request_data','','no'),(437,'wpseo','a:14:{s:14:\"blocking_files\";a:0:{}s:15:\"ms_defaults_set\";b:0;s:7:\"version\";s:3:\"3.5\";s:12:\"company_logo\";s:0:\"\";s:12:\"company_name\";s:0:\"\";s:17:\"company_or_person\";s:0:\"\";s:20:\"disableadvanced_meta\";b:1;s:19:\"onpage_indexability\";b:1;s:12:\"googleverify\";s:0:\"\";s:8:\"msverify\";s:0:\"\";s:11:\"person_name\";s:0:\"\";s:12:\"website_name\";s:10:\"Luke Boyle\";s:22:\"alternate_website_name\";s:14:\"Boyleing Point\";s:12:\"yandexverify\";s:0:\"\";}','yes'),(438,'wpseo_permalinks','a:9:{s:15:\"cleanpermalinks\";b:0;s:24:\"cleanpermalink-extravars\";s:0:\"\";s:29:\"cleanpermalink-googlecampaign\";b:0;s:31:\"cleanpermalink-googlesitesearch\";b:0;s:15:\"cleanreplytocom\";b:0;s:10:\"cleanslugs\";b:1;s:18:\"redirectattachment\";b:0;s:17:\"stripcategorybase\";b:0;s:13:\"trailingslash\";b:0;}','yes'),(439,'wpseo_titles','a:62:{s:10:\"title_test\";i:0;s:17:\"forcerewritetitle\";b:0;s:23:\"content-analysis-active\";b:1;s:23:\"keyword-analysis-active\";b:1;s:9:\"separator\";s:7:\"sc-dash\";s:5:\"noodp\";b:0;s:15:\"usemetakeywords\";b:0;s:16:\"title-home-wpseo\";s:42:\"%%sitename%% %%page%% %%sep%% %%sitedesc%%\";s:18:\"title-author-wpseo\";s:41:\"%%name%%, Author at %%sitename%% %%page%%\";s:19:\"title-archive-wpseo\";s:38:\"%%date%% %%page%% %%sep%% %%sitename%%\";s:18:\"title-search-wpseo\";s:63:\"You searched for %%searchphrase%% %%page%% %%sep%% %%sitename%%\";s:15:\"title-404-wpseo\";s:35:\"Page not found %%sep%% %%sitename%%\";s:19:\"metadesc-home-wpseo\";s:0:\"\";s:21:\"metadesc-author-wpseo\";s:0:\"\";s:22:\"metadesc-archive-wpseo\";s:0:\"\";s:18:\"metakey-home-wpseo\";s:0:\"\";s:20:\"metakey-author-wpseo\";s:0:\"\";s:22:\"noindex-subpages-wpseo\";b:0;s:20:\"noindex-author-wpseo\";b:0;s:21:\"noindex-archive-wpseo\";b:1;s:14:\"disable-author\";b:0;s:12:\"disable-date\";b:0;s:19:\"disable-post_format\";b:0;s:10:\"title-post\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-post\";s:0:\"\";s:12:\"metakey-post\";s:0:\"\";s:12:\"noindex-post\";b:0;s:13:\"showdate-post\";b:0;s:16:\"hideeditbox-post\";b:0;s:10:\"title-page\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-page\";s:0:\"\";s:12:\"metakey-page\";s:0:\"\";s:12:\"noindex-page\";b:0;s:13:\"showdate-page\";b:0;s:16:\"hideeditbox-page\";b:0;s:16:\"title-attachment\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:19:\"metadesc-attachment\";s:0:\"\";s:18:\"metakey-attachment\";s:0:\"\";s:18:\"noindex-attachment\";b:0;s:19:\"showdate-attachment\";b:0;s:22:\"hideeditbox-attachment\";b:0;s:20:\"title-portfolio_item\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:23:\"metadesc-portfolio_item\";s:0:\"\";s:22:\"metakey-portfolio_item\";s:0:\"\";s:22:\"noindex-portfolio_item\";b:0;s:23:\"showdate-portfolio_item\";b:0;s:26:\"hideeditbox-portfolio_item\";b:0;s:18:\"title-tax-category\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-category\";s:0:\"\";s:20:\"metakey-tax-category\";s:0:\"\";s:24:\"hideeditbox-tax-category\";b:0;s:20:\"noindex-tax-category\";b:0;s:18:\"title-tax-post_tag\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-post_tag\";s:0:\"\";s:20:\"metakey-tax-post_tag\";s:0:\"\";s:24:\"hideeditbox-tax-post_tag\";b:0;s:20:\"noindex-tax-post_tag\";b:0;s:21:\"title-tax-post_format\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:24:\"metadesc-tax-post_format\";s:0:\"\";s:23:\"metakey-tax-post_format\";s:0:\"\";s:27:\"hideeditbox-tax-post_format\";b:0;s:23:\"noindex-tax-post_format\";b:1;}','yes'),(440,'wpseo_social','a:20:{s:9:\"fb_admins\";a:0:{}s:12:\"fbconnectkey\";s:32:\"a8c7abf978477130f8862cf7f08c79b4\";s:13:\"facebook_site\";s:0:\"\";s:13:\"instagram_url\";s:0:\"\";s:12:\"linkedin_url\";s:0:\"\";s:11:\"myspace_url\";s:0:\"\";s:16:\"og_default_image\";s:0:\"\";s:18:\"og_frontpage_title\";s:0:\"\";s:17:\"og_frontpage_desc\";s:0:\"\";s:18:\"og_frontpage_image\";s:0:\"\";s:9:\"opengraph\";b:1;s:13:\"pinterest_url\";s:0:\"\";s:15:\"pinterestverify\";s:0:\"\";s:14:\"plus-publisher\";s:0:\"\";s:7:\"twitter\";b:1;s:12:\"twitter_site\";s:0:\"\";s:17:\"twitter_card_type\";s:7:\"summary\";s:11:\"youtube_url\";s:0:\"\";s:15:\"google_plus_url\";s:0:\"\";s:10:\"fbadminapp\";s:0:\"\";}','yes'),(441,'wpseo_rss','a:2:{s:9:\"rssbefore\";s:0:\"\";s:8:\"rssafter\";s:53:\"The post %%POSTLINK%% appeared first on %%BLOGLINK%%.\";}','yes'),(442,'wpseo_internallinks','a:10:{s:20:\"breadcrumbs-404crumb\";s:25:\"Error 404: Page not found\";s:23:\"breadcrumbs-blog-remove\";b:0;s:20:\"breadcrumbs-boldlast\";b:0;s:25:\"breadcrumbs-archiveprefix\";s:12:\"Archives for\";s:18:\"breadcrumbs-enable\";b:0;s:16:\"breadcrumbs-home\";s:4:\"Home\";s:18:\"breadcrumbs-prefix\";s:0:\"\";s:24:\"breadcrumbs-searchprefix\";s:16:\"You searched for\";s:15:\"breadcrumbs-sep\";s:7:\"&raquo;\";s:23:\"post_types-post-maintax\";i:0;}','yes'),(443,'wpseo_xml','a:17:{s:22:\"disable_author_sitemap\";b:1;s:22:\"disable_author_noposts\";b:1;s:16:\"enablexmlsitemap\";b:1;s:16:\"entries-per-page\";i:1000;s:14:\"excluded-posts\";s:0:\"\";s:38:\"user_role-administrator-not_in_sitemap\";b:0;s:31:\"user_role-editor-not_in_sitemap\";b:0;s:31:\"user_role-author-not_in_sitemap\";b:0;s:36:\"user_role-contributor-not_in_sitemap\";b:0;s:35:\"user_role-subscriber-not_in_sitemap\";b:0;s:30:\"post_types-post-not_in_sitemap\";b:0;s:30:\"post_types-page-not_in_sitemap\";b:0;s:36:\"post_types-attachment-not_in_sitemap\";b:1;s:40:\"post_types-portfolio_item-not_in_sitemap\";b:0;s:34:\"taxonomies-category-not_in_sitemap\";b:0;s:34:\"taxonomies-post_tag-not_in_sitemap\";b:0;s:37:\"taxonomies-post_format-not_in_sitemap\";b:0;}','yes'),(444,'wpseo_flush_rewrite','1','yes'),(450,'WPLANG','','yes'),(457,'wpseo_sitemap_1_cache_validator','q9RL','no'),(458,'wpseo_sitemap_portfolio_item_cache_validator','2ivcM','no'),(483,'wpseo_sitemap_acf-field-group_cache_validator','4N4cj','no'),(528,'wpseo_sitemap_cache_validator_global','2isBj','no'),(557,'wpseo_sitemap_page_cache_validator','Aplw','no'),(558,'wpseo_sitemap_revision_cache_validator','58bAF','no'),(565,'wpseo_sitemap_attachment_cache_validator','54o6a','no'),(573,'wpseo_sitemap_post_cache_validator','q9RV','no'),(685,'wpseo_sitemap_139_cache_validator','2uDbW','no'),(686,'wpseo_sitemap_category_cache_validator','q9RZ','no'),(687,'wpseo_sitemap_post_tag_cache_validator','q9RS','no'),(734,'wpseo_sitemap_310_cache_validator','keHp','no'),(784,'_site_transient_update_plugins','O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1474692972;s:8:\"response\";a:1:{s:34:\"advanced-custom-fields-pro/acf.php\";O:8:\"stdClass\":5:{s:4:\"slug\";s:26:\"advanced-custom-fields-pro\";s:6:\"plugin\";s:34:\"advanced-custom-fields-pro/acf.php\";s:11:\"new_version\";s:5:\"5.4.5\";s:3:\"url\";s:37:\"https://www.advancedcustomfields.com/\";s:7:\"package\";s:0:\"\";}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:7:{s:35:\"add-from-server/add-from-server.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"2613\";s:4:\"slug\";s:15:\"add-from-server\";s:6:\"plugin\";s:35:\"add-from-server/add-from-server.php\";s:11:\"new_version\";s:5:\"3.3.2\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/add-from-server/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/add-from-server.3.3.2.zip\";}s:19:\"akismet/akismet.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:2:\"15\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:3:\"3.2\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/akismet.3.2.zip\";}s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"46859\";s:4:\"slug\";s:23:\"all-in-one-wp-migration\";s:6:\"plugin\";s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";s:11:\"new_version\";s:4:\"5.52\";s:3:\"url\";s:54:\"https://wordpress.org/plugins/all-in-one-wp-migration/\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/plugin/all-in-one-wp-migration.5.52.zip\";}s:43:\"custom-post-type-ui/custom-post-type-ui.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"13183\";s:4:\"slug\";s:19:\"custom-post-type-ui\";s:6:\"plugin\";s:43:\"custom-post-type-ui/custom-post-type-ui.php\";s:11:\"new_version\";s:5:\"1.4.1\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/custom-post-type-ui/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/custom-post-type-ui.1.4.1.zip\";}s:33:\"w3-total-cache/w3-total-cache.php\";O:8:\"stdClass\":7:{s:2:\"id\";s:4:\"9376\";s:4:\"slug\";s:14:\"w3-total-cache\";s:6:\"plugin\";s:33:\"w3-total-cache/w3-total-cache.php\";s:11:\"new_version\";s:7:\"0.9.4.1\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/w3-total-cache/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/w3-total-cache.0.9.4.1.zip\";s:14:\"upgrade_notice\";s:140:\"Thanks for using W3 Total Cache! This release includes important security updates designed to contribute to a secure WordPress installation.\";}s:41:\"wordpress-importer/wordpress-importer.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:5:\"14975\";s:4:\"slug\";s:18:\"wordpress-importer\";s:6:\"plugin\";s:41:\"wordpress-importer/wordpress-importer.php\";s:11:\"new_version\";s:5:\"0.6.3\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/wordpress-importer/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/wordpress-importer.0.6.3.zip\";}s:24:\"wordpress-seo/wp-seo.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:4:\"5899\";s:4:\"slug\";s:13:\"wordpress-seo\";s:6:\"plugin\";s:24:\"wordpress-seo/wp-seo.php\";s:11:\"new_version\";s:3:\"3.5\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/wordpress-seo/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/wordpress-seo.3.5.zip\";}}}','no'),(810,'ai1wm_status','a:3:{s:4:\"type\";s:8:\"download\";s:7:\"message\";s:197:\"<a href=\"https://lukeboyle.com/app/ai1wm-backups/lukeboyle.com-wp-20170224-091657-512.wpress\" class=\"ai1wm-button-green ai1wm-emphasize\"><span>Download lukeboyle.com</span><em>Size: 166 MB</em></a>\";s:5:\"title\";N;}','yes'),(840,'blog_public','1','yes'),(841,'blog_charset','','yes'),(846,'wpseo-gsc-refresh_token','1/Fc525rvF1sElvnjP0P1lFYHRIeLvLwserwW7P-7orPI','yes'),(847,'wpseo-gsc-access_token','a:5:{s:13:\"refresh_token\";s:45:\"1/Fc525rvF1sElvnjP0P1lFYHRIeLvLwserwW7P-7orPI\";s:12:\"access_token\";s:71:\"ya29.Ci9oA3IQjrrPYEs5XnMlxW_4fxrJ70TrLo_YxSqTkWT6pGKn3ioLRWu7h3A6oN7QVw\";s:7:\"expires\";i:1474687635;s:10:\"expires_in\";i:3600;s:7:\"created\";i:1474684035;}','yes'),(848,'wpseo-gsc','a:1:{s:7:\"profile\";s:21:\"http://lukeboyle.com/\";}','yes'),(851,'wpseo_gsc_issues_counts','a:3:{s:3:\"web\";a:6:{s:9:\"not_found\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"not_followed\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:13:\"access_denied\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"server_error\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:8:\"soft_404\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:5:\"other\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}}s:6:\"mobile\";a:5:{s:9:\"not_found\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"not_followed\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:13:\"access_denied\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"server_error\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:5:\"other\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}}s:15:\"smartphone_only\";a:9:{s:9:\"not_found\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"not_followed\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:13:\"access_denied\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:12:\"server_error\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:8:\"soft_404\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:7:\"roboted\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:16:\"faulty_redirects\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}i:0;a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}s:5:\"other\";a:2:{s:5:\"count\";s:1:\"0\";s:10:\"last_fetch\";N;}}}','yes'),(852,'wpseo_gsc_last_fetch','1474684041','no'),(903,'wpseo_sitemap_350_cache_validator','75XVC','no'),(904,'w3tc_edge_remainder_period','2592000','yes'),(905,'wpseo_sitemap_367_cache_validator','IAVK','no'),(906,'wpseo_sitemap_372_cache_validator','2evdh','no'),(907,'wpseo_sitemap_75_cache_validator','2iBgJ','no'),(908,'wpseo_sitemap_73_cache_validator','2iBgS','no'),(909,'wpseo_sitemap_69_cache_validator','2iBgV','no'),(910,'wpseo_sitemap_67_cache_validator','2iBgZ','no'),(911,'wpseo_sitemap_65_cache_validator','2iBh3','no'),(912,'wpseo_sitemap_71_cache_validator','2iBh7','no'),(913,'wpseo_sitemap_60_cache_validator','2iBha','no'),(914,'wpseo_sitemap_118_cache_validator','2iBhf','no'),(915,'wpseo_sitemap_382_cache_validator','dEln','no'),(916,'wpseo_sitemap_218_cache_validator','4OPOr','no'),(925,'wpseo_sitemap_295_cache_validator','2lTEG','no'),(926,'wpseo_sitemap_185_cache_validator','2lTEZ','no'),(927,'wpseo_sitemap_153_cache_validator','2lTF3','no'),(928,'wpseo_sitemap_nav_menu_item_cache_validator','4awwL','no'),(929,'wpseo_sitemap_nav_menu_cache_validator','4awwO','no'),(930,'wpseo_sitemap_427_cache_validator','m9CW','no'),(937,'ai1wm_url_ip','lukeboyle.com','yes'),(938,'ai1wm_url_adapter','curl','yes'),(939,'db_upgraded','','yes'),(940,'can_compress_scripts','0','no'),(941,'wpseo_onpage','a:2:{s:6:\"status\";i:1;s:10:\"last_fetch\";i:1488015596;}','yes'),(942,'wpseo_sitemap_472_cache_validator','21jZD','no'),(943,'fresh_site','0','yes'),(944,'wpseo_sitemap_262_cache_validator','2m9pX','no'),(945,'wpseo_sitemap_author_cache_validator','4RhCe','no'),(946,'wpseo_sitemap_525_cache_validator','4RUya','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=1714 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (2,4,'_edit_last','1'),(3,4,'_edit_lock','1475285255:1'),(4,6,'_edit_last','1'),(5,6,'_edit_lock','1473850026:1'),(6,12,'_menu_item_type','post_type'),(7,12,'_menu_item_menu_item_parent','0'),(8,12,'_menu_item_object_id','4'),(9,12,'_menu_item_object','page'),(10,12,'_menu_item_target',''),(11,12,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(12,12,'_menu_item_xfn',''),(13,12,'_menu_item_url',''),(14,14,'_edit_last','1'),(15,14,'_edit_lock','1485828713:1'),(19,17,'_wp_attached_file','2016/09/Screen-Shot-2016-09-10-at-5.15.20-PM.png'),(20,17,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1128;s:6:\"height\";i:758;s:4:\"file\";s:48:\"2016/09/Screen-Shot-2016-09-10-at-5.15.20-PM.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-10-at-5.15.20-PM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-10-at-5.15.20-PM-300x202.png\";s:5:\"width\";i:300;s:6:\"height\";i:202;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-10-at-5.15.20-PM-768x516.png\";s:5:\"width\";i:768;s:6:\"height\";i:516;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2016-09-10-at-5.15.20-PM-1024x688.png\";s:5:\"width\";i:1024;s:6:\"height\";i:688;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(21,18,'portfolio_item_0_title','Agander'),(22,18,'_portfolio_item_0_title','field_57d5dafc31bdf'),(23,18,'portfolio_item_0_image','17'),(24,18,'_portfolio_item_0_image','field_57d5db1c31be0'),(25,18,'portfolio_item_0_description','asdf'),(26,18,'_portfolio_item_0_description','field_57d5db3531be1'),(27,18,'portfolio_item','a:1:{i:0;s:0:\"\";}'),(28,18,'_portfolio_item','field_57d5dae231bde'),(29,4,'portfolio_item_0_title','Agander'),(30,4,'_portfolio_item_0_title','field_57d5dafc31bdf'),(31,4,'portfolio_item_0_image','17'),(32,4,'_portfolio_item_0_image','field_57d5db1c31be0'),(33,4,'portfolio_item_0_description','asdf'),(34,4,'_portfolio_item_0_description','field_57d5db3531be1'),(35,4,'portfolio_item','a:1:{i:0;s:0:\"\";}'),(36,4,'_portfolio_item','field_57d5dae231bde'),(37,21,'_edit_last','1'),(38,21,'_edit_lock','1473680375:1'),(39,27,'_edit_last','1'),(40,27,'_edit_lock','1473669480:1'),(55,42,'home_technologies_0_technology','JavaScript (ES6)'),(56,42,'_home_technologies_0_technology','field_57d5df73d737d'),(57,42,'home_technologies','1'),(58,42,'_home_technologies','field_57d5df54d737c'),(59,42,'home_npm_packages','0'),(60,42,'_home_npm_packages','field_57d5dfa2d737f'),(61,14,'home_technologies_0_technology','JavaScript (ES6)'),(62,14,'_home_technologies_0_technology','field_57d5df73d737d'),(63,14,'home_technologies','11'),(64,14,'_home_technologies','field_57d5df54d737c'),(65,14,'home_npm_packages','5'),(66,14,'_home_npm_packages','field_57d5dfa2d737f'),(67,43,'home_technologies_0_technology','JavaScript (ES6)'),(68,43,'_home_technologies_0_technology','field_57d5df73d737d'),(69,43,'home_technologies_1_technology','Angular 1.5+'),(70,43,'_home_technologies_1_technology','field_57d5df73d737d'),(71,43,'home_technologies','2'),(72,43,'_home_technologies','field_57d5df54d737c'),(73,43,'home_npm_packages','0'),(74,43,'_home_npm_packages','field_57d5dfa2d737f'),(75,14,'home_technologies_1_technology','Angular 1.x'),(76,14,'_home_technologies_1_technology','field_57d5df73d737d'),(77,44,'home_technologies_0_technology','JavaScript (ES6)'),(78,44,'_home_technologies_0_technology','field_57d5df73d737d'),(79,44,'home_technologies_1_technology','Angular 1.5+'),(80,44,'_home_technologies_1_technology','field_57d5df73d737d'),(81,44,'home_technologies_2_technology','React/Redux'),(82,44,'_home_technologies_2_technology','field_57d5df73d737d'),(83,44,'home_technologies_3_technology','Vue.js'),(84,44,'_home_technologies_3_technology','field_57d5df73d737d'),(85,44,'home_technologies_4_technology','Node'),(86,44,'_home_technologies_4_technology','field_57d5df73d737d'),(87,44,'home_technologies_5_technology','SASS'),(88,44,'_home_technologies_5_technology','field_57d5df73d737d'),(89,44,'home_technologies_6_technology','Webpack, Gulp'),(90,44,'_home_technologies_6_technology','field_57d5df73d737d'),(91,44,'home_technologies_7_technology','Mocha/Karma Testing'),(92,44,'_home_technologies_7_technology','field_57d5df73d737d'),(93,44,'home_technologies_8_technology','Continuous Integration'),(94,44,'_home_technologies_8_technology','field_57d5df73d737d'),(95,44,'home_technologies','9'),(96,44,'_home_technologies','field_57d5df54d737c'),(97,44,'home_npm_packages_0_name','local-storage-manager'),(98,44,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(99,44,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(100,44,'_home_npm_packages_0_link','field_57d5dfdad7381'),(101,44,'home_npm_packages_1_name','es6-module-boilerplate'),(102,44,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(103,44,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(104,44,'_home_npm_packages_1_link','field_57d5dfdad7381'),(105,44,'home_npm_packages_2_name','lazy-slider'),(106,44,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(107,44,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(108,44,'_home_npm_packages_2_link','field_57d5dfdad7381'),(109,44,'home_npm_packages_3_name','timetools'),(110,44,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(111,44,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(112,44,'_home_npm_packages_3_link','field_57d5dfdad7381'),(113,44,'home_npm_packages','4'),(114,44,'_home_npm_packages','field_57d5dfa2d737f'),(115,14,'home_technologies_2_technology','React/Redux'),(116,14,'_home_technologies_2_technology','field_57d5df73d737d'),(117,14,'home_technologies_3_technology','Vue.js'),(118,14,'_home_technologies_3_technology','field_57d5df73d737d'),(119,14,'home_technologies_4_technology','AJAX (With Promises)'),(120,14,'_home_technologies_4_technology','field_57d5df73d737d'),(121,14,'home_technologies_5_technology','Node.js'),(122,14,'_home_technologies_5_technology','field_57d5df73d737d'),(123,14,'home_technologies_6_technology','SASS'),(124,14,'_home_technologies_6_technology','field_57d5df73d737d'),(125,14,'home_technologies_7_technology','Webpack, Gulp'),(126,14,'_home_technologies_7_technology','field_57d5df73d737d'),(127,14,'home_technologies_8_technology','Mocha/Karma Testing'),(128,14,'_home_technologies_8_technology','field_57d5df73d737d'),(129,14,'home_npm_packages_0_name','lazy slider'),(130,14,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(131,14,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(132,14,'_home_npm_packages_0_link','field_57d5dfdad7381'),(133,14,'home_npm_packages_1_name','local-storage-manager'),(134,14,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(135,14,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(136,14,'_home_npm_packages_1_link','field_57d5dfdad7381'),(137,14,'home_npm_packages_2_name','es6-module-boilerplate'),(138,14,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(139,14,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(140,14,'_home_npm_packages_2_link','field_57d5dfdad7381'),(141,14,'home_npm_packages_3_name','timetools'),(142,14,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(143,14,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(144,14,'_home_npm_packages_3_link','field_57d5dfdad7381'),(145,47,'home_technologies_0_technology','JavaScript (ES6)'),(146,47,'_home_technologies_0_technology','field_57d5df73d737d'),(147,47,'home_technologies_1_technology','Angular 1.5+'),(148,47,'_home_technologies_1_technology','field_57d5df73d737d'),(149,47,'home_technologies_2_technology','React/Redux'),(150,47,'_home_technologies_2_technology','field_57d5df73d737d'),(151,47,'home_technologies_3_technology','Vue.js'),(152,47,'_home_technologies_3_technology','field_57d5df73d737d'),(153,47,'home_technologies_4_technology','Node'),(154,47,'_home_technologies_4_technology','field_57d5df73d737d'),(155,47,'home_technologies_5_technology','SASS'),(156,47,'_home_technologies_5_technology','field_57d5df73d737d'),(157,47,'home_technologies_6_technology','Webpack, Gulp'),(158,47,'_home_technologies_6_technology','field_57d5df73d737d'),(159,47,'home_technologies_7_technology','Mocha/Karma Testing'),(160,47,'_home_technologies_7_technology','field_57d5df73d737d'),(161,47,'home_technologies_8_technology','Continuous Integration'),(162,47,'_home_technologies_8_technology','field_57d5df73d737d'),(163,47,'home_technologies','9'),(164,47,'_home_technologies','field_57d5df54d737c'),(165,47,'home_npm_packages_0_name','local-storage-manager'),(166,47,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(167,47,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(168,47,'_home_npm_packages_0_link','field_57d5dfdad7381'),(169,47,'home_npm_packages_1_name','es6-module-boilerplate'),(170,47,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(171,47,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(172,47,'_home_npm_packages_1_link','field_57d5dfdad7381'),(173,47,'home_npm_packages_2_name','lazy-slider'),(174,47,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(175,47,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(176,47,'_home_npm_packages_2_link','field_57d5dfdad7381'),(177,47,'home_npm_packages_3_name','timetools'),(178,47,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(179,47,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(180,47,'_home_npm_packages_3_link','field_57d5dfdad7381'),(181,47,'home_npm_packages','4'),(182,47,'_home_npm_packages','field_57d5dfa2d737f'),(183,47,'home_featured_project','40'),(184,47,'_home_featured_project','field_57d68fcd83e16'),(185,14,'home_featured_project','424'),(186,14,'_home_featured_project','field_57d68fcd83e16'),(187,48,'home_technologies_0_technology','JavaScript (ES6)'),(188,48,'_home_technologies_0_technology','field_57d5df73d737d'),(189,48,'home_technologies_1_technology','Angular 1.5+'),(190,48,'_home_technologies_1_technology','field_57d5df73d737d'),(191,48,'home_technologies_2_technology','React/Redux'),(192,48,'_home_technologies_2_technology','field_57d5df73d737d'),(193,48,'home_technologies_3_technology','Vue.js'),(194,48,'_home_technologies_3_technology','field_57d5df73d737d'),(195,48,'home_technologies_4_technology','Node'),(196,48,'_home_technologies_4_technology','field_57d5df73d737d'),(197,48,'home_technologies_5_technology','SASS'),(198,48,'_home_technologies_5_technology','field_57d5df73d737d'),(199,48,'home_technologies_6_technology','Webpack, Gulp'),(200,48,'_home_technologies_6_technology','field_57d5df73d737d'),(201,48,'home_technologies_7_technology','Mocha/Karma Testing'),(202,48,'_home_technologies_7_technology','field_57d5df73d737d'),(203,48,'home_technologies_8_technology','Continuous Integration'),(204,48,'_home_technologies_8_technology','field_57d5df73d737d'),(205,48,'home_technologies','9'),(206,48,'_home_technologies','field_57d5df54d737c'),(207,48,'home_npm_packages_0_name','local-storage-manager'),(208,48,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(209,48,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(210,48,'_home_npm_packages_0_link','field_57d5dfdad7381'),(211,48,'home_npm_packages_1_name','es6-module-boilerplate'),(212,48,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(213,48,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(214,48,'_home_npm_packages_1_link','field_57d5dfdad7381'),(215,48,'home_npm_packages_2_name','lazy-slider'),(216,48,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(217,48,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(218,48,'_home_npm_packages_2_link','field_57d5dfdad7381'),(219,48,'home_npm_packages_3_name','timetools'),(220,48,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(221,48,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(222,48,'_home_npm_packages_3_link','field_57d5dfdad7381'),(223,48,'home_npm_packages','4'),(224,48,'_home_npm_packages','field_57d5dfa2d737f'),(225,48,'home_featured_project','40'),(226,48,'_home_featured_project','field_57d68fcd83e16'),(227,48,'home_featured_blog_post','1'),(228,48,'_home_featured_blog_post','field_57d6910fb3ec1'),(229,14,'home_featured_blog_post','382'),(230,14,'_home_featured_blog_post','field_57d6910fb3ec1'),(248,53,'home_technologies_0_technology','JavaScript (ES6)'),(249,53,'_home_technologies_0_technology','field_57d5df73d737d'),(250,53,'home_technologies_1_technology','Angular 1.5+'),(251,53,'_home_technologies_1_technology','field_57d5df73d737d'),(252,53,'home_technologies_2_technology','React/Redux'),(253,53,'_home_technologies_2_technology','field_57d5df73d737d'),(254,53,'home_technologies_3_technology','Vue.js'),(255,53,'_home_technologies_3_technology','field_57d5df73d737d'),(256,53,'home_technologies_4_technology','Node'),(257,53,'_home_technologies_4_technology','field_57d5df73d737d'),(258,53,'home_technologies_5_technology','SASS'),(259,53,'_home_technologies_5_technology','field_57d5df73d737d'),(260,53,'home_technologies_6_technology','Webpack, Gulp'),(261,53,'_home_technologies_6_technology','field_57d5df73d737d'),(262,53,'home_technologies_7_technology','Mocha/Karma Testing'),(263,53,'_home_technologies_7_technology','field_57d5df73d737d'),(264,53,'home_technologies_8_technology','Continuous Integration'),(265,53,'_home_technologies_8_technology','field_57d5df73d737d'),(266,53,'home_technologies','9'),(267,53,'_home_technologies','field_57d5df54d737c'),(268,53,'home_npm_packages_0_name','local-storage-manager'),(269,53,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(270,53,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(271,53,'_home_npm_packages_0_link','field_57d5dfdad7381'),(272,53,'home_npm_packages_1_name','es6-module-boilerplate'),(273,53,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(274,53,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(275,53,'_home_npm_packages_1_link','field_57d5dfdad7381'),(276,53,'home_npm_packages_2_name','lazy-slider'),(277,53,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(278,53,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(279,53,'_home_npm_packages_2_link','field_57d5dfdad7381'),(280,53,'home_npm_packages_3_name','timetools'),(281,53,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(282,53,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(283,53,'_home_npm_packages_3_link','field_57d5dfdad7381'),(284,53,'home_npm_packages','4'),(285,53,'_home_npm_packages','field_57d5dfa2d737f'),(286,53,'home_featured_project','52'),(287,53,'_home_featured_project','field_57d68fcd83e16'),(288,53,'home_featured_blog_post','1'),(289,53,'_home_featured_blog_post','field_57d6910fb3ec1'),(290,54,'_edit_last','1'),(291,54,'_edit_lock','1485828751:1'),(292,56,'_menu_item_type','post_type'),(293,56,'_menu_item_menu_item_parent','0'),(294,56,'_menu_item_object_id','54'),(295,56,'_menu_item_object','page'),(296,56,'_menu_item_target',''),(297,56,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(298,56,'_menu_item_xfn',''),(299,56,'_menu_item_url',''),(300,57,'_menu_item_type','custom'),(301,57,'_menu_item_menu_item_parent','0'),(302,57,'_menu_item_object_id','57'),(303,57,'_menu_item_object','custom'),(304,57,'_menu_item_target',''),(305,57,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(306,57,'_menu_item_xfn',''),(307,57,'_menu_item_url','/'),(354,77,'_wp_attached_file','2016/09/Screen-Shot-2016-09-17-at-9.29.46-AM.png'),(355,77,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:596;s:6:\"height\";i:672;s:4:\"file\";s:48:\"2016/09/Screen-Shot-2016-09-17-at-9.29.46-AM.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-17-at-9.29.46-AM-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-17-at-9.29.46-AM-266x300.png\";s:5:\"width\";i:266;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(362,78,'_wp_attached_file','2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM.jpg'),(363,78,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:400;s:4:\"file\";s:48:\"2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-17-at-9.31.25-AM-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2016-09-17-at-9.31.25-AM-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(364,79,'_wp_attached_file','2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM-1.jpg'),(365,79,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:400;s:4:\"file\";s:50:\"2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:50:\"Screen-Shot-2016-09-17-at-9.31.25-AM-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:50:\"Screen-Shot-2016-09-17-at-9.31.25-AM-1-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(370,80,'_edit_last','1'),(371,80,'_edit_lock','1485828778:1'),(372,80,'_wp_page_template','default'),(373,82,'_menu_item_type','post_type'),(374,82,'_menu_item_menu_item_parent','0'),(375,82,'_menu_item_object_id','80'),(376,82,'_menu_item_object','page'),(377,82,'_menu_item_target',''),(378,82,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(379,82,'_menu_item_xfn',''),(380,82,'_menu_item_url',''),(408,85,'_menu_item_type','taxonomy'),(409,85,'_menu_item_menu_item_parent','0'),(410,85,'_menu_item_object_id','4'),(411,85,'_menu_item_object','category'),(412,85,'_menu_item_target',''),(413,85,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(414,85,'_menu_item_xfn',''),(415,85,'_menu_item_url',''),(416,86,'_edit_last','1'),(417,86,'_oembed_f797eeb186fb83d554ddb42e97958835','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Bm5iA4Zupek?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(418,86,'_oembed_time_f797eeb186fb83d554ddb42e97958835','1443594016'),(419,86,'_oembed_5b0f14615411b63b6fb6832da46ff615','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/dCm6LPrXEzE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(420,86,'_oembed_time_5b0f14615411b63b6fb6832da46ff615','1443594016'),(421,86,'_oembed_8149004abc2797630595e110a44facf1','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/OMGd3mAfl-0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(422,86,'_oembed_time_8149004abc2797630595e110a44facf1','1443594016'),(423,86,'_oembed_c458a35ac3817bc01d92cbb8255d224e','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/rWsvkW6rKkQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(424,86,'_oembed_time_c458a35ac3817bc01d92cbb8255d224e','1443594016'),(425,86,'_oembed_783f7c1276b911134d406f6a1dba78e0','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/j5-yKhDd64s?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(426,86,'_oembed_time_783f7c1276b911134d406f6a1dba78e0','1438699057'),(427,86,'_oembed_12153df9e5093ab811416a630a0d885e','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/4WMXtU2IrKw?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(428,86,'_oembed_time_12153df9e5093ab811416a630a0d885e','1443594016'),(429,86,'_oembed_0e55f9ce781095f64295dc6c86e50793','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/8ibQxjHooXc?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(430,86,'_oembed_time_0e55f9ce781095f64295dc6c86e50793','1439259984'),(431,86,'_oembed_3fde763a8af6ba2fb32caee8b5ee86a9','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/TRLSQDCkcaA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(432,86,'_oembed_time_3fde763a8af6ba2fb32caee8b5ee86a9','1439259983'),(433,86,'_oembed_7346c13da3300faee738c8aa46943d71','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/BoEKWtgJQAU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(434,86,'_oembed_time_7346c13da3300faee738c8aa46943d71','1443594016'),(435,86,'_oembed_0562e4480ba8a1aa50353fc2c3d0ea7c','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/C9b7uxX5LZo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(436,86,'_oembed_time_0562e4480ba8a1aa50353fc2c3d0ea7c','1443594016'),(437,86,'_oembed_af21ac97f1a39af73d39b55e054eaacd','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kAMDVkK9nUE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(438,86,'_oembed_time_af21ac97f1a39af73d39b55e054eaacd','1443594017'),(439,86,'_oembed_772dfcf8aa851e0de1ac95f88b231d21','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/ISFUG005Flg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(440,86,'_oembed_time_772dfcf8aa851e0de1ac95f88b231d21','1438825496'),(441,86,'_oembed_1fbd6a68ab3cbedbef882f6d59861b1b','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/zuV9hCYzzTg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(442,86,'_oembed_time_1fbd6a68ab3cbedbef882f6d59861b1b','1439388720'),(443,86,'_oembed_f3cb6a9ec89cb8cf372d023be3e8eaeb','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/KnnYiW5dnhQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(444,86,'_oembed_time_f3cb6a9ec89cb8cf372d023be3e8eaeb','1438824229'),(445,86,'_oembed_a7e4e798de09b01922b0a6c2557356c0','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/1nCmeSGVpyU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(446,86,'_oembed_time_a7e4e798de09b01922b0a6c2557356c0','1443594017'),(447,86,'_oembed_0c3b1a104114d11161d6105aaedd4a6a','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kXEWj9N8gVg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(448,86,'_oembed_time_0c3b1a104114d11161d6105aaedd4a6a','1443594017'),(449,86,'_oembed_44c7e20994905381d740c74cceb4c926','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/XSbZidsgMfw?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(450,86,'_oembed_time_44c7e20994905381d740c74cceb4c926','1443594017'),(451,86,'_oembed_9715df347d283fb125ce13ffad3a7b37','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/nU4OIAYwo5g?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(452,86,'_oembed_time_9715df347d283fb125ce13ffad3a7b37','1438825449'),(453,86,'_oembed_4f1ff2523758a86b2622c266dea57a1e','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/10yrPDf92hY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(454,86,'_oembed_time_4f1ff2523758a86b2622c266dea57a1e','1443594017'),(455,86,'_oembed_efff659e636f08ec61b2592963a962f8','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/GAN_O9xRkf4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(456,86,'_oembed_time_efff659e636f08ec61b2592963a962f8','1443594017'),(457,86,'_oembed_006b41efadca07b0bc3b0d1aa5a9f22f','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/LGRHKwFHvNM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(458,86,'_oembed_time_006b41efadca07b0bc3b0d1aa5a9f22f','1443594017'),(459,86,'_oembed_351c0e02f01a3bdb52b4fa13eb050ae0','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/anRkutaPS9w?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(460,86,'_oembed_time_351c0e02f01a3bdb52b4fa13eb050ae0','1443594017'),(461,86,'_oembed_b66d44d8d1b53449de2572cd736620a9','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ITM7AtxkaDU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(462,86,'_oembed_time_b66d44d8d1b53449de2572cd736620a9','1443594018'),(463,86,'_oembed_a609fb69d4152dd4d00f308b101e9e25','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/DawrlSwHUiM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(464,86,'_oembed_time_a609fb69d4152dd4d00f308b101e9e25','1443594016'),(465,86,'_oembed_ff943eb7d4526ad58e7b64dd828aafad','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/D0QcxWPB59o?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(466,86,'_oembed_time_ff943eb7d4526ad58e7b64dd828aafad','1438827961'),(467,86,'_oembed_1748b0469e505a098da56a288c8c81e5','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/UF7P2PlWdeA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(468,86,'_oembed_time_1748b0469e505a098da56a288c8c81e5','1443594018'),(469,86,'_oembed_878b77f783be4f1e1034b8c301f0fc7b','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kfzRXseSBIM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(470,86,'_oembed_time_878b77f783be4f1e1034b8c301f0fc7b','1443594017'),(471,86,'_oembed_33ac95ac75d4910f4bfb08506031dd76','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/rSC9Gw-Qvw0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(472,86,'_oembed_time_33ac95ac75d4910f4bfb08506031dd76','1443594018'),(473,86,'_oembed_7d85b0d17f208809a371203b4d2ac3c6','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/hKFRwLIGri4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(474,86,'_oembed_time_7d85b0d17f208809a371203b4d2ac3c6','1438837068'),(475,86,'_oembed_99e94498056d61f8cd831d9c65ba9b73','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/pJJyKlRxyvA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(476,86,'_oembed_time_99e94498056d61f8cd831d9c65ba9b73','1443594018'),(477,86,'_oembed_4ad71c556f30600348512e7ccafbc43a','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kxWNNHCrcFg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(478,86,'_oembed_time_4ad71c556f30600348512e7ccafbc43a','1443594017'),(479,86,'_oembed_628c9cd0c1025f3a134db4397a07ed2a','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/xoIDRG7AFRA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(480,86,'_oembed_time_628c9cd0c1025f3a134db4397a07ed2a','1443594018'),(481,86,'_oembed_a5d65a94e805b9f7a7906c3557be963c','<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/Htl3XWUhUOM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(482,86,'_oembed_time_a5d65a94e805b9f7a7906c3557be963c','1443594017'),(483,86,'_oembed_bb11b476bf4f5641ff846114b3e95582','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/t99r8JSdI7s?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(484,86,'_oembed_time_bb11b476bf4f5641ff846114b3e95582','1443594017'),(485,86,'_oembed_08e5ecb4fe37616e85167a71dfe32965','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/2PjCesSLqYU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(486,86,'_oembed_time_08e5ecb4fe37616e85167a71dfe32965','1443594017'),(487,86,'_oembed_7dc8df30f0f4ee16b6faf3379d8a930f','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/TErySTMbFlk?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(488,86,'_oembed_time_7dc8df30f0f4ee16b6faf3379d8a930f','1443594018'),(489,86,'_oembed_439888665903d5822cb33a0749fa6cee','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/DigtCrO77L8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(490,86,'_oembed_time_439888665903d5822cb33a0749fa6cee','1443594017'),(491,86,'_oembed_a412cc13a871310b27cf18da81b50ec7','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ExVtrghW5Y4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(492,86,'_oembed_time_a412cc13a871310b27cf18da81b50ec7','1443594017'),(493,86,'_oembed_ea6edca28a2cc1a4c5d900d583d937bf','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/fcRKZkk79-w?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(494,86,'_oembed_time_ea6edca28a2cc1a4c5d900d583d937bf','1443594018'),(495,86,'_oembed_bedb177f5d84825aa0cbc63b8c8609ca','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/D4YWuLo5uRg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(496,86,'_oembed_time_bedb177f5d84825aa0cbc63b8c8609ca','1443594018'),(497,86,'_oembed_867e439c745f90a7cc83b09335ef6994','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/VXKXFEkZkUI?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(498,86,'_oembed_time_867e439c745f90a7cc83b09335ef6994','1443594018'),(499,86,'_oembed_68801669ea19914128caed9504175c59','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/vbxcPy1qJTU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(500,86,'_oembed_time_68801669ea19914128caed9504175c59','1443594016'),(501,86,'_oembed_82be52a235f09238899b45f5964bd21f','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/MhHoJX8oIDA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(502,86,'_oembed_time_82be52a235f09238899b45f5964bd21f','1443594018'),(503,86,'_oembed_2792e89d8e034f6cf5b6aa4c69062402','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/yA-ee9M_jhE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(504,86,'_oembed_time_2792e89d8e034f6cf5b6aa4c69062402','1443594016'),(505,86,'_oembed_1d879ac8cb3ab8e49be3308eda38806a','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/stoLqWXsIOY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(506,86,'_oembed_time_1d879ac8cb3ab8e49be3308eda38806a','1443594018'),(507,86,'_oembed_3b00dfcafea81582dfd1c8edcf3a19f1','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/tZ5Mu2gs-M8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(508,86,'_oembed_time_3b00dfcafea81582dfd1c8edcf3a19f1','1443594018'),(509,86,'_oembed_3cd2c36831d6f3812b69659174142456','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/rQsr1ltaWIA?start=32&feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(510,86,'_oembed_time_3cd2c36831d6f3812b69659174142456','1443594018'),(511,86,'_oembed_05fdb0cb15648e81aece4f4d479b5c8d','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/r5GCn1BKkxg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(512,86,'_oembed_time_05fdb0cb15648e81aece4f4d479b5c8d','1443594019'),(513,86,'_oembed_8a73ea9e1a389c3cee6fb0e0cfd60e39','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lNq2ZN2IpoA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(514,86,'_oembed_time_8a73ea9e1a389c3cee6fb0e0cfd60e39','1443594019'),(515,86,'_oembed_28f140012a91b5fc3e1275df0a8600c3','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/mb6Jc4juSF8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(516,86,'_oembed_time_28f140012a91b5fc3e1275df0a8600c3','1443594019'),(517,86,'_oembed_1ebc9e29f4903c85f3404fde3b3177f1','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/Z-48u_uWMHY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(518,86,'_oembed_time_1ebc9e29f4903c85f3404fde3b3177f1','1443594016'),(519,86,'_oembed_4c15261fdc5dafb7888642949e4f8eeb','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/q604eed4ad0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(520,86,'_oembed_time_4c15261fdc5dafb7888642949e4f8eeb','1443594016'),(521,86,'_oembed_d9d742d7ade923a7d2b314fed6d23ab2','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/axYiOWGfs48?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(522,86,'_oembed_time_d9d742d7ade923a7d2b314fed6d23ab2','1439427114'),(523,86,'_oembed_92748a6778dcbd7ac3fe8f7016a4d702','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/6lIqNjC1RKU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(524,86,'_oembed_time_92748a6778dcbd7ac3fe8f7016a4d702','1443594017'),(525,86,'_oembed_3f9bee6848ef25abefb93cbf696e9bf4','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/1tFXIy7OWos?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(526,86,'_oembed_time_3f9bee6848ef25abefb93cbf696e9bf4','1443594018'),(527,86,'_oembed_3f03d6473adac9c0bf3448a7ecf8bdf3','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/lTxDEu1mw68?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(528,86,'_oembed_time_3f03d6473adac9c0bf3448a7ecf8bdf3','1443594018'),(529,86,'_oembed_7041bd7abfe9422db59d9049d8c4a54e','<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/RyCEo2PxPm4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(530,86,'_oembed_time_7041bd7abfe9422db59d9049d8c4a54e','1443594018'),(531,86,'_oembed_ee4bc05a85f7b7900a54bf102528d54f','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/Bm5iA4Zupek?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(532,86,'_oembed_time_ee4bc05a85f7b7900a54bf102528d54f','1443986246'),(533,86,'_oembed_01211725ee0eee26eebfaaf72b94160e','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/q604eed4ad0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(534,86,'_oembed_time_01211725ee0eee26eebfaaf72b94160e','1443986246'),(535,86,'_oembed_d0ba67506179483c06870d5653c1e1c8','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/DawrlSwHUiM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(536,86,'_oembed_time_d0ba67506179483c06870d5653c1e1c8','1443986246'),(537,86,'_oembed_7c2507e41fce7f09427b3cd345caf29a','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/vbxcPy1qJTU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(538,86,'_oembed_time_7c2507e41fce7f09427b3cd345caf29a','1443986246'),(539,86,'_oembed_39da6a566f90ea4938a0e84766ece4e9','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/yA-ee9M_jhE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(540,86,'_oembed_time_39da6a566f90ea4938a0e84766ece4e9','1443986246'),(541,86,'_oembed_68e51d8102bafffe07da7b47a350e520','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/Z-48u_uWMHY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(542,86,'_oembed_time_68e51d8102bafffe07da7b47a350e520','1443986246'),(543,86,'_oembed_9091f6843a0a36a633fed599e5268858','<iframe width=\"604\" height=\"453\" src=\"https://www.youtube.com/embed/4WMXtU2IrKw?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(544,86,'_oembed_time_9091f6843a0a36a633fed599e5268858','1443986246'),(545,86,'_oembed_01705f1f23ecc5da8931c52283f12794','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/rWsvkW6rKkQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(546,86,'_oembed_time_01705f1f23ecc5da8931c52283f12794','1443986246'),(547,86,'_oembed_45833df44c64c5433202873ac9800585','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/OMGd3mAfl-0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(548,86,'_oembed_time_45833df44c64c5433202873ac9800585','1443986247'),(549,86,'_oembed_3ea4955f2327abe89b1fa7f85aca5434','<iframe width=\"604\" height=\"453\" src=\"https://www.youtube.com/embed/dCm6LPrXEzE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(550,86,'_oembed_time_3ea4955f2327abe89b1fa7f85aca5434','1443986247'),(551,86,'_oembed_9a6d59ea6a954dabb429585a0f68b914','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/BoEKWtgJQAU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(552,86,'_oembed_time_9a6d59ea6a954dabb429585a0f68b914','1443986247'),(553,86,'_oembed_6ec01d521d061840c806b236bfb5047f','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/C9b7uxX5LZo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(554,86,'_oembed_time_6ec01d521d061840c806b236bfb5047f','1443986247'),(555,86,'_oembed_7596a27e7fdeb833f2d37cd1ef4bfa49','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/2PjCesSLqYU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(556,86,'_oembed_time_7596a27e7fdeb833f2d37cd1ef4bfa49','1443986247'),(557,86,'_oembed_2c6d7a1407913d58c8c0e2214ea82a34','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/kAMDVkK9nUE?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(558,86,'_oembed_time_2c6d7a1407913d58c8c0e2214ea82a34','1443986247'),(559,86,'_oembed_b45aea2ba806dfdbfc330b91cfea9da7','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/kxWNNHCrcFg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(560,86,'_oembed_time_b45aea2ba806dfdbfc330b91cfea9da7','1443986247'),(561,86,'_oembed_00d6653831388bf8235ddac26d4a7c1e','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/kXEWj9N8gVg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(562,86,'_oembed_time_00d6653831388bf8235ddac26d4a7c1e','1443986247'),(563,86,'_oembed_a7eec6af04d4749aefb59d7bffc3e6b5','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/XSbZidsgMfw?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(564,86,'_oembed_time_a7eec6af04d4749aefb59d7bffc3e6b5','1443986247'),(565,86,'_oembed_ee44ae5282398a264b31aed2854b7d0b','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/GAN_O9xRkf4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(566,86,'_oembed_time_ee44ae5282398a264b31aed2854b7d0b','1443986247'),(567,86,'_oembed_be9acd526c1b9b714f1bfc65dea167b8','<iframe width=\"604\" height=\"453\" src=\"https://www.youtube.com/embed/Htl3XWUhUOM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(568,86,'_oembed_time_be9acd526c1b9b714f1bfc65dea167b8','1443986247'),(569,86,'_oembed_38d0180cc47b49cdc8b0a08a405103b6','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/t99r8JSdI7s?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(570,86,'_oembed_time_38d0180cc47b49cdc8b0a08a405103b6','1443986247'),(571,86,'_oembed_a321cd99ded529949474664fd3134b69','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/LGRHKwFHvNM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(572,86,'_oembed_time_a321cd99ded529949474664fd3134b69','1443986247'),(573,86,'_oembed_2799baa2fae7f4e47efed9f85016c23b','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/1nCmeSGVpyU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(574,86,'_oembed_time_2799baa2fae7f4e47efed9f85016c23b','1443986247'),(575,86,'_oembed_e732ecfb39c7e4dcaec42d0fe7bdb1e2','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/6lIqNjC1RKU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(576,86,'_oembed_time_e732ecfb39c7e4dcaec42d0fe7bdb1e2','1443986247'),(577,86,'_oembed_f0415e3ac300ad7fbc3ee558ec6e9e06','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/DigtCrO77L8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(578,86,'_oembed_time_f0415e3ac300ad7fbc3ee558ec6e9e06','1443986247'),(579,86,'_oembed_5821928d5e8d8913d88c9c011764157d','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/10yrPDf92hY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(580,86,'_oembed_time_5821928d5e8d8913d88c9c011764157d','1443986248'),(581,86,'_oembed_5edd2c7efa3403ea346816599213b8fd','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/kfzRXseSBIM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(582,86,'_oembed_time_5edd2c7efa3403ea346816599213b8fd','1443986248'),(583,86,'_oembed_aaf580812be51e7f48a25f101e32d178','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/anRkutaPS9w?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(584,86,'_oembed_time_aaf580812be51e7f48a25f101e32d178','1443986248'),(585,86,'_oembed_de65836cfa78da5290fcb9d07dd7af57','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/ExVtrghW5Y4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(586,86,'_oembed_time_de65836cfa78da5290fcb9d07dd7af57','1443986248'),(587,86,'_oembed_70fe0930eea878186704b7b337dc9f92','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/fcRKZkk79-w?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(588,86,'_oembed_time_70fe0930eea878186704b7b337dc9f92','1443986248'),(589,86,'_oembed_695c3fa254d0c25f21158ca8d888fa81','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/TErySTMbFlk?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(590,86,'_oembed_time_695c3fa254d0c25f21158ca8d888fa81','1443986248'),(591,86,'_oembed_78313b138b498100b9a30947895e7f10','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/rSC9Gw-Qvw0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(592,86,'_oembed_time_78313b138b498100b9a30947895e7f10','1443986248'),(593,86,'_oembed_e51fc45125574a6beb024ac97524326e','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/xoIDRG7AFRA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(594,86,'_oembed_time_e51fc45125574a6beb024ac97524326e','1443986248'),(595,86,'_oembed_f7e7c9cfbf3da426b172de479019bfe7','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/lTxDEu1mw68?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(596,86,'_oembed_time_f7e7c9cfbf3da426b172de479019bfe7','1443986248'),(597,86,'_oembed_42b326f697b95fdddfa708a79eb662a2','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/1tFXIy7OWos?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(598,86,'_oembed_time_42b326f697b95fdddfa708a79eb662a2','1443986248'),(599,86,'_oembed_d31e3f8189954a450e6057d4f771f353','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/ITM7AtxkaDU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(600,86,'_oembed_time_d31e3f8189954a450e6057d4f771f353','1443986248'),(601,86,'_oembed_aade03815252c2f30a461b7bf9f484f9','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/RyCEo2PxPm4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(602,86,'_oembed_time_aade03815252c2f30a461b7bf9f484f9','1443986248'),(603,86,'_oembed_2611e43017e8452c47e420cec09581dd','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/UF7P2PlWdeA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(604,86,'_oembed_time_2611e43017e8452c47e420cec09581dd','1443986248'),(605,86,'_oembed_f74bed8f5c8c498c5365a62dcea628dd','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/pJJyKlRxyvA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(606,86,'_oembed_time_f74bed8f5c8c498c5365a62dcea628dd','1443986248'),(607,86,'_oembed_5646c4b14e865b1ae8152a6b2fa4b75f','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/D4YWuLo5uRg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(608,86,'_oembed_time_5646c4b14e865b1ae8152a6b2fa4b75f','1443986248'),(609,86,'_oembed_d476c472a4cadcbaa98dd3fb1e019f09','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/VXKXFEkZkUI?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(610,86,'_oembed_time_d476c472a4cadcbaa98dd3fb1e019f09','1443986248'),(611,86,'_oembed_3371691170e18cf7e4fbc12797f9855a','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/MhHoJX8oIDA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(612,86,'_oembed_time_3371691170e18cf7e4fbc12797f9855a','1443986248'),(613,86,'_oembed_d0c774161c993a1b0c1f60886969c580','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/rQsr1ltaWIA?start=32&feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(614,86,'_oembed_time_d0c774161c993a1b0c1f60886969c580','1443986249'),(615,86,'_oembed_d93ee8396579237f5ed6761c4ed11484','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/stoLqWXsIOY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(616,86,'_oembed_time_d93ee8396579237f5ed6761c4ed11484','1443986249'),(617,86,'_oembed_6fd4172bf934e0e63045090b9f41f4ff','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/tZ5Mu2gs-M8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(618,86,'_oembed_time_6fd4172bf934e0e63045090b9f41f4ff','1443986249'),(619,86,'_oembed_ed212936d294701debe3b76cfc586a5d','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/r5GCn1BKkxg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(620,86,'_oembed_time_ed212936d294701debe3b76cfc586a5d','1443986249'),(621,86,'_oembed_282901eca85c9bd2df63e6a1aac5a573','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/lNq2ZN2IpoA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(622,86,'_oembed_time_282901eca85c9bd2df63e6a1aac5a573','1443986249'),(623,86,'_oembed_61e477c8479c44e011ff0db01bd159ae','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/mb6Jc4juSF8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(624,86,'_oembed_time_61e477c8479c44e011ff0db01bd159ae','1443986249'),(625,86,'_oembed_f4922f3a55322abc3035606a5cecb591','<iframe width=\"604\" height=\"340\" src=\"https://www.youtube.com/embed/fk10RoZV4fw?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(626,86,'_oembed_time_f4922f3a55322abc3035606a5cecb591','1443986232'),(627,107,'_edit_last','1'),(628,107,'_yoast_wpseo_metadesc','A compilation of the top hip hop albums of 2015.'),(629,107,'_yoast_wpseo_focuskw_text_input','hip hop albums'),(630,107,'_yoast_wpseo_focuskw','hip hop albums'),(631,107,'_yoast_wpseo_linkdex','56'),(656,119,'_menu_item_type','taxonomy'),(657,119,'_menu_item_menu_item_parent','0'),(658,119,'_menu_item_object_id','3'),(659,119,'_menu_item_object','category'),(660,119,'_menu_item_target',''),(661,119,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(662,119,'_menu_item_xfn',''),(663,119,'_menu_item_url',''),(665,156,'_edit_last','1'),(666,156,'_yoast_wpseo_focuskw_text_input','Google Task Javascript API'),(667,156,'_yoast_wpseo_focuskw','Google Task Javascript API'),(668,156,'_yoast_wpseo_linkdex','80'),(669,156,'_wpcom_is_markdown','1'),(670,156,'_wpas_done_all','1'),(671,156,'_yoast_wpseo_metadesc','To fix the issue with updating Google Tasks (Invalid Value: 400), I demonstrate how to use request to great effect. Google Task Javascript API'),(672,156,'_yoast_wpseo_primary_category','5'),(673,164,'_wpcom_is_markdown','1'),(674,164,'_edit_last','1'),(675,164,'_yoast_wpseo_primary_category','5'),(676,164,'_wpas_done_all','1'),(677,170,'_wpcom_is_markdown','1'),(678,170,'_edit_last','1'),(679,170,'_yoast_wpseo_primary_category','44'),(680,170,'_wpas_done_all','1'),(681,171,'_menu_item_type','taxonomy'),(682,171,'_menu_item_menu_item_parent','0'),(683,171,'_menu_item_object_id','5'),(684,171,'_menu_item_object','category'),(685,171,'_menu_item_target',''),(686,171,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(687,171,'_menu_item_xfn',''),(688,171,'_menu_item_url',''),(692,193,'_wpcom_is_markdown','1'),(693,193,'_edit_last','1'),(694,193,'_oembed_a7617507b1df6c47c65986a8c68dbae3','<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"OB2nsgy\"><a href=\"http://imgur.com/OB2nsgy\">What was really on the iPhone the FBI wanted Apple to crack?</a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>'),(695,193,'_oembed_time_a7617507b1df6c47c65986a8c68dbae3','1461546789'),(696,193,'_oembed_5c4dc29745ae2f39fa5633d33473a398','{{unknown}}'),(697,193,'_oembed_53328352db31f7475889e6a103f55637','{{unknown}}'),(698,193,'_yoast_wpseo_primary_category','5'),(699,193,'_oembed_b48ba1aa0663d083b988c7f77d0761ee','<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"OB2nsgy\"><a href=\"http://imgur.com/OB2nsgy\">What was really on the iPhone the FBI wanted Apple to crack?</a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>'),(700,193,'_oembed_time_b48ba1aa0663d083b988c7f77d0761ee','1461547576'),(701,193,'_wpas_done_all','1'),(702,193,'_yoast_wpseo_focuskw_text_input','Github'),(703,193,'_yoast_wpseo_focuskw','Github'),(704,193,'_yoast_wpseo_linkdex','75'),(705,193,'_oembed_7a0e06e0fcd330247cc642aa4c32e77d','<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"OB2nsgy\"><a href=\"http://imgur.com/OB2nsgy\">What was really on the iPhone the FBI wanted Apple to crack?</a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>'),(706,193,'_oembed_time_7a0e06e0fcd330247cc642aa4c32e77d','1474116562'),(707,193,'_oembed_ec0cb219d3cbc16ad5fc797a1471700b','{{unknown}}'),(708,199,'_wpcom_is_markdown','1'),(709,199,'_edit_last','1'),(710,199,'_oembed_697a575eb5fa24f3d896411a892f2845','<iframe id=\"cp_embed_XdYzvY\" src=\"https://codepen.io/3stacks/embed/preview/XdYzvY?height=300&amp;amp;slug-hash=XdYzvY&amp;amp;default-tabs=html,result&amp;amp;host=http%3A%2F%2Fcodepen.io&amp;amp;embed-version=2\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe>'),(711,199,'_oembed_time_697a575eb5fa24f3d896411a892f2845','1461134823'),(712,199,'_yoast_wpseo_primary_category','5'),(713,199,'_wpas_done_all','1'),(714,199,'_yoast_wpseo_focuskw_text_input','Google Calendar API - ColorId'),(715,199,'_yoast_wpseo_focuskw','Google Calendar API - ColorId'),(716,199,'_yoast_wpseo_linkdex','52'),(717,218,'_wpcom_is_markdown','1'),(718,218,'_edit_last','1'),(719,218,'_yoast_wpseo_primary_category','3'),(720,224,'_wpcom_is_markdown','1'),(721,224,'_edit_last','1'),(722,224,'_wpas_done_all','1'),(723,224,'_yoast_wpseo_primary_category',''),(724,224,'_yoast_wpseo_focuskw_text_input','React Material-UI touch events'),(725,224,'_yoast_wpseo_focuskw','React Material-UI touch events'),(726,224,'_yoast_wpseo_linkdex','31'),(727,230,'_wpcom_is_markdown','1'),(728,230,'_edit_last','1'),(729,230,'_yoast_wpseo_primary_category','5'),(730,230,'_wpas_done_all','1'),(731,242,'_wpcom_is_markdown','1'),(732,242,'_edit_last','1'),(733,242,'_yoast_wpseo_primary_category',''),(734,242,'_wpas_done_all','1'),(735,242,'_yoast_wpseo_focuskw_text_input','Top Albums'),(736,242,'_yoast_wpseo_focuskw','Top Albums'),(737,242,'_yoast_wpseo_linkdex','26'),(749,302,'_wpcom_is_markdown','1'),(750,302,'_edit_last','1'),(751,302,'_yoast_wpseo_primary_category',''),(752,310,'_wpcom_is_markdown','1'),(753,310,'_edit_last','1'),(754,310,'_yoast_wpseo_primary_category','3'),(765,238,'_wpcom_is_markdown','1'),(766,238,'_edit_last','1'),(767,238,'_yoast_wpseo_primary_category','5'),(768,238,'_wpas_done_all','1'),(769,238,'_yoast_wpseo_focuskw_text_input','React components to npm'),(770,238,'_yoast_wpseo_focuskw','React components to npm'),(771,238,'_yoast_wpseo_linkdex','66'),(772,286,'_wpcom_is_markdown','1'),(773,286,'_edit_last','1'),(774,286,'_yoast_wpseo_primary_category','5'),(775,286,'_wpas_done_all','1'),(776,286,'_yoast_wpseo_focuskw_text_input','Dynamic Product Filtering'),(777,286,'_yoast_wpseo_focuskw','Dynamic Product Filtering'),(778,286,'_yoast_wpseo_metadesc','There\'s no officially sanctioned method for Dynamic Product Filtering in Shopify, but this is my way and it works for me.'),(779,286,'_yoast_wpseo_linkdex','81'),(782,312,'_wp_attached_file','2015/08/distant-relatives-1.jpg'),(783,312,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:31:\"2015/08/distant-relatives-1.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"distant-relatives-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(784,313,'_wp_attached_file','2015/08/earl-earl-1.jpg'),(785,313,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:500;s:4:\"file\";s:23:\"2015/08/earl-earl-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"earl-earl-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"earl-earl-1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(786,7,'_wp_attached_file','2015/08/how-i-got-over-1.jpg'),(787,7,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1500;s:6:\"height\";i:1500;s:4:\"file\";s:28:\"2015/08/how-i-got-over-1.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"how-i-got-over-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"how-i-got-over-1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"how-i-got-over-1-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"how-i-got-over-1-1024x1024.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(788,314,'_wp_attached_file','2015/08/0003376627_10-1024x1024.jpg'),(789,314,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:4:\"file\";s:35:\"2015/08/0003376627_10-1024x1024.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"0003376627_10-1024x1024-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"0003376627_10-1024x1024-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:35:\"0003376627_10-1024x1024-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(790,315,'_wp_attached_file','2015/08/0003376627_10-640x250.jpg'),(791,315,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:640;s:6:\"height\";i:250;s:4:\"file\";s:33:\"2015/08/0003376627_10-640x250.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"0003376627_10-640x250-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"0003376627_10-640x250-300x117.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:117;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(792,316,'_wp_attached_file','2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135.jpg'),(793,316,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:135;s:4:\"file\";s:64:\"2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:64:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135-150x135.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:64:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135-300x135.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:135;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(794,317,'_wp_attached_file','2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300.jpg'),(795,317,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:64:\"2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:64:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(796,318,'_wp_attached_file','2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1.jpg'),(797,318,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:1000;s:4:\"file\";s:56:\"2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:56:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:56:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:56:\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(798,319,'_wp_attached_file','2015/08/3aigo63ters0f3mwk7jaseng0.400x400x7.gif'),(799,319,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:400;s:4:\"file\";s:47:\"2015/08/3aigo63ters0f3mwk7jaseng0.400x400x7.gif\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(800,320,'_wp_attached_file','2015/08/51Zzc7PUDML.jpg'),(801,320,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:500;s:4:\"file\";s:23:\"2015/08/51Zzc7PUDML.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"51Zzc7PUDML-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"51Zzc7PUDML-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(802,321,'_wp_attached_file','2015/08/91gMAln-dPL._SL1500_-300x300.jpg'),(803,321,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:40:\"2015/08/91gMAln-dPL._SL1500_-300x300.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:40:\"91gMAln-dPL._SL1500_-300x300-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(804,322,'_wp_attached_file','2015/08/91gMAln-dPL._SL1500_-50x50.jpg'),(805,322,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:50;s:6:\"height\";i:50;s:4:\"file\";s:38:\"2015/08/91gMAln-dPL._SL1500_-50x50.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(806,323,'_wp_attached_file','2015/08/95469-300x300.jpg'),(807,323,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:25:\"2015/08/95469-300x300.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"95469-300x300-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(808,324,'_wp_attached_file','2015/08/ASAP_Rocky_Liveloveaap-front-large-50x50.jpg'),(809,324,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:50;s:6:\"height\";i:50;s:4:\"file\";s:52:\"2015/08/ASAP_Rocky_Liveloveaap-front-large-50x50.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(810,325,'_wp_attached_file','2015/08/Black_up-300x300.jpg'),(811,230,'_oembed_1ecf3ad3938efee811ce61853d62ea4f','<iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/T43RzjxwBys?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>'),(812,230,'_oembed_time_1ecf3ad3938efee811ce61853d62ea4f','1474179435'),(813,326,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-1024x1024.jpg'),(814,326,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:4:\"file\";s:56:\"2015/09/1035x1035-dre-compton-soundtrack-1-1024x1024.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:56:\"1035x1035-dre-compton-soundtrack-1-1024x1024-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:56:\"1035x1035-dre-compton-soundtrack-1-1024x1024-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:56:\"1035x1035-dre-compton-soundtrack-1-1024x1024-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(815,327,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-150x150.jpg'),(816,327,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:150;s:6:\"height\";i:150;s:4:\"file\";s:54:\"2015/09/1035x1035-dre-compton-soundtrack-1-150x150.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(817,328,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-300x135.jpg'),(818,328,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:135;s:4:\"file\";s:54:\"2015/09/1035x1035-dre-compton-soundtrack-1-300x135.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:54:\"1035x1035-dre-compton-soundtrack-1-300x135-150x135.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:54:\"1035x1035-dre-compton-soundtrack-1-300x135-300x135.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:135;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(819,329,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-300x300.jpg'),(820,329,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:54:\"2015/09/1035x1035-dre-compton-soundtrack-1-300x300.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:54:\"1035x1035-dre-compton-soundtrack-1-300x300-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(821,330,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-50x50.jpg'),(822,330,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:50;s:6:\"height\";i:50;s:4:\"file\";s:52:\"2015/09/1035x1035-dre-compton-soundtrack-1-50x50.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(823,331,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1-640x250.jpg'),(824,331,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:640;s:6:\"height\";i:250;s:4:\"file\";s:54:\"2015/09/1035x1035-dre-compton-soundtrack-1-640x250.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:54:\"1035x1035-dre-compton-soundtrack-1-640x250-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:54:\"1035x1035-dre-compton-soundtrack-1-640x250-300x117.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:117;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(825,332,'_wp_attached_file','2015/09/1035x1035-dre-compton-soundtrack-1.jpg'),(826,332,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1035;s:6:\"height\";i:1035;s:4:\"file\";s:46:\"2015/09/1035x1035-dre-compton-soundtrack-1.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"1035x1035-dre-compton-soundtrack-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"1035x1035-dre-compton-soundtrack-1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"1035x1035-dre-compton-soundtrack-1-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:48:\"1035x1035-dre-compton-soundtrack-1-1024x1024.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(827,333,'_wp_attached_file','2015/09/JayRock90059album-150x150.jpg'),(828,333,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:150;s:6:\"height\";i:150;s:4:\"file\";s:37:\"2015/09/JayRock90059album-150x150.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(829,334,'_wp_attached_file','2015/09/JayRock90059album.jpg'),(830,334,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:29:\"2015/09/JayRock90059album.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"JayRock90059album-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(831,335,'_wp_attached_file','2015/09/patchwork-150x150.jpeg'),(832,335,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:150;s:6:\"height\";i:150;s:4:\"file\";s:30:\"2015/09/patchwork-150x150.jpeg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(833,336,'_wp_attached_file','2015/09/patchwork-300x150.jpeg'),(834,336,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:150;s:4:\"file\";s:30:\"2015/09/patchwork-300x150.jpeg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"patchwork-300x150-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"patchwork-300x150-300x150.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(835,337,'_wp_attached_file','2015/09/patchwork.jpeg'),(836,337,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:905;s:6:\"height\";i:452;s:4:\"file\";s:22:\"2015/09/patchwork.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"patchwork-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"patchwork-300x150.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"patchwork-768x384.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:384;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(837,86,'_edit_lock','1474179971:1'),(848,341,'_edit_last','1'),(849,341,'_edit_lock','1488183135:1'),(850,341,'portfolio_image','467'),(851,341,'_portfolio_image','field_57d67264a8a86'),(852,341,'portfolio_snippet','A micro-blogging platform with a RESTful interface and an Angular admin panel. Has an interesting templating language.'),(853,341,'_portfolio_snippet','field_57d67df58eff0'),(854,341,'portfolio_description','						<h3>\r\n										JSON files as a service\r\n									</h3>\r\n									<p>\r\n										The premise of this app was to have a fiendishly simple back-end. The global blog\r\n										settings and posts are all stored in a JSON file. The back-end product (Pypes Rear)\r\n										has a RESTful interface for getting all posts, getting posts by a permalink, getting\r\n										posts by a category and so on.\r\n									</p>\r\n									<p>\r\n										Pypes is not trying to be a Wordpress killer. It\'s simple to drop in and get going,\r\n										but for people who just want to write, it will do nicely (because not everybody needs\r\n										analytics or SEO).\r\n									</p>\r\n									<p>\r\n										The name comes from the templating system conceived late one night. The syntax is simple -\r\n										<code>||| header |||</code>.\r\n										 At runtime, the index file looks for sets of ||| and will search your partials folder\r\n										for a matching file, and it includes the file contents.\r\n									</p>\r\n									<p>\r\n										Pypes Face is the admin platform which is built in Angular. Face has an API client\r\n										with utility functions for pulling down posts, saving new posts and updating old posts.\r\n										The blog controllers use these functions with heavy integration with Promises.\r\n									</p>\r\n								<h3 class=\"case-study--block--title\">\r\n									Technologies - Admin Portal\r\n								</h3>\r\n\r\n<ul>\r\n    <li>\r\n        Angular 1.5\r\n    </li>\r\n    <li>\r\n        AJAX with Promises\r\n    </li>\r\n    <li>\r\n        HTML5\r\n    </li>\r\n    <li>\r\n        SASS\r\n    </li>\r\n    <li>\r\n        Gulp\r\n    </li>\r\n    <li>\r\n        Bulma.io\r\n    </li>\r\n</ul>\r\n								<h3 class=\"case-study--block--title\">\r\n									Technologies - Rear\r\n								</h3>\r\n								\r\n<ul>\r\n    <li>\r\n        PHP\r\n    </li>\r\n    <li>\r\n        Slim Framework\r\n    </li>\r\n    <li>\r\n        HTML5\r\n    </li>\r\n    <li>\r\n        SASS\r\n    </li>\r\n    <li>\r\n        Gulp\r\n    </li>\r\n    <li>\r\n        Bulma.io\r\n    </li>    \r\n</ul>'),(855,341,'_portfolio_description','field_57d6727aa8a87'),(856,341,'portfolio_demo_site','https://github.com/3stacks/pypes-face'),(857,341,'_portfolio_demo_site','field_57d801fcaf4e1'),(858,341,'portfolio_repository_link','https://github.com/3stacks/pypes-face'),(859,341,'_portfolio_repository_link','field_57d90a5748d11'),(860,341,'_yoast_wpseo_metadesc','A micro-blogging platform'),(861,341,'_yoast_wpseo_content_score','30'),(862,342,'_edit_last','1'),(863,342,'_edit_lock','1488182466:1'),(864,342,'portfolio_image','465'),(865,342,'_portfolio_image','field_57d67264a8a86'),(866,342,'portfolio_snippet','A case study about the scalability and organisation of SPAs made in  Angular 1.5 with comprehensive testing.'),(867,342,'_portfolio_snippet','field_57d67df58eff0'),(868,342,'portfolio_description',''),(869,342,'_portfolio_description','field_57d6727aa8a87'),(870,342,'portfolio_demo_site','http://broccoli.3stacks.me'),(871,342,'_portfolio_demo_site','field_57d801fcaf4e1'),(872,342,'portfolio_repository_link','http://github.com/3stacks/broccoli-and-co'),(873,342,'_portfolio_repository_link','field_57d90a5748d11'),(874,342,'_yoast_wpseo_content_score','30'),(878,343,'_edit_last','1'),(879,343,'_edit_lock','1488243349:1'),(880,343,'portfolio_image','79'),(881,343,'_portfolio_image','field_57d67264a8a86'),(882,343,'portfolio_snippet','A productivity app aggregating calendar and tasks. Built to stop splitting focus between multiple websites for your agenda.'),(883,343,'_portfolio_snippet','field_57d67df58eff0'),(884,343,'portfolio_description','<h3>Case Study</h3>\r\n\r\n<a href=\"https://agander.io\" target=\"_blank\">2.0 is out now</a>\r\n\r\nAgander is an open-source platform designed to reduce the noise in your daily agenda. The concept is\r\nsimple; you connect your productivity software such as your calendar or asana tasks and you\r\ncan effectively boil several tabs into one. The app is currently being rebuilt in React.\r\n\r\nVersion 1 was built in Vue.Js but as the complexity grew, there were some evident growing pains, so it was made from the ground up in React for Version 2.\r\n\r\nThe project started as a service just for me, but it has been expanded to include several services, including:\r\n\r\n<ul>\r\n    <li>Google Calendar,</li>\r\n    <li>Google Tasks,</li>\r\n    <li>Asana Tasks,</li>\r\n    <li>Generic notepad</li>\r\n</ul>\r\n\r\nThe service is somewhat developer focused, so current plans involve integration with Github\r\nto display issues and milestones.\r\n\r\n\r\n<h3>Technologies</h3>\r\n\r\nI tried to embrace a minimal approach for this project. The technologies used are;\r\n\r\n<ul>\r\n    <li>React</li>\r\n    <li>AJAX (with Promises)</li>\r\n    <li>SASS</li>\r\n    <li>OAUTH 2</li>\r\n    <li>Gulp</li>\r\n</ul>\r\n\r\n<h3>ECMA Script 6</h3>\r\n\r\nWith the new tools ES6 has to offer, complicated functions (such as the Google API\r\nrequest using promises above) can be made much more simple by using the =&gt; shorthand.\r\nThe new declarations (let and const) were used wherever possible/appropriate for things\r\nsuch as node packages that have no business being altered. ES6 imports were also used as\r\nan alternative to the typical browserify require.\r\n\r\n<h3>Local Storage</h3>\r\nIn an effort to eliminate the need for back end technologies, the current storage solution is\r\nbased on browser local storage. The result of this choice is interesting because the entire\r\nstate of the app can be stored in a single string. The first major milestone required a\r\nsuite of local storage management functions which ended up being spun off into a package and released on <a href=\"https://www.npmjs.com/package/@lukeboyle/local-storage-manager\" target=\"_blank\">npmjs.</a>\r\n\r\n<h3>Github</h3>\r\n\r\nThroughout the development process, the Github repository became less of a version\r\ncontrol tool and began to transform into a collaborative project management platform.\r\n\r\nI was constantly trying to find new ways to make the repository easier to manage.\r\n\r\n<h3>Github activity</h3>\r\nIn the most active month (surrounding the release of version 1.0), the repository\r\nsaw 137 commits, 6 pull requests and 21 closed issues which included various bugs\r\nand features/improvements.\r\n\r\n<h3>Issues and Labels</h3>\r\n\r\n<figure>\r\n    <img src=\"https://lukeboyle.com/app/uploads/2016/09/Capture.png\" alt=\"\" width=\"752\" height=\"404\" class=\"alignnone size-full wp-image-466\" />\r\n    <figcaption>\r\n        Each issue gets a status, type and a priority to make them more searchable and more manageable.\r\n    </figcaption>\r\n</figure>\r\n\r\n<h3>Semantic Commits</h3>\r\n\r\nI made the decision to require all commits to be semantic. Semantic commits\r\nessentially have a keyword at the start of the commit to indicate what type of\r\ncommit it is. (e.g. \'feat\', \'fix\', \'refactor\')\r\n\r\nThis enables easy rollbacks to previous features or previous fixes and it also creates\r\na computer readable commit log, effectively automating changelogs.\r\n\r\n<h3>Semantic Versioning</h3>\r\n\r\nSemantic Versioning dictates that all version changes be made in increments of x.y.z\r\n(where x is major release (breaking change), y is minor release, and z is a patch).\r\n\r\nBecause of this, I can be confident that any build under the 1.x release will be\r\ncompatible with currently stored app data.'),(885,343,'_portfolio_description','field_57d6727aa8a87'),(886,343,'portfolio_demo_site','https://agander.io'),(887,343,'_portfolio_demo_site','field_57d801fcaf4e1'),(888,343,'portfolio_repository_link','https://github.com/3stacks/agander'),(889,343,'_portfolio_repository_link','field_57d90a5748d11'),(890,343,'_yoast_wpseo_content_score','30'),(894,344,'_edit_last','1'),(895,344,'_edit_lock','1488243343:1'),(896,344,'portfolio_image','469'),(897,344,'_portfolio_image','field_57d67264a8a86'),(898,344,'portfolio_snippet','A micro-application designed to tell you how much money you\'re wasting on your bad habit. '),(899,344,'_portfolio_snippet','field_57d67df58eff0'),(900,344,'portfolio_description','<div class=\"case-study\">\r\n							<div class=\"case-study--block\">\r\n								<h3 class=\"case-study--block--title\">\r\n									Case Study\r\n								</h3>\r\n								<h5 class=\"case-study--block--subtitle\">\r\n									<a href=\"https://vices.me\" target=\"_blank\">\r\n										1.0 is out now\r\n									</a>\r\n								</h5>\r\n							</div>\r\n							<div class=\"case-study--block\">\r\n								<div class=\"case-study--block--body\">\r\n									<p>\r\n										I made Vices because I was spending way too much money on iced coffee and I needed a way to motivate myself to quit.\r\n									</p>\r\n								</div>\r\n							</div>\r\n							<div class=\"case-study--block\">\r\n								<h3 class=\"case-study--block--title\">\r\n									Event BUS System\r\n								</h3>\r\n								<div class=\"case-study--block--body\">\r\n									<img src=\"img/event-bus.png\" alt=\"\">\r\n									<p>\r\n										The Event BUS system handles all click events in the app and adds them to a history of actions taken in the app. This could be utilised to undo actions and facilitate accurate bug reports.\r\n									</p>\r\n								</div>\r\n							</div>\r\n							<div class=\"case-study--block\">\r\n								<h3 class=\"case-study--block--title\">\r\n									Technologies\r\n								</h3>\r\n								<dl>\r\n									<dt>\r\n										React.js\r\n									</dt>\r\n									<dt>\r\n										SASS\r\n									</dt>\r\n									<dt>\r\n										Gulp\r\n									</dt>\r\n									<dt>\r\n										ECMAScript 6\r\n									</dt>\r\n									<dt>\r\n										Material-UI\r\n									</dt>\r\n									<dd>\r\n										Made using the Google Material UI style guidelines\r\n									</dd>\r\n								</dl>\r\n							</div>'),(901,344,'_portfolio_description','field_57d6727aa8a87'),(902,344,'portfolio_demo_site','https://vices.me'),(903,344,'_portfolio_demo_site','field_57d801fcaf4e1'),(904,344,'portfolio_repository_link','https://github.com/3stacks/vices'),(905,344,'_portfolio_repository_link','field_57d90a5748d11'),(906,344,'_yoast_wpseo_content_score','30'),(910,14,'_wp_page_template','default'),(911,345,'home_technologies_0_technology','JavaScript (ES6)'),(912,345,'_home_technologies_0_technology','field_57d5df73d737d'),(913,345,'home_technologies_1_technology','Angular 1.5+'),(914,345,'_home_technologies_1_technology','field_57d5df73d737d'),(915,345,'home_technologies_2_technology','React/Redux'),(916,345,'_home_technologies_2_technology','field_57d5df73d737d'),(917,345,'home_technologies_3_technology','Vue.js'),(918,345,'_home_technologies_3_technology','field_57d5df73d737d'),(919,345,'home_technologies_4_technology','Node'),(920,345,'_home_technologies_4_technology','field_57d5df73d737d'),(921,345,'home_technologies_5_technology','SASS'),(922,345,'_home_technologies_5_technology','field_57d5df73d737d'),(923,345,'home_technologies_6_technology','Webpack, Gulp'),(924,345,'_home_technologies_6_technology','field_57d5df73d737d'),(925,345,'home_technologies_7_technology','Mocha/Karma Testing'),(926,345,'_home_technologies_7_technology','field_57d5df73d737d'),(927,345,'home_technologies_8_technology','Continuous Integration'),(928,345,'_home_technologies_8_technology','field_57d5df73d737d'),(929,345,'home_technologies_9_technology','Deployment Automation'),(930,345,'_home_technologies_9_technology','field_57d5df73d737d'),(931,345,'home_technologies','10'),(932,345,'_home_technologies','field_57d5df54d737c'),(933,345,'home_npm_packages_0_name','local-storage-manager'),(934,345,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(935,345,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(936,345,'_home_npm_packages_0_link','field_57d5dfdad7381'),(937,345,'home_npm_packages_1_name','es6-module-boilerplate'),(938,345,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(939,345,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(940,345,'_home_npm_packages_1_link','field_57d5dfdad7381'),(941,345,'home_npm_packages_2_name','lazy-slider'),(942,345,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(943,345,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(944,345,'_home_npm_packages_2_link','field_57d5dfdad7381'),(945,345,'home_npm_packages_3_name','timetools'),(946,345,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(947,345,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(948,345,'_home_npm_packages_3_link','field_57d5dfdad7381'),(949,345,'home_npm_packages','4'),(950,345,'_home_npm_packages','field_57d5dfa2d737f'),(951,345,'home_featured_project',''),(952,345,'_home_featured_project','field_57d68fcd83e16'),(953,345,'home_featured_blog_post',''),(954,345,'_home_featured_blog_post','field_57d6910fb3ec1'),(955,14,'_yoast_wpseo_content_score','30'),(956,14,'home_technologies_9_technology','Continuous Integration'),(957,14,'_home_technologies_9_technology','field_57d5df73d737d'),(958,346,'home_technologies_0_technology','JavaScript (ES6)'),(959,346,'_home_technologies_0_technology','field_57d5df73d737d'),(960,346,'home_technologies_1_technology','Angular 1.5+'),(961,346,'_home_technologies_1_technology','field_57d5df73d737d'),(962,346,'home_technologies_2_technology','React/Redux'),(963,346,'_home_technologies_2_technology','field_57d5df73d737d'),(964,346,'home_technologies_3_technology','Vue.js'),(965,346,'_home_technologies_3_technology','field_57d5df73d737d'),(966,346,'home_technologies_4_technology','Node'),(967,346,'_home_technologies_4_technology','field_57d5df73d737d'),(968,346,'home_technologies_5_technology','SASS'),(969,346,'_home_technologies_5_technology','field_57d5df73d737d'),(970,346,'home_technologies_6_technology','Webpack, Gulp'),(971,346,'_home_technologies_6_technology','field_57d5df73d737d'),(972,346,'home_technologies_7_technology','Mocha/Karma Testing'),(973,346,'_home_technologies_7_technology','field_57d5df73d737d'),(974,346,'home_technologies_8_technology','Continuous Integration'),(975,346,'_home_technologies_8_technology','field_57d5df73d737d'),(976,346,'home_technologies_9_technology','Deployment Automation'),(977,346,'_home_technologies_9_technology','field_57d5df73d737d'),(978,346,'home_technologies','10'),(979,346,'_home_technologies','field_57d5df54d737c'),(980,346,'home_npm_packages_0_name','local-storage-manager'),(981,346,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(982,346,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(983,346,'_home_npm_packages_0_link','field_57d5dfdad7381'),(984,346,'home_npm_packages_1_name','es6-module-boilerplate'),(985,346,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(986,346,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(987,346,'_home_npm_packages_1_link','field_57d5dfdad7381'),(988,346,'home_npm_packages_2_name','lazy-slider'),(989,346,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(990,346,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(991,346,'_home_npm_packages_2_link','field_57d5dfdad7381'),(992,346,'home_npm_packages_3_name','timetools'),(993,346,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(994,346,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(995,346,'_home_npm_packages_3_link','field_57d5dfdad7381'),(996,346,'home_npm_packages','4'),(997,346,'_home_npm_packages','field_57d5dfa2d737f'),(998,346,'home_featured_project','343'),(999,346,'_home_featured_project','field_57d68fcd83e16'),(1000,346,'home_featured_blog_post','238'),(1001,346,'_home_featured_blog_post','field_57d6910fb3ec1'),(1002,310,'_edit_lock','1474876166:1'),(1003,310,'_yoast_wpseo_content_score','60'),(1010,310,'_yoast_wpseo_focuskw_text_input','recursive functions'),(1011,310,'_yoast_wpseo_focuskw','recursive functions'),(1012,310,'_yoast_wpseo_metadesc','A brief look at the practical use of recursive functions in JavaScript. Including an example of an appropriate use case.'),(1013,310,'_yoast_wpseo_linkdex','72'),(1014,224,'_edit_lock','1474684223:1'),(1017,224,'_yoast_wpseo_content_score','30'),(1018,350,'_edit_last','1'),(1019,350,'_edit_lock','1474805326:1'),(1020,350,'_yoast_wpseo_content_score','90'),(1021,350,'_yoast_wpseo_primary_category','3'),(1022,352,'_wpcom_is_markdown','1'),(1023,350,'_wpcom_is_markdown','1'),(1024,353,'_wpcom_is_markdown','1'),(1025,354,'_wpcom_is_markdown','1'),(1026,355,'_wpcom_is_markdown','1'),(1027,356,'_wpcom_is_markdown','1'),(1028,350,'_yoast_wpseo_focuskw_text_input','jsx in Vue.js'),(1029,350,'_yoast_wpseo_focuskw','jsx in Vue.js'),(1030,350,'_yoast_wpseo_metadesc','A quick guide to getting started with Vue jsx and some of the quirks associated.'),(1031,350,'_yoast_wpseo_linkdex','58'),(1032,357,'_wpcom_is_markdown','1'),(1035,358,'_wpcom_is_markdown','1'),(1036,359,'_wpcom_is_markdown','1'),(1039,360,'_wpcom_is_markdown','1'),(1041,362,'_wpcom_is_markdown','1'),(1044,363,'_wpcom_is_markdown','1'),(1045,364,'_wpcom_is_markdown','1'),(1046,364,'_edit_last','1'),(1047,364,'_edit_lock','1474955175:1'),(1048,364,'_yoast_wpseo_content_score','30'),(1049,365,'_wpcom_is_markdown','1'),(1050,364,'_yoast_wpseo_primary_category',''),(1051,80,'_yoast_wpseo_focuskw_text_input','Front End Developer'),(1052,80,'_yoast_wpseo_focuskw','Front End Developer'),(1053,80,'_yoast_wpseo_title','%%title%% Luke Boyle %%page%% %%sep%% Front End Developer'),(1054,80,'_yoast_wpseo_metadesc','Luke Boyle is a Front End Developer from Melbourne, Australia with experience in React, Angular, Vue and ES6.'),(1055,80,'_yoast_wpseo_linkdex','33'),(1056,80,'_yoast_wpseo_content_score','30'),(1057,80,'_wpcom_is_markdown','1'),(1058,14,'_yoast_wpseo_focuskw_text_input','Front End Developer'),(1059,14,'_yoast_wpseo_focuskw','Front End Developer'),(1060,14,'_yoast_wpseo_title','Luke Boyle - Front End Developer'),(1061,14,'_wpcom_is_markdown','1'),(1062,14,'_yoast_wpseo_metadesc','Luke Boyle is a Front End Developer from Melbourne, Australia. Experience in React, Angular, Vue and ES2015. Projects with NAB, Mercedes-Benz and Clemenger.'),(1063,14,'_yoast_wpseo_linkdex','24'),(1064,54,'_yoast_wpseo_title','Front End Development Blog - Luke Boyle'),(1065,54,'_yoast_wpseo_metadesc','Writing about modern JavaScript, Luke Boyle is a Front End Developer from Melbourne, Australia with experience in React, Angular, Vue and ES6.'),(1066,54,'_yoast_wpseo_content_score','30'),(1067,54,'_wpcom_is_markdown','1'),(1068,4,'_wp_page_template','default'),(1069,4,'_yoast_wpseo_title','Web Development Portfolio by Luke Boyle'),(1070,4,'_yoast_wpseo_metadesc','Solving modern issues with JavaScript. Luke Boyle is a Front End Developer from Melbourne, Australia with experience in React, Angular, Vue and ES6.'),(1071,4,'_yoast_wpseo_content_score','30'),(1072,4,'_wpcom_is_markdown','1'),(1074,367,'_wpcom_is_markdown','1'),(1075,367,'_edit_last','1'),(1076,367,'_edit_lock','1476851464:1'),(1077,367,'_yoast_wpseo_content_score','90'),(1078,368,'_wpcom_is_markdown','1'),(1079,367,'_yoast_wpseo_primary_category','3'),(1082,369,'_wpcom_is_markdown','1'),(1085,367,'_yoast_wpseo_focuskw_text_input','Karma tests for Chrome in Travis CI'),(1086,367,'_yoast_wpseo_focuskw','Karma tests for Chrome in Travis CI'),(1087,367,'_yoast_wpseo_metadesc','A quick setup guide for getting your Karma tests working with Chrome on Travis CI.'),(1088,367,'_yoast_wpseo_linkdex','61'),(1089,370,'_wpcom_is_markdown','1'),(1090,367,'_wp_old_slug','running-karma-tests-chrome-travis-ci'),(1091,371,'_wpcom_is_markdown','1'),(1092,372,'_wpcom_is_markdown','1'),(1093,372,'_edit_last','1'),(1094,372,'_edit_lock','1481591798:1'),(1095,372,'_yoast_wpseo_content_score','30'),(1096,373,'_wpcom_is_markdown','1'),(1097,372,'_yoast_wpseo_primary_category','3'),(1100,372,'_yoast_wpseo_focuskw_text_input','Local Storage Manager'),(1101,372,'_yoast_wpseo_focuskw','Local Storage Manager'),(1102,372,'_yoast_wpseo_metadesc','A clean and simple interface to easily act on local storage. The new version allows you to namespace data. This package has no dependencies and just works.'),(1103,372,'_yoast_wpseo_linkdex','50'),(1104,374,'_wpcom_is_markdown','1'),(1105,372,'_wp_old_slug','local-storage-manager-version-2-1-now'),(1109,376,'_wpcom_is_markdown','1'),(1110,376,'_edit_last','1'),(1111,376,'_edit_lock','1481516767:1'),(1112,377,'_wp_attached_file','2016/12/IMG_0298.jpg'),(1113,377,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:782;s:6:\"height\";i:586;s:4:\"file\";s:20:\"2016/12/IMG_0298.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"IMG_0298-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"IMG_0298-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"IMG_0298-768x576.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:576;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1114,376,'_oembed_84d9adf53ee85753fa13b52f5ce26091','<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"ssA9lpi\"><a href=\"http://imgur.com/ssA9lpi\">View post on imgur.com</a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>'),(1115,376,'_oembed_time_84d9adf53ee85753fa13b52f5ce26091','1481176177'),(1116,376,'_oembed_410e04e638add8f9b985288c1d07b79b','<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"lP3HnpP\"><a href=\"http://imgur.com/lP3HnpP\">View post on imgur.com</a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script>'),(1117,376,'_oembed_time_410e04e638add8f9b985288c1d07b79b','1481176205'),(1120,376,'_yoast_wpseo_content_score','90'),(1121,378,'_wpcom_is_markdown','1'),(1122,376,'_yoast_wpseo_primary_category',''),(1125,379,'_wpcom_is_markdown','1'),(1128,380,'_wpcom_is_markdown','1'),(1131,381,'_wpcom_is_markdown','1'),(1132,382,'_wpcom_is_markdown','1'),(1133,382,'_edit_last','1'),(1134,382,'_edit_lock','1482405197:1'),(1135,382,'_yoast_wpseo_content_score','30'),(1136,383,'_wpcom_is_markdown','1'),(1137,382,'_yoast_wpseo_primary_category','3'),(1138,382,'_oembed_016f8490a1dfd00014e563bf38e45c13','{{unknown}}'),(1139,384,'_wp_attached_file','2016/12/nav.png'),(1140,384,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1228;s:6:\"height\";i:111;s:4:\"file\";s:15:\"2016/12/nav.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"nav-150x111.png\";s:5:\"width\";i:150;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"nav-300x27.png\";s:5:\"width\";i:300;s:6:\"height\";i:27;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:14:\"nav-768x69.png\";s:5:\"width\";i:768;s:6:\"height\";i:69;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:15:\"nav-1024x93.png\";s:5:\"width\";i:1024;s:6:\"height\";i:93;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1141,385,'_wpcom_is_markdown','1'),(1142,386,'_wpcom_is_markdown','1'),(1143,387,'_wpcom_is_markdown','1'),(1144,242,'_edit_lock','1481679963:1'),(1145,388,'_wpcom_is_markdown','1'),(1146,389,'_wp_attached_file','2016/07/anderson-.paak-malibu-cover-art.jpg'),(1147,389,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:630;s:6:\"height\";i:630;s:4:\"file\";s:43:\"2016/07/anderson-.paak-malibu-cover-art.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:43:\"anderson-.paak-malibu-cover-art-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:43:\"anderson-.paak-malibu-cover-art-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1148,390,'_wp_attached_file','2016/07/Blank-Face-LP.jpg'),(1149,390,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:1200;s:4:\"file\";s:25:\"2016/07/Blank-Face-LP.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"Blank-Face-LP-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"Blank-Face-LP-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"Blank-Face-LP-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:27:\"Blank-Face-LP-1024x1024.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1150,391,'_wp_attached_file','2016/07/3001ALaced_Odyssey.jpeg'),(1151,391,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:400;s:4:\"file\";s:31:\"2016/07/3001ALaced_Odyssey.jpeg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"3001ALaced_Odyssey-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"3001ALaced_Odyssey-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1152,392,'_wp_attached_file','2016/07/deathgripscoverbottom.jpg'),(1153,392,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1280;s:6:\"height\";i:1280;s:4:\"file\";s:33:\"2016/07/deathgripscoverbottom.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"deathgripscoverbottom-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"deathgripscoverbottom-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"deathgripscoverbottom-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:35:\"deathgripscoverbottom-1024x1024.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1154,393,'_wp_attached_file','2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg'),(1155,393,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:626;s:6:\"height\";i:626;s:4:\"file\";s:65:\"2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:65:\"NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:65:\"NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1156,394,'_wp_attached_file','2016/07/AtrocityExhibition.jpg'),(1157,394,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:1000;s:4:\"file\";s:30:\"2016/07/AtrocityExhibition.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"AtrocityExhibition-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"AtrocityExhibition-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:30:\"AtrocityExhibition-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1158,395,'_wp_attached_file','2016/07/TheSunsTirade.jpeg'),(1159,395,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:2048;s:6:\"height\";i:2048;s:4:\"file\";s:26:\"2016/07/TheSunsTirade.jpeg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"TheSunsTirade-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"TheSunsTirade-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:26:\"TheSunsTirade-768x768.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"TheSunsTirade-1024x1024.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1160,396,'_wp_attached_file','2016/07/e308ca36.jpg'),(1161,396,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:600;s:4:\"file\";s:20:\"2016/07/e308ca36.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"e308ca36-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"e308ca36-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1162,397,'_wp_attached_file','2016/07/The_life_of_pablo_alternate.jpg'),(1163,397,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:600;s:6:\"height\";i:600;s:4:\"file\";s:39:\"2016/07/The_life_of_pablo_alternate.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:39:\"The_life_of_pablo_alternate-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:39:\"The_life_of_pablo_alternate-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1164,398,'_wp_attached_file','2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg'),(1165,398,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:1000;s:4:\"file\";s:56:\"2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:56:\"09e256ce885fe6b3cf181239c3b3231c.1000x1000x1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:56:\"09e256ce885fe6b3cf181239c3b3231c.1000x1000x1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:56:\"09e256ce885fe6b3cf181239c3b3231c.1000x1000x1-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1166,399,'_wp_attached_file','2016/07/a1158245013_10-1.jpg'),(1167,399,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:1200;s:4:\"file\";s:28:\"2016/07/a1158245013_10-1.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"a1158245013_10-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"a1158245013_10-1-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"a1158245013_10-1-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"a1158245013_10-1-1024x1024.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1168,400,'_wp_attached_file','2016/07/untitled.jpg'),(1169,400,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:1000;s:4:\"file\";s:20:\"2016/07/untitled.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"untitled-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"untitled-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"untitled-768x768.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1170,401,'_wp_attached_file','2016/07/dwtw.jpg'),(1171,401,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:715;s:6:\"height\";i:715;s:4:\"file\";s:16:\"2016/07/dwtw.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"dwtw-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"dwtw-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1172,402,'_wp_attached_file','2016/07/artworks-000171795169-xpeqqm-t500x500.jpg'),(1173,402,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:500;s:4:\"file\";s:49:\"2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:49:\"artworks-000171795169-xpeqqm-t500x500-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:49:\"artworks-000171795169-xpeqqm-t500x500-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1174,403,'_wp_attached_file','2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg'),(1175,403,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:400;s:4:\"file\";s:77:\"2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:77:\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:77:\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1178,242,'_yoast_wpseo_content_score','30'),(1179,404,'_wpcom_is_markdown','1'),(1180,405,'_wpcom_is_markdown','1'),(1181,405,'_edit_last','1'),(1182,405,'_edit_lock','1481680145:1'),(1183,406,'_wp_attached_file','2016/12/Desktop.jpg'),(1184,406,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1920;s:6:\"height\";i:1299;s:4:\"file\";s:19:\"2016/12/Desktop.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"Desktop-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"Desktop-300x203.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:203;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"Desktop-768x520.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:520;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"Desktop-1024x693.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:693;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1185,405,'_yoast_wpseo_content_score','30'),(1186,407,'_wpcom_is_markdown','1'),(1187,405,'_yoast_wpseo_primary_category',''),(1188,408,'_wpcom_is_markdown','1'),(1189,409,'_wpcom_is_markdown','1'),(1190,410,'_wpcom_is_markdown','1'),(1193,411,'_wpcom_is_markdown','1'),(1208,218,'_edit_lock','1481899272:1'),(1211,218,'_yoast_wpseo_content_score','90'),(1212,416,'_wpcom_is_markdown','1'),(1213,417,'home_technologies_0_technology','JavaScript (ES6)'),(1214,417,'_home_technologies_0_technology','field_57d5df73d737d'),(1215,417,'home_technologies_1_technology','Angular 1.x'),(1216,417,'_home_technologies_1_technology','field_57d5df73d737d'),(1217,417,'home_technologies_2_technology','React/Redux'),(1218,417,'_home_technologies_2_technology','field_57d5df73d737d'),(1219,417,'home_technologies_3_technology','Vue.js'),(1220,417,'_home_technologies_3_technology','field_57d5df73d737d'),(1221,417,'home_technologies_4_technology','AJAX (With Promises)'),(1222,417,'_home_technologies_4_technology','field_57d5df73d737d'),(1223,417,'home_technologies_5_technology','Node.js'),(1224,417,'_home_technologies_5_technology','field_57d5df73d737d'),(1225,417,'home_technologies_6_technology','SASS'),(1226,417,'_home_technologies_6_technology','field_57d5df73d737d'),(1227,417,'home_technologies_7_technology','Webpack, Gulp'),(1228,417,'_home_technologies_7_technology','field_57d5df73d737d'),(1229,417,'home_technologies_8_technology','Mocha/Karma Testing'),(1230,417,'_home_technologies_8_technology','field_57d5df73d737d'),(1231,417,'home_technologies_9_technology','Continuous Integration'),(1232,417,'_home_technologies_9_technology','field_57d5df73d737d'),(1233,417,'home_technologies_10_technology','Deployment Automation'),(1234,417,'_home_technologies_10_technology','field_57d5df73d737d'),(1235,417,'home_technologies','11'),(1236,417,'_home_technologies','field_57d5df54d737c'),(1237,417,'home_npm_packages_0_name','local-storage-manager'),(1238,417,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(1239,417,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(1240,417,'_home_npm_packages_0_link','field_57d5dfdad7381'),(1241,417,'home_npm_packages_1_name','es6-module-boilerplate'),(1242,417,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(1243,417,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(1244,417,'_home_npm_packages_1_link','field_57d5dfdad7381'),(1245,417,'home_npm_packages_2_name','lazy-slider'),(1246,417,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(1247,417,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(1248,417,'_home_npm_packages_2_link','field_57d5dfdad7381'),(1249,417,'home_npm_packages_3_name','timetools'),(1250,417,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(1251,417,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(1252,417,'_home_npm_packages_3_link','field_57d5dfdad7381'),(1253,417,'home_npm_packages','4'),(1254,417,'_home_npm_packages','field_57d5dfa2d737f'),(1255,417,'home_featured_project','343'),(1256,417,'_home_featured_project','field_57d68fcd83e16'),(1257,417,'home_featured_blog_post','382'),(1258,417,'_home_featured_blog_post','field_57d6910fb3ec1'),(1259,417,'_wpcom_is_markdown','1'),(1260,14,'home_technologies_10_technology','Deployment Automation'),(1261,14,'_home_technologies_10_technology','field_57d5df73d737d'),(1262,418,'home_technologies_0_technology','JavaScript (ES6)'),(1263,418,'_home_technologies_0_technology','field_57d5df73d737d'),(1264,418,'home_technologies_1_technology','Angular 1.x'),(1265,418,'_home_technologies_1_technology','field_57d5df73d737d'),(1266,418,'home_technologies_2_technology','React/Redux'),(1267,418,'_home_technologies_2_technology','field_57d5df73d737d'),(1268,418,'home_technologies_3_technology','Vue.js'),(1269,418,'_home_technologies_3_technology','field_57d5df73d737d'),(1270,418,'home_technologies_4_technology','AJAX (With Promises)'),(1271,418,'_home_technologies_4_technology','field_57d5df73d737d'),(1272,418,'home_technologies_5_technology','Node.js'),(1273,418,'_home_technologies_5_technology','field_57d5df73d737d'),(1274,418,'home_technologies_6_technology','SASS'),(1275,418,'_home_technologies_6_technology','field_57d5df73d737d'),(1276,418,'home_technologies_7_technology','Webpack, Gulp'),(1277,418,'_home_technologies_7_technology','field_57d5df73d737d'),(1278,418,'home_technologies_8_technology','Mocha/Karma Testing'),(1279,418,'_home_technologies_8_technology','field_57d5df73d737d'),(1280,418,'home_technologies_9_technology','Continuous Integration'),(1281,418,'_home_technologies_9_technology','field_57d5df73d737d'),(1282,418,'home_technologies_10_technology','Deployment Automation'),(1283,418,'_home_technologies_10_technology','field_57d5df73d737d'),(1284,418,'home_technologies','11'),(1285,418,'_home_technologies','field_57d5df54d737c'),(1286,418,'home_npm_packages_0_name','lazy slider'),(1287,418,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(1288,418,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(1289,418,'_home_npm_packages_0_link','field_57d5dfdad7381'),(1290,418,'home_npm_packages_1_name','local-storage-manager'),(1291,418,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(1292,418,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(1293,418,'_home_npm_packages_1_link','field_57d5dfdad7381'),(1294,418,'home_npm_packages_2_name','es6-module-boilerplate'),(1295,418,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(1296,418,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(1297,418,'_home_npm_packages_2_link','field_57d5dfdad7381'),(1298,418,'home_npm_packages_3_name','timetools'),(1299,418,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(1300,418,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(1301,418,'_home_npm_packages_3_link','field_57d5dfdad7381'),(1302,418,'home_npm_packages_4_name','mouse-near'),(1303,418,'_home_npm_packages_4_name','field_57d5dfc1d7380'),(1304,418,'home_npm_packages_4_link','https://www.npmjs.com/package/@lukeboyle/mouse-near'),(1305,418,'_home_npm_packages_4_link','field_57d5dfdad7381'),(1306,418,'home_npm_packages','5'),(1307,418,'_home_npm_packages','field_57d5dfa2d737f'),(1308,418,'home_featured_project','343'),(1309,418,'_home_featured_project','field_57d68fcd83e16'),(1310,418,'home_featured_blog_post','382'),(1311,418,'_home_featured_blog_post','field_57d6910fb3ec1'),(1312,418,'_wpcom_is_markdown','1'),(1313,14,'home_npm_packages_4_name','mouse-near'),(1314,14,'_home_npm_packages_4_name','field_57d5dfc1d7380'),(1315,14,'home_npm_packages_4_link','https://www.npmjs.com/package/@lukeboyle/mouse-near'),(1316,14,'_home_npm_packages_4_link','field_57d5dfdad7381'),(1319,419,'_wpcom_is_markdown','1'),(1320,420,'_wpcom_is_markdown','1'),(1321,420,'_edit_last','1'),(1322,420,'_edit_lock','1482461501:1'),(1323,420,'_yoast_wpseo_content_score','30'),(1324,421,'_wpcom_is_markdown','1'),(1325,420,'_yoast_wpseo_primary_category',''),(1326,422,'_wpcom_is_markdown','1'),(1328,424,'_edit_last','1'),(1329,424,'_edit_lock','1487826099:1'),(1330,425,'_wp_attached_file','2017/01/asdf.png'),(1331,425,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1100;s:6:\"height\";i:1100;s:4:\"file\";s:16:\"2017/01/asdf.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"asdf-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"asdf-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:16:\"asdf-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"asdf-1024x1024.png\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1332,424,'portfolio_image','425'),(1333,424,'_portfolio_image','field_57d67264a8a86'),(1334,424,'portfolio_snippet','A web-app for easily visualising and sharing the muscle engagement of your exercise routine.'),(1335,424,'_portfolio_snippet','field_57d67df58eff0'),(1336,424,'portfolio_description','- Vue.js (ES2015)\r\n- Node.js\r\n- Babel, Webpack\r\n\r\nSplit Visualiser was developed as a feasibility test for Vue 2.0 to see if the interface and performance could scale to larger applications.'),(1337,424,'_portfolio_description','field_57d6727aa8a87'),(1338,424,'portfolio_demo_site','https://projects.stak.digital/split-visualiser'),(1339,424,'_portfolio_demo_site','field_57d801fcaf4e1'),(1340,424,'portfolio_repository_link','https://github.com/stak-digital/split-visualiser'),(1341,424,'_portfolio_repository_link','field_57d90a5748d11'),(1342,424,'_yoast_wpseo_content_score','30'),(1343,424,'_yoast_wpseo_focuskw_text_input','case study'),(1344,424,'_yoast_wpseo_focuskw','case study'),(1345,424,'_yoast_wpseo_title','%%title%% %%page%% %%sep%% Case Study'),(1346,424,'_yoast_wpseo_metadesc','Case study of a web-app for easily visualising and sharing the muscle engagement of your exercise routine.'),(1347,424,'_yoast_wpseo_linkdex','35'),(1349,427,'_wpcom_is_markdown','1'),(1350,427,'_edit_last','1'),(1351,427,'_edit_lock','1485744330:1'),(1352,427,'_yoast_wpseo_content_score','30'),(1353,428,'_wpcom_is_markdown','1'),(1354,427,'_yoast_wpseo_primary_category','3'),(1355,429,'_wpcom_is_markdown','1'),(1356,430,'_wpcom_is_markdown','1'),(1357,431,'_wpcom_is_markdown','1'),(1359,433,'_wpcom_is_markdown','1'),(1360,434,'_wpcom_is_markdown','1'),(1361,435,'_wpcom_is_markdown','1'),(1362,436,'_wpcom_is_markdown','1'),(1363,437,'_wpcom_is_markdown','1'),(1364,438,'_wpcom_is_markdown','1'),(1365,439,'_wpcom_is_markdown','1'),(1366,440,'_wpcom_is_markdown','1'),(1367,441,'_wpcom_is_markdown','1'),(1368,442,'_wpcom_is_markdown','1'),(1369,443,'_wpcom_is_markdown','1'),(1372,444,'_wpcom_is_markdown','1'),(1375,445,'_wpcom_is_markdown','1'),(1376,446,'home_technologies_0_technology','JavaScript (ES6)'),(1377,446,'_home_technologies_0_technology','field_57d5df73d737d'),(1378,446,'home_technologies_1_technology','Angular 1.x'),(1379,446,'_home_technologies_1_technology','field_57d5df73d737d'),(1380,446,'home_technologies_2_technology','React/Redux'),(1381,446,'_home_technologies_2_technology','field_57d5df73d737d'),(1382,446,'home_technologies_3_technology','Vue.js'),(1383,446,'_home_technologies_3_technology','field_57d5df73d737d'),(1384,446,'home_technologies_4_technology','AJAX (With Promises)'),(1385,446,'_home_technologies_4_technology','field_57d5df73d737d'),(1386,446,'home_technologies_5_technology','Node.js'),(1387,446,'_home_technologies_5_technology','field_57d5df73d737d'),(1388,446,'home_technologies_6_technology','SASS'),(1389,446,'_home_technologies_6_technology','field_57d5df73d737d'),(1390,446,'home_technologies_7_technology','Webpack, Gulp'),(1391,446,'_home_technologies_7_technology','field_57d5df73d737d'),(1392,446,'home_technologies_8_technology','Mocha/Karma Testing'),(1393,446,'_home_technologies_8_technology','field_57d5df73d737d'),(1394,446,'home_technologies_9_technology','Continuous Integration'),(1395,446,'_home_technologies_9_technology','field_57d5df73d737d'),(1396,446,'home_technologies_10_technology','Deployment Automation'),(1397,446,'_home_technologies_10_technology','field_57d5df73d737d'),(1398,446,'home_technologies','11'),(1399,446,'_home_technologies','field_57d5df54d737c'),(1400,446,'home_npm_packages_0_name','lazy slider'),(1401,446,'_home_npm_packages_0_name','field_57d5dfc1d7380'),(1402,446,'home_npm_packages_0_link','https://www.npmjs.com/package/@lukeboyle/lazy-slider'),(1403,446,'_home_npm_packages_0_link','field_57d5dfdad7381'),(1404,446,'home_npm_packages_1_name','local-storage-manager'),(1405,446,'_home_npm_packages_1_name','field_57d5dfc1d7380'),(1406,446,'home_npm_packages_1_link','https://www.npmjs.com/package/@lukeboyle/local-storage-manager'),(1407,446,'_home_npm_packages_1_link','field_57d5dfdad7381'),(1408,446,'home_npm_packages_2_name','es6-module-boilerplate'),(1409,446,'_home_npm_packages_2_name','field_57d5dfc1d7380'),(1410,446,'home_npm_packages_2_link','https://www.npmjs.com/package/@lukeboyle/es6-module-boilerplate'),(1411,446,'_home_npm_packages_2_link','field_57d5dfdad7381'),(1412,446,'home_npm_packages_3_name','timetools'),(1413,446,'_home_npm_packages_3_name','field_57d5dfc1d7380'),(1414,446,'home_npm_packages_3_link','https://www.npmjs.com/package/@lukeboyle/timetools'),(1415,446,'_home_npm_packages_3_link','field_57d5dfdad7381'),(1416,446,'home_npm_packages_4_name','mouse-near'),(1417,446,'_home_npm_packages_4_name','field_57d5dfc1d7380'),(1418,446,'home_npm_packages_4_link','https://www.npmjs.com/package/@lukeboyle/mouse-near'),(1419,446,'_home_npm_packages_4_link','field_57d5dfdad7381'),(1420,446,'home_npm_packages','5'),(1421,446,'_home_npm_packages','field_57d5dfa2d737f'),(1422,446,'home_featured_project','424'),(1423,446,'_home_featured_project','field_57d68fcd83e16'),(1424,446,'home_featured_blog_post','382'),(1425,446,'_home_featured_blog_post','field_57d6910fb3ec1'),(1426,446,'_wpcom_is_markdown','1'),(1427,302,'_edit_lock','1485829813:1'),(1428,302,'_yoast_wpseo_content_score','30'),(1429,447,'_wpcom_is_markdown','1'),(1493,456,'_wpcom_is_markdown','1'),(1494,457,'_edit_last','1'),(1495,457,'_edit_lock','1487827037:1'),(1496,457,'portfolio_image','459'),(1497,457,'_portfolio_image','field_57d67264a8a86'),(1498,457,'portfolio_snippet','A multi-platform collection of social networking and business applications for childcare staff and parents.'),(1499,457,'_portfolio_snippet','field_57d67df58eff0'),(1500,457,'_portfolio_description','field_57d6727aa8a87'),(1501,457,'portfolio_demo_site',''),(1502,457,'_portfolio_demo_site','field_57d801fcaf4e1'),(1503,457,'portfolio_repository_link',''),(1504,457,'_portfolio_repository_link','field_57d90a5748d11'),(1505,457,'_yoast_wpseo_content_score','30'),(1506,458,'portfolio_image',''),(1507,458,'_portfolio_image','field_57d67264a8a86'),(1508,458,'portfolio_snippet','A multi-platform collection of social networking and business applications for childcare staff and parents.'),(1509,458,'_portfolio_snippet','field_57d67df58eff0'),(1510,458,'portfolio_description',''),(1511,458,'_portfolio_description','field_57d6727aa8a87'),(1512,458,'portfolio_demo_site',''),(1513,458,'_portfolio_demo_site','field_57d801fcaf4e1'),(1514,458,'portfolio_repository_link',''),(1515,458,'_portfolio_repository_link','field_57d90a5748d11'),(1516,458,'_wpcom_is_markdown','1'),(1517,459,'_wp_attached_file','2017/02/journeytree-thumbnail-2.jpg'),(1518,459,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:500;s:6:\"height\";i:341;s:4:\"file\";s:35:\"2017/02/journeytree-thumbnail-2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"journeytree-thumbnail-2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"journeytree-thumbnail-2-300x205.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1519,457,'_thumbnail_id','459'),(1520,457,'portfolio_description',''),(1521,460,'_wp_attached_file','2017/02/spectrum-thumbnail.png'),(1522,460,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:453;s:6:\"height\";i:346;s:4:\"file\";s:30:\"2017/02/spectrum-thumbnail.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"spectrum-thumbnail-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"spectrum-thumbnail-300x229.png\";s:5:\"width\";i:300;s:6:\"height\";i:229;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1523,461,'_wp_attached_file','2016/09/Untitled-1.png'),(1524,461,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1200;s:6:\"height\";i:800;s:4:\"file\";s:22:\"2016/09/Untitled-1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Untitled-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Untitled-1-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Untitled-1-768x512.png\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"Untitled-1-1024x683.png\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1525,462,'_edit_last','1'),(1526,462,'_edit_lock','1488243264:1'),(1527,463,'_wp_attached_file','2017/02/Screen-Shot-2017-02-25-at-10.28.45-pm.png'),(1528,463,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:642;s:6:\"height\";i:538;s:4:\"file\";s:49:\"2017/02/Screen-Shot-2017-02-25-at-10.28.45-pm.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-02-25-at-10.28.45-pm-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-02-25-at-10.28.45-pm-300x251.png\";s:5:\"width\";i:300;s:6:\"height\";i:251;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1529,462,'portfolio_image','463'),(1530,462,'_portfolio_image','field_57d67264a8a86'),(1531,462,'portfolio_snippet','Share messages written in app icons on a mock iOS home screen. What could be better?'),(1532,462,'_portfolio_snippet','field_57d67df58eff0'),(1533,462,'portfolio_description','Type With Apps is the result of a hack session in a laundromat in Yarraville. What started as simply replicating the iOS homescreen in <strong>Angular 1.5</strong> ended as a ...\r\n\r\n<h2>Challenges</h2>\r\n\r\nThe biggest challenge of this project was adding support for multiple letter icons. I firstly had to consider whether the multiple letters appeared together (i.e. are there spaces in-between?). Then I had to do an initial run over the string and check if there were any matches to the multiple character icons I had. After that initial run was done, I had an array that was a mixture of letters and app icon objects. The final pass cleans up all of the single letters and the icons are output to the screen.\r\n\r\nThis is to this day my favourite application of `Array.reduce`.  '),(1534,462,'_portfolio_description','field_57d6727aa8a87'),(1535,462,'portfolio_demo_site','http://3stacks.github.io/type-with-apps'),(1536,462,'_portfolio_demo_site','field_57d801fcaf4e1'),(1537,462,'portfolio_repository_link','https://github.com/3stacks/type-with-apps'),(1538,462,'_portfolio_repository_link','field_57d90a5748d11'),(1539,462,'_yoast_wpseo_content_score','30'),(1540,464,'_wp_attached_file','2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm.png'),(1541,464,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1002;s:6:\"height\";i:688;s:4:\"file\";s:48:\"2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-26-at-8.42.26-pm-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-26-at-8.42.26-pm-300x206.png\";s:5:\"width\";i:300;s:6:\"height\";i:206;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-26-at-8.42.26-pm-768x527.png\";s:5:\"width\";i:768;s:6:\"height\";i:527;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1542,465,'_wp_attached_file','2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm-1.png'),(1543,465,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1000;s:6:\"height\";i:688;s:4:\"file\";s:50:\"2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm-1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:50:\"Screen-Shot-2017-02-26-at-8.42.26-pm-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:50:\"Screen-Shot-2017-02-26-at-8.42.26-pm-1-300x206.png\";s:5:\"width\";i:300;s:6:\"height\";i:206;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:50:\"Screen-Shot-2017-02-26-at-8.42.26-pm-1-768x528.png\";s:5:\"width\";i:768;s:6:\"height\";i:528;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1544,466,'_wp_attached_file','2016/09/Capture.png'),(1545,466,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:752;s:6:\"height\";i:404;s:4:\"file\";s:19:\"2016/09/Capture.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"Capture-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"Capture-300x161.png\";s:5:\"width\";i:300;s:6:\"height\";i:161;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1546,467,'_wp_attached_file','2016/09/Screen-Shot-2017-02-27-at-7.02.35-pm.png'),(1547,467,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1326;s:6:\"height\";i:1116;s:4:\"file\";s:48:\"2016/09/Screen-Shot-2017-02-27-at-7.02.35-pm.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-27-at-7.02.35-pm-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-27-at-7.02.35-pm-300x252.png\";s:5:\"width\";i:300;s:6:\"height\";i:252;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-02-27-at-7.02.35-pm-768x646.png\";s:5:\"width\";i:768;s:6:\"height\";i:646;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-02-27-at-7.02.35-pm-1024x862.png\";s:5:\"width\";i:1024;s:6:\"height\";i:862;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1548,468,'_wp_attached_file','2016/09/burrito.png'),(1549,468,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:256;s:6:\"height\";i:256;s:4:\"file\";s:19:\"2016/09/burrito.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"burrito-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1550,469,'_wp_attached_file','2016/09/Untitled-1-1.png'),(1551,469,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:200;s:4:\"file\";s:24:\"2016/09/Untitled-1-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"Untitled-1-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"Untitled-1-1-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1555,470,'_edit_last','1'),(1556,470,'_edit_lock','1488243145:1'),(1558,470,'portfolio_image','460'),(1559,470,'_portfolio_image','field_57d67264a8a86'),(1560,470,'portfolio_snippet','Spectrum is a web-based editor for writing software specification documents. Spectrum enables software architects to progressively define the functionality in their system.'),(1561,470,'_portfolio_snippet','field_57d67df58eff0'),(1562,470,'_portfolio_description','field_57d6727aa8a87'),(1563,470,'portfolio_demo_site',''),(1564,470,'_portfolio_demo_site','field_57d801fcaf4e1'),(1565,470,'portfolio_repository_link',''),(1566,470,'_portfolio_repository_link','field_57d90a5748d11'),(1567,470,'_yoast_wpseo_content_score','30'),(1574,470,'_wp_old_slug','spectrum-2__trashed'),(1575,470,'portfolio_description','<img src=\"http://lukeboyle.com/app/uploads/2017/02/spectrum-thumbnail.png\" alt=\"\" width=\"453\" height=\"346\" class=\"alignnone size-full wp-image-460\" />\r\n\r\nSpectrum is a web-based editor for writing software specification documents. The app enables software architects to progressively define the functionality in their system allowing developers to begin implementing the specification sooner.\r\n\r\n<h3>Technology List</h3>\r\n<ul>\r\n<li>React</li>\r\n<li>Webpack</li>\r\n<li>Node.js</li>\r\n<li>Prototyping Tools</li>\r\n</ul>\r\n\r\n<h3>Challenges</h3>\r\nOne of the major challenges faced in this project was reimplementing the textbox to allow us to make complex data structures human readable. Along with displaying the complex data, users have to be able to select text, copy and paste text and control the cursor as they would in their operating system (cmd vs ctrl).\r\n\r\n<h3>Accomplishments</h3>\r\nArchitected a file format that adhered to our application design goals while being valid Markdown. This meant I had to make a processor to generate a specfile from complex app data and conversely, a parser to generate app data at runtime.\r\n\r\nThe app provides spec authors with a rich WYSIWYG editor for the specfile that allows each screen, form, section or component to be written independently of other parts of the spec.\r\n\r\nSpecial formatting is given to warnings, errors and other textual content that the implementors will need to take verbatim.\r\n\r\nThe editor also allows authors to insert special cross-links to other parts of the spec for quick reference and to reduce the amount of duplicated information. This allows for a single-source-of-truth for stakeholders to review and automatically propagates changes across the whole spec.\r\n\r\nSpectrum offers special insights that management can use to better allocated resources on the project including generating an application-wide dependency visualisation to aid in human effort bottleneck prediction.\r\n\r\nThe application\'s specfile format can also be version-tracked like any other text/code file for the ability to diff the file\'s change history using already available tools - a unique feature among more common formats like Microsoft Word documents.'),(1577,472,'_wpcom_is_markdown','1'),(1578,472,'_edit_last','1'),(1579,472,'_edit_lock','1489034583:1'),(1580,472,'_yoast_wpseo_content_score','90'),(1581,473,'_wpcom_is_markdown','1'),(1582,472,'_yoast_wpseo_primary_category','3'),(1583,474,'_wpcom_is_markdown','1'),(1584,475,'_wpcom_is_markdown','1'),(1585,476,'_wpcom_is_markdown','1'),(1586,477,'_wpcom_is_markdown','1'),(1587,478,'_wpcom_is_markdown','1'),(1588,479,'_wp_attached_file','2017/03/CCblInSUMAA8kxv.jpg'),(1589,479,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:571;s:6:\"height\";i:565;s:4:\"file\";s:27:\"2017/03/CCblInSUMAA8kxv.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"CCblInSUMAA8kxv-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"CCblInSUMAA8kxv-300x297.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:297;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1590,480,'_wpcom_is_markdown','1'),(1591,481,'_wpcom_is_markdown','1'),(1592,482,'_wpcom_is_markdown','1'),(1593,483,'_wpcom_is_markdown','1'),(1594,484,'_wpcom_is_markdown','1'),(1595,485,'_wpcom_is_markdown','1'),(1596,486,'_wpcom_is_markdown','1'),(1597,487,'_wpcom_is_markdown','1'),(1598,488,'_wpcom_is_markdown','1'),(1599,489,'_wpcom_is_markdown','1'),(1600,490,'_wpcom_is_markdown','1'),(1603,491,'_wpcom_is_markdown','1'),(1604,492,'_wpcom_is_markdown','1'),(1607,493,'_wpcom_is_markdown','1'),(1610,494,'_wpcom_is_markdown','1'),(1613,495,'_wpcom_is_markdown','1'),(1616,496,'_wpcom_is_markdown','1'),(1619,497,'_wpcom_is_markdown','1'),(1622,498,'_wpcom_is_markdown','1'),(1625,499,'_wpcom_is_markdown','1'),(1626,472,'_yoast_wpseo_focuskw_text_input','CSS Buttons solved flexbox'),(1627,472,'_yoast_wpseo_focuskw','CSS Buttons solved flexbox'),(1628,472,'_yoast_wpseo_metadesc','A guide to flexibly resize your buttons based on their content using flexbox. This is the most reliable way to vertically align your button text.'),(1629,472,'_yoast_wpseo_linkdex','66'),(1632,500,'_wpcom_is_markdown','1'),(1635,501,'_wpcom_is_markdown','1'),(1638,502,'_wpcom_is_markdown','1'),(1645,503,'_wpcom_is_markdown','1'),(1648,504,'_wpcom_is_markdown','1'),(1651,505,'_wpcom_is_markdown','1'),(1654,506,'_wpcom_is_markdown','1'),(1659,507,'_wpcom_is_markdown','1'),(1662,508,'_wpcom_is_markdown','1'),(1665,509,'_wpcom_is_markdown','1'),(1668,510,'_wpcom_is_markdown','1'),(1671,511,'_wpcom_is_markdown','1'),(1674,512,'_wpcom_is_markdown','1'),(1677,515,'_wpcom_is_markdown','1'),(1678,515,'_edit_last','1'),(1679,515,'_edit_lock','1490789777:1'),(1680,515,'_yoast_wpseo_content_score','60'),(1681,516,'_wpcom_is_markdown','1'),(1682,515,'_yoast_wpseo_primary_category',''),(1683,517,'_wp_attached_file','2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png'),(1684,517,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:308;s:6:\"height\";i:116;s:4:\"file\";s:49:\"2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-03-29-at-10.58.59-pm-150x116.png\";s:5:\"width\";i:150;s:6:\"height\";i:116;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-03-29-at-10.58.59-pm-300x113.png\";s:5:\"width\";i:300;s:6:\"height\";i:113;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1685,518,'_wpcom_is_markdown','1'),(1686,519,'_wpcom_is_markdown','1'),(1687,520,'_wpcom_is_markdown','1'),(1688,520,'_edit_last','1'),(1689,521,'_wpcom_is_markdown','1'),(1690,520,'_edit_lock','1492640631:1'),(1692,523,'_wpcom_is_markdown','1'),(1693,524,'_wpcom_is_markdown','1'),(1694,525,'_wpcom_is_markdown','1'),(1695,525,'_edit_last','1'),(1696,525,'_edit_lock','1493221737:1'),(1697,525,'_yoast_wpseo_content_score','90'),(1698,526,'_wpcom_is_markdown','1'),(1699,525,'_yoast_wpseo_primary_category','3'),(1700,527,'_wpcom_is_markdown','1'),(1701,528,'_wpcom_is_markdown','1'),(1702,529,'_wpcom_is_markdown','1'),(1703,530,'_wpcom_is_markdown','1'),(1704,531,'_wpcom_is_markdown','1'),(1705,532,'_wpcom_is_markdown','1'),(1706,533,'_wp_attached_file','2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg'),(1707,533,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1440;s:6:\"height\";i:776;s:4:\"file\";s:48:\"2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-04-27-at-1.31.56-am-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-04-27-at-1.31.56-am-300x162.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:162;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2017-04-27-at-1.31.56-am-768x414.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:414;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2017-04-27-at-1.31.56-am-1024x552.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:552;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1708,534,'_wpcom_is_markdown','1'),(1709,525,'_yoast_wpseo_focuskw_text_input','CSS Variables'),(1710,525,'_yoast_wpseo_focuskw','CSS Variables'),(1711,525,'_yoast_wpseo_metadesc','A real world (and hack free) approach to complicated theming (including user configuration) using css variables. This case study covers all the nitty gritty'),(1712,525,'_yoast_wpseo_linkdex','76'),(1713,535,'_wpcom_is_markdown','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=536 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (4,1,'2016-09-11 13:52:03','2016-09-11 13:52:03','','Portfolio','','publish','closed','closed','','portfolio','','','2016-10-01 01:28:45','2016-10-01 01:28:45','',0,'http://lukeboyle.com/wp/?page_id=4',0,'page','',0),(5,1,'2016-09-11 13:52:03','2016-09-11 13:52:03','','portfolio','','inherit','closed','closed','','4-revision-v1','','','2016-09-11 13:52:03','2016-09-11 13:52:03','',4,'http://lukeboyle.com/wp/2016/09/11/4-revision-v1/',0,'revision','',0),(6,1,'2016-09-11 22:31:53','2016-09-11 22:31:53','a:7:{s:8:\"location\";a:1:{i:0;a:1:{i:0;a:3:{s:5:\"param\";s:9:\"post_type\";s:8:\"operator\";s:2:\"==\";s:5:\"value\";s:14:\"portfolio_item\";}}}s:8:\"position\";s:6:\"normal\";s:5:\"style\";s:7:\"default\";s:15:\"label_placement\";s:3:\"top\";s:21:\"instruction_placement\";s:5:\"label\";s:14:\"hide_on_screen\";s:0:\"\";s:11:\"description\";s:0:\"\";}','Portfolio','portfolio','publish','closed','closed','','group_57d5dad75a00e','','','2016-09-14 10:14:49','2016-09-14 10:14:49','',0,'http://lukeboyle.dev/?post_type=acf-field-group&#038;p=6',0,'acf-field-group','',0),(7,1,'2015-08-03 02:52:10','2015-08-03 02:52:10','','how i got over','','inherit','open','open','','how-i-got-over','','','2015-08-03 02:52:10','2015-08-03 02:52:10','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/how-i-got-over-1.jpg',0,'attachment','image/jpeg',0),(12,1,'2016-09-11 22:33:22','2016-09-11 22:33:22',' ','','','publish','closed','closed','','12','','','2016-09-17 01:58:37','2016-09-17 01:58:37','',0,'http://lukeboyle.com/wp/2016/09/11/12/',2,'nav_menu_item','',0),(13,1,'2016-09-11 22:38:00','2016-09-11 22:38:00','','Portfolio','','inherit','closed','closed','','4-revision-v1','','','2016-09-11 22:38:00','2016-09-11 22:38:00','',4,'http://lukeboyle.com/wp/4-revision-v1/',0,'revision','',0),(14,1,'2016-09-11 22:38:10','2016-09-11 22:38:10','','Home','','publish','closed','closed','','home','','','2017-01-31 02:13:54','2017-01-31 02:13:54','',0,'http://lukeboyle.com/wp/?page_id=14',0,'page','',0),(15,1,'2016-09-11 22:38:10','2016-09-11 22:38:10','','Front Page','','inherit','closed','closed','','14-revision-v1','','','2016-09-11 22:38:10','2016-09-11 22:38:10','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(17,1,'2016-09-11 22:39:28','2016-09-11 22:39:28','','screen-shot-2016-09-10-at-5-15-20-pm','','inherit','open','closed','','screen-shot-2016-09-10-at-5-15-20-pm','','','2016-09-11 22:39:28','2016-09-11 22:39:28','',4,'http://lukeboyle.com/wp/app/uploads/2016/09/Screen-Shot-2016-09-10-at-5.15.20-PM.png',0,'attachment','image/png',0),(18,1,'2016-09-11 22:39:43','2016-09-11 22:39:43','','Portfolio','','inherit','closed','closed','','4-revision-v1','','','2016-09-11 22:39:43','2016-09-11 22:39:43','',4,'http://lukeboyle.com/wp/4-revision-v1/',0,'revision','',0),(19,1,'2016-09-11 22:48:02','2016-09-11 22:48:02','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-11 22:48:02','2016-09-11 22:48:02','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(21,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:7:{s:8:\"location\";a:1:{i:0;a:1:{i:0;a:3:{s:5:\"param\";s:4:\"page\";s:8:\"operator\";s:2:\"==\";s:5:\"value\";s:2:\"14\";}}}s:8:\"position\";s:6:\"normal\";s:5:\"style\";s:7:\"default\";s:15:\"label_placement\";s:3:\"top\";s:21:\"instruction_placement\";s:5:\"label\";s:14:\"hide_on_screen\";s:0:\"\";s:11:\"description\";s:0:\"\";}','Home Page','home-page','publish','closed','closed','','group_57d5df4eec639','','','2016-09-12 11:27:37','2016-09-12 11:27:37','',0,'http://lukeboyle.dev/?post_type=acf-field-group&#038;p=21',0,'acf-field-group','',0),(22,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:10:{s:4:\"type\";s:8:\"repeater\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:9:\"collapsed\";s:0:\"\";s:3:\"min\";s:0:\"\";s:3:\"max\";s:0:\"\";s:6:\"layout\";s:5:\"table\";s:12:\"button_label\";s:7:\"Add Row\";}','Technologies','home_technologies','publish','closed','closed','','field_57d5df54d737c','','','2016-09-11 22:51:34','2016-09-11 22:51:34','',21,'http://lukeboyle.dev/?post_type=acf-field&p=22',0,'acf-field','',0),(23,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:12:{s:4:\"type\";s:4:\"text\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";s:7:\"prepend\";s:0:\"\";s:6:\"append\";s:0:\"\";s:9:\"maxlength\";s:0:\"\";s:8:\"readonly\";i:0;s:8:\"disabled\";i:0;}','Technology','technology','publish','closed','closed','','field_57d5df73d737d','','','2016-09-11 22:51:34','2016-09-11 22:51:34','',22,'http://lukeboyle.dev/?post_type=acf-field&p=23',0,'acf-field','',0),(24,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:10:{s:4:\"type\";s:8:\"repeater\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:9:\"collapsed\";s:0:\"\";s:3:\"min\";s:0:\"\";s:3:\"max\";s:0:\"\";s:6:\"layout\";s:5:\"table\";s:12:\"button_label\";s:7:\"Add Row\";}','npm Packages','home_npm_packages','publish','closed','closed','','field_57d5dfa2d737f','','','2016-09-11 22:51:34','2016-09-11 22:51:34','',21,'http://lukeboyle.dev/?post_type=acf-field&p=24',1,'acf-field','',0),(25,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:12:{s:4:\"type\";s:4:\"text\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";s:7:\"prepend\";s:0:\"\";s:6:\"append\";s:0:\"\";s:9:\"maxlength\";s:0:\"\";s:8:\"readonly\";i:0;s:8:\"disabled\";i:0;}','Name','name','publish','closed','closed','','field_57d5dfc1d7380','','','2016-09-11 22:51:34','2016-09-11 22:51:34','',24,'http://lukeboyle.dev/?post_type=acf-field&p=25',0,'acf-field','',0),(26,1,'2016-09-11 22:51:34','2016-09-11 22:51:34','a:7:{s:4:\"type\";s:3:\"url\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";}','Link','link','publish','closed','closed','','field_57d5dfdad7381','','','2016-09-11 22:51:34','2016-09-11 22:51:34','',24,'http://lukeboyle.dev/?post_type=acf-field&p=26',1,'acf-field','',0),(27,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:7:{s:8:\"location\";a:1:{i:0;a:1:{i:0;a:3:{s:5:\"param\";s:4:\"post\";s:8:\"operator\";s:2:\"==\";s:5:\"value\";s:1:\"1\";}}}s:8:\"position\";s:6:\"normal\";s:5:\"style\";s:7:\"default\";s:15:\"label_placement\";s:3:\"top\";s:21:\"instruction_placement\";s:5:\"label\";s:14:\"hide_on_screen\";s:0:\"\";s:11:\"description\";s:0:\"\";}','Top Albums of the Year','top-albums-of-the-year','publish','closed','closed','','group_57d5e02d86213','','','2016-09-11 22:54:16','2016-09-11 22:54:16','',0,'http://lukeboyle.dev/?post_type=acf-field-group&#038;p=27',0,'acf-field-group','',0),(28,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:9:{s:4:\"type\";s:16:\"flexible_content\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:12:\"button_label\";s:7:\"Add Row\";s:3:\"min\";s:0:\"\";s:3:\"max\";s:0:\"\";s:7:\"layouts\";a:1:{i:0;a:6:{s:3:\"key\";s:13:\"57d5e040cb2f7\";s:5:\"label\";s:0:\"\";s:4:\"name\";s:0:\"\";s:7:\"display\";s:5:\"block\";s:3:\"min\";s:0:\"\";s:3:\"max\";s:0:\"\";}}}','Top Albums','top_albums','publish','closed','closed','','field_57d5e03654851','','','2016-09-11 22:54:15','2016-09-11 22:54:15','',27,'http://lukeboyle.dev/?post_type=acf-field&p=28',0,'acf-field','',0),(29,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:13:{s:4:\"type\";s:4:\"text\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"parent_layout\";s:13:\"57d5e040cb2f7\";s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";s:7:\"prepend\";s:0:\"\";s:6:\"append\";s:0:\"\";s:9:\"maxlength\";s:0:\"\";s:8:\"readonly\";i:0;s:8:\"disabled\";i:0;}','Album Name','album_name','publish','closed','closed','','field_57d5e06354852','','','2016-09-11 22:54:15','2016-09-11 22:54:15','',28,'http://lukeboyle.dev/?post_type=acf-field&p=29',0,'acf-field','',0),(30,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:16:{s:4:\"type\";s:5:\"image\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"parent_layout\";s:13:\"57d5e040cb2f7\";s:13:\"return_format\";s:5:\"array\";s:12:\"preview_size\";s:9:\"thumbnail\";s:7:\"library\";s:3:\"all\";s:9:\"min_width\";s:0:\"\";s:10:\"min_height\";s:0:\"\";s:8:\"min_size\";s:0:\"\";s:9:\"max_width\";s:0:\"\";s:10:\"max_height\";s:0:\"\";s:8:\"max_size\";s:0:\"\";s:10:\"mime_types\";s:0:\"\";}','Album Art','album_art','publish','closed','closed','','field_57d5e06f54853','','','2016-09-11 22:54:15','2016-09-11 22:54:15','',28,'http://lukeboyle.dev/?post_type=acf-field&p=30',1,'acf-field','',0),(31,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:15:{s:4:\"type\";s:6:\"number\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"parent_layout\";s:13:\"57d5e040cb2f7\";s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";s:7:\"prepend\";s:0:\"\";s:6:\"append\";s:0:\"\";s:3:\"min\";s:0:\"\";s:3:\"max\";s:0:\"\";s:4:\"step\";s:0:\"\";s:8:\"readonly\";i:0;s:8:\"disabled\";i:0;}','Rating','rating','publish','closed','closed','','field_57d5e07c54854','','','2016-09-11 22:54:15','2016-09-11 22:54:15','',28,'http://lukeboyle.dev/?post_type=acf-field&p=31',2,'acf-field','',0),(32,1,'2016-09-11 22:54:15','2016-09-11 22:54:15','a:10:{s:4:\"type\";s:7:\"wysiwyg\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"parent_layout\";s:13:\"57d5e040cb2f7\";s:13:\"default_value\";s:0:\"\";s:4:\"tabs\";s:3:\"all\";s:7:\"toolbar\";s:4:\"full\";s:12:\"media_upload\";i:1;}','Blurb','blurb','publish','closed','closed','','field_57d5e08654855','','','2016-09-11 22:54:15','2016-09-11 22:54:15','',28,'http://lukeboyle.dev/?post_type=acf-field&p=32',3,'acf-field','',0),(37,1,'2016-09-12 09:17:09','2016-09-12 09:17:09','a:15:{s:4:\"type\";s:5:\"image\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"return_format\";s:5:\"array\";s:12:\"preview_size\";s:9:\"thumbnail\";s:7:\"library\";s:3:\"all\";s:9:\"min_width\";s:0:\"\";s:10:\"min_height\";s:0:\"\";s:8:\"min_size\";s:0:\"\";s:9:\"max_width\";s:0:\"\";s:10:\"max_height\";s:0:\"\";s:8:\"max_size\";s:0:\"\";s:10:\"mime_types\";s:0:\"\";}','Image','portfolio_image','publish','closed','closed','','field_57d67264a8a86','','','2016-09-12 09:17:55','2016-09-12 09:17:55','',6,'http://lukeboyle.dev/?post_type=acf-field&#038;p=37',0,'acf-field','',0),(38,1,'2016-09-12 09:17:09','2016-09-12 09:17:09','a:9:{s:4:\"type\";s:7:\"wysiwyg\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:4:\"tabs\";s:3:\"all\";s:7:\"toolbar\";s:4:\"full\";s:12:\"media_upload\";i:1;}','Description','portfolio_description','publish','closed','closed','','field_57d6727aa8a87','','','2016-09-12 10:06:22','2016-09-12 10:06:22','',6,'http://lukeboyle.dev/?post_type=acf-field&#038;p=38',2,'acf-field','',0),(41,1,'2016-09-12 10:06:22','2016-09-12 10:06:22','a:12:{s:4:\"type\";s:8:\"textarea\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";s:9:\"maxlength\";s:0:\"\";s:4:\"rows\";s:0:\"\";s:9:\"new_lines\";s:7:\"wpautop\";s:8:\"readonly\";i:0;s:8:\"disabled\";i:0;}','Snippet','portfolio_snippet','publish','closed','closed','','field_57d67df58eff0','','','2016-09-12 10:06:22','2016-09-12 10:06:22','',6,'http://lukeboyle.dev/?post_type=acf-field&p=41',1,'acf-field','',0),(42,1,'2016-09-12 11:05:24','2016-09-12 11:05:24','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 11:05:24','2016-09-12 11:05:24','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(43,1,'2016-09-12 11:06:14','2016-09-12 11:06:14','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 11:06:14','2016-09-12 11:06:14','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(44,1,'2016-09-12 11:11:32','2016-09-12 11:11:32','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 11:11:32','2016-09-12 11:11:32','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(45,1,'2016-09-12 11:22:12','2016-09-12 11:22:12','a:11:{s:4:\"type\";s:11:\"post_object\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:9:\"post_type\";a:0:{}s:8:\"taxonomy\";a:0:{}s:10:\"allow_null\";i:0;s:8:\"multiple\";i:0;s:13:\"return_format\";s:6:\"object\";s:2:\"ui\";i:1;}','Featured Project','home_featured_project','publish','closed','closed','','field_57d68fcd83e16','','','2016-09-12 11:25:14','2016-09-12 11:25:14','',21,'http://lukeboyle.dev/?post_type=acf-field&#038;p=45',2,'acf-field','',0),(46,1,'2016-09-12 11:27:37','2016-09-12 11:27:37','a:11:{s:4:\"type\";s:11:\"post_object\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:9:\"post_type\";a:0:{}s:8:\"taxonomy\";a:0:{}s:10:\"allow_null\";i:0;s:8:\"multiple\";i:0;s:13:\"return_format\";s:6:\"object\";s:2:\"ui\";i:1;}','Featured Blog Post','home_featured_blog_post','publish','closed','closed','','field_57d6910fb3ec1','','','2016-09-12 11:27:37','2016-09-12 11:27:37','',21,'http://lukeboyle.dev/?post_type=acf-field&p=46',3,'acf-field','',0),(47,1,'2016-09-12 11:30:06','2016-09-12 11:30:06','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 11:30:06','2016-09-12 11:30:06','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(48,1,'2016-09-12 11:30:18','2016-09-12 11:30:18','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 11:30:18','2016-09-12 11:30:18','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(53,1,'2016-09-12 13:14:49','2016-09-12 13:14:49','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-12 13:14:49','2016-09-12 13:14:49','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(54,1,'2016-09-12 13:43:09','2016-09-12 13:43:09','','Blog','','publish','closed','closed','','blog','','','2016-10-01 01:25:27','2016-10-01 01:25:27','',0,'http://lukeboyle.com/wp/?page_id=54',0,'page','',0),(55,1,'2016-09-12 13:43:09','2016-09-12 13:43:09','','Blog','','inherit','closed','closed','','54-revision-v1','','','2016-09-12 13:43:09','2016-09-12 13:43:09','',54,'http://lukeboyle.com/wp/54-revision-v1/',0,'revision','',0),(56,1,'2016-09-12 13:43:39','2016-09-12 13:43:39',' ','','','publish','closed','closed','','56','','','2016-09-17 01:58:37','2016-09-17 01:58:37','',0,'http://lukeboyle.com/wp/56/',3,'nav_menu_item','',0),(57,1,'2016-09-12 13:45:58','2016-09-12 13:45:58','','Home','','publish','closed','closed','','home','','','2017-01-16 12:08:17','2017-01-16 12:08:17','',0,'http://lukeboyle.com/wp/home/',1,'nav_menu_item','',0),(58,1,'2016-09-13 13:41:45','2016-09-13 13:41:45','a:7:{s:4:\"type\";s:3:\"url\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:1:\"#\";s:11:\"placeholder\";s:0:\"\";}','Demonstration Link','portfolio_demo_site','publish','closed','closed','','field_57d801fcaf4e1','','','2016-09-14 03:19:02','2016-09-14 03:19:02','',6,'http://lukeboyle.dev/?post_type=acf-field&#038;p=58',3,'acf-field','',0),(59,1,'2016-09-14 08:29:55','2016-09-14 08:29:55','a:7:{s:4:\"type\";s:3:\"url\";s:12:\"instructions\";s:0:\"\";s:8:\"required\";i:0;s:17:\"conditional_logic\";i:0;s:7:\"wrapper\";a:3:{s:5:\"width\";s:0:\"\";s:5:\"class\";s:0:\"\";s:2:\"id\";s:0:\"\";}s:13:\"default_value\";s:0:\"\";s:11:\"placeholder\";s:0:\"\";}','Repository Link','portfolio_repository_link','publish','closed','closed','','field_57d90a5748d11','','','2016-09-14 08:29:55','2016-09-14 08:29:55','',6,'http://lukeboyle.dev/?post_type=acf-field&p=59',4,'acf-field','',0),(77,1,'2016-09-16 23:30:28','2016-09-16 23:30:28','','screen-shot-2016-09-17-at-9-29-46-am','','inherit','open','closed','','screen-shot-2016-09-17-at-9-29-46-am','','','2016-09-16 23:30:28','2016-09-16 23:30:28','',0,'http://lukeboyle.com/wp/app/uploads/2016/09/Screen-Shot-2016-09-17-at-9.29.46-AM.png',0,'attachment','image/png',0),(78,1,'2016-09-16 23:34:45','2016-09-16 23:34:45','','screen-shot-2016-09-17-at-9-31-25-am','','inherit','open','closed','','screen-shot-2016-09-17-at-9-31-25-am','','','2016-09-16 23:34:45','2016-09-16 23:34:45','',0,'http://lukeboyle.com/wp/app/uploads/2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM.jpg',0,'attachment','image/jpeg',0),(79,1,'2016-09-16 23:40:10','2016-09-16 23:40:10','','screen-shot-2016-09-17-at-9-31-25-am','','inherit','open','closed','','screen-shot-2016-09-17-at-9-31-25-am-2','','','2016-09-16 23:40:10','2016-09-16 23:40:10','',0,'http://lukeboyle.com/wp/app/uploads/2016/09/Screen-Shot-2016-09-17-at-9.31.25-AM-1.jpg',0,'attachment','image/jpeg',0),(80,1,'2016-09-17 01:57:39','2016-09-17 01:57:39','','About','','publish','closed','closed','','about','','','2016-10-01 01:22:32','2016-10-01 01:22:32','',0,'http://lukeboyle.com/wp/?page_id=80',0,'page','',0),(81,1,'2016-09-17 01:57:39','2016-09-17 01:57:39','','About','','inherit','closed','closed','','80-revision-v1','','','2016-09-17 01:57:39','2016-09-17 01:57:39','',80,'http://lukeboyle.com/wp/80-revision-v1/',0,'revision','',0),(82,1,'2016-09-17 01:58:34','2016-09-17 01:58:34',' ','','','publish','closed','closed','','82','','','2016-09-17 01:58:37','2016-09-17 01:58:37','',0,'http://lukeboyle.com/wp/82/',4,'nav_menu_item','',0),(85,1,'2016-09-18 05:50:43','2016-09-18 05:50:43',' ','','','publish','closed','closed','','85','','','2016-09-18 05:50:43','2016-09-18 05:50:43','',0,'http://lukeboyle.com/wp/',2,'nav_menu_item','',0),(86,1,'2015-09-30 06:20:13','2015-09-30 06:20:13','<strong>Earl Sweatshirt - Earl</strong>\r\n\r\n<strong>Big Boi - Sir Lucious Left Foot</strong>\r\n\r\n<strong>Nas &amp; Damian Marley - Distant Relatives</strong>\r\n\r\n<strong>The Roots - How I Got Over</strong>\r\n\r\n<strong>Kanye West - My Beautiful Dark Twisted Fantasy</strong>\r\n\r\n<strong>Kanye West &amp; Jay Z - Watch The Throne</strong>\r\n\r\n<strong>Danny Brown - XXX</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/xxx.jpg\">\r\n</a>\r\n\r\n<strong>Kendrick Lamar - Section.80</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Section80Front.jpg\">\r\n</a>\r\n\r\n<strong>Drake - Take Care</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_.jpg\">\r\n</a>\r\n\r\n<strong>A$AP Rocky - Live.Love.A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/ASAP_Rocky_Liveloveaap-front-large.jpg\">\r\n</a>\r\n\r\n<strong>Black Up - Shabazz Palaces</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Black_up.jpg\">\r\n</a>\r\n\r\n<strong>Goblin - Tyler The Creator</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Goblincover.jpg\">\r\n</a>\r\n\r\n<strong>Killer Mike - Pl3dge</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Killer_mike_pl3dge.jpg\">\r\n</a>\r\n\r\n<strong>Death Grips - Exmilitary</strong>\r\n\r\n<strong>LIL UGLY MANE - MISTA THUG ISOLATION</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/9f8f06aa6d3167d17ed1755f7c79e137.897x897x1.jpg\">\r\n</a>\r\n\r\n<strong>ScHoolboy Q - Habits and Contradictions</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-Q-Habits-And-Contradictions-608x608.jpg\">\r\n</a>\r\n\r\n<strong>GOOD Music - Cruel Summer</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/GOOD-Music-Cruel-Summer.jpg\">\r\n</a>\r\n\r\n<strong>Killer Mike - R.A.P Music</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a269b51a.jpg\">\r\n</a>\r\n\r\nDeath Grips - The Money Store\r\n\r\n<strong>Kendrick Lamar - Good Kid m.A.A.d City</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/51Zzc7PUDML.jpg\">\r\n</a>\r\n\r\n<strong>Flatbush Zombies - Better off Dead</strong>\r\n\r\n<strong>Earl Sweatshirt - Doris</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Earl_Sweatshirt_Doris.jpg\">\r\n</a>\r\n\r\n<strong>Childish Gambino - because the internet</strong>\r\n\r\n<strong>Young Fathers - Tape Two</strong>\r\n\r\n<strong>Chance The Rapper - Acid Rap</strong>\r\n\r\n<strong>A$AP Ferg - Trap Lord</strong>\r\n\r\n<strong>Tyler, The Creator - WOLF</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Wolf_Cover2.jpg\">\r\n</a>\r\n\r\n<strong>Kanye West - Yeezus</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/yeezus-306-1371753799.jpg\">\r\n</a>\r\n\r\n<strong>Pusha T - My Name Is My Name</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Pusha_T_My_Name_Is_My_Name.jpg\">\r\n</a>\r\n\r\n<strong>Busdriver - Perfect Hair</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/0003376627_10.jpg\">\r\n</a>\r\n\r\n<strong>clipping. - CLPPNG</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.1c2e09c4.jpg\">\r\n</a>\r\n\r\n<strong>ScHoolboy Q - Oxymoron</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-q-oxymoron-deluxecover.jpg\">\r\n</a>\r\n\r\n<strong>Open Mike Eagle - Dark Comedy</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/a1540567705_10.jpg\">\r\n</a>\r\n\r\n<strong>Vince Staples - Hell Can Wait EP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/The_official_cover_art_for_Vince_Staples_-Hell_Can_Wait-_EP.jpg\">\r\n</a>\r\n\r\n<strong>Run The Jewels - Run The Jewels 2</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/RunTheJewelsRTJ2.jpg\">\r\n</a>\r\n\r\n<strong>Freddie Gibbs &amp; Madlib - Pinata</strong>\r\n\r\n<strong>Tyler, The Creator - Cherry Bomb</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.eadbaa73.jpg\">\r\n</a>\r\n\r\n<strong>Lupe Fiasco - Tetsuo and Youth</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ecabec1f.jpg\">\r\n</a>\r\n\r\n<strong>Wale - The Album About Nothing</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.3bf75029.jpg\">\r\n</a>\r\n\r\n<strong>BADBADNOTGOOD and Ghostface Killa - Sour Soul</strong>\r\n\r\n<strong>Drake - If You\'re Reading This It\'s Too Late</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a8c69ffb.jpg\">\r\n</a>\r\n\r\n<strong>Joey B4DA$$ - B4DA$$</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.68e4094a.jpg\">\r\n</a>\r\n\r\n<strong>Earl Sweatshirt - I Don\'t Like Shit I Don\'t Go Outside</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.6283beab.jpg\">\r\n</a>\r\n\r\n<strong>Death Grips - The Powers That B</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artists.jpg\">\r\n</a>\r\n\r\n<strong>A$AP Rocky - At Long Last A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ce403a0f.jpg\">\r\n</a>\r\n\r\n<strong>Dr. Dre - Compton</strong>\r\n\r\n<strong>Jay Rock - 90059</strong>\r\n\r\n<strong>Vince Staples - Summertime \'06</strong>\r\n\r\n<strong>Kendrick Lamar - To Pimp A Butterfly</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.d47a5880.jpg\">\r\n</a>','Essential Hip-Hop Albums of the Decade so far.','','publish','open','open','','essential-hip-hop-albums-of-the-decade-so-far','','','2016-09-18 06:23:15','2016-09-18 06:23:15','',0,'http://lukeboyle.com/wp/blog/?p=4',0,'post','',0),(107,1,'2016-01-01 20:53:02','2016-01-01 20:53:02','<strong>10. Drake - If You\'re Reading This Its Too Late</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a8c69ffb.jpg\" rel=\"attachment wp-att-70\"><img class=\"alignnone size-medium wp-image-70\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a8c69ffb-300x300.jpg\" alt=\"homepage_large.a8c69ffb\" width=\"300\" height=\"300\" /></a>\n\n<strong>9. Joey B4DA$$ - B4DA$$</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.68e4094a.jpg\"><img class=\"alignnone size-medium wp-image-68\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.68e4094a-300x300.jpg\" alt=\"homepage_large.68e4094a\" width=\"300\" height=\"300\" /></a>\n\n[read more=\"Read more\" less=\"Read less\"]\n\n<strong>8. A$AP ROCKY - At Long Last Asap</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.ce403a0f.jpg\"><img class=\"alignnone size-medium wp-image-72\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.ce403a0f-300x300.jpg\" alt=\"homepage_large.ce403a0f\" width=\"300\" height=\"300\" /></a>\n\n<strong>7. Pusha T - Darkest Before Dawn</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2016/01/pusha-t.jpg\"><img class=\"alignnone size-medium wp-image-109\" src=\"//lukeboyle.com/blog/wp-content/uploads/2016/01/pusha-t-300x300.jpg\" alt=\"pusha-t\" width=\"300\" height=\"300\" /></a>\n\n<strong>6.  Jay Rock - 90059</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/09/JayRock90059album.jpg\"><img class=\"alignnone size-full wp-image-96\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/09/JayRock90059album.jpg\" alt=\"JayRock90059album\" width=\"300\" height=\"300\" /></a>\n\n<strong>5. Death Grips - The Powers That B</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artists.jpg\"><img class=\"alignnone size-medium wp-image-71\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artists-300x300.jpg\" alt=\"This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artist(s)\" width=\"300\" height=\"300\" /></a>\n\n<strong>4. Dr. Dre - Compton</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1.jpg\"><img class=\"alignnone size-medium wp-image-90\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-300x300.jpg\" alt=\"1035x1035-dre-compton-soundtrack (1)\" width=\"300\" height=\"300\" /></a>\n\n<strong>3. Vince Staples - Summertime \'06</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.97efc203.jpg\"><img class=\"alignnone size-medium wp-image-73\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.97efc203-300x300.jpg\" alt=\"homepage_large.97efc203\" width=\"300\" height=\"300\" /></a>\n\n<strong>2. Earl Sweatshirt - I don\'t like shit, I don\'t go outside</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.6283beab.jpg\"><img class=\"alignnone size-medium wp-image-69\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.6283beab-300x300.jpg\" alt=\"homepage_large.6283beab\" width=\"300\" height=\"300\" /></a>\n\n<strong>1. Kendrick Lamar - To Pimp a Butterfly</strong>\n\n<a href=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.d47a5880.jpg\"><img class=\"alignnone size-medium wp-image-74\" src=\"//lukeboyle.com/blog/wp-content/uploads/2015/08/homepage_large.d47a5880-300x300.jpg\" alt=\"homepage_large.d47a5880\" width=\"300\" height=\"300\" /></a>\n\n[/read]','My top 10 hip hop albums of 2015.','','publish','open','open','','my-top-10-hip-hop-albums-of-2015','','','2016-01-01 20:53:02','2016-01-01 20:53:02','',0,'http://lukeboyle.com/wp/blog/?p=107',0,'post','',0),(119,1,'2016-09-18 05:50:43','2016-09-18 05:50:43',' ','','','publish','closed','closed','','119','','','2016-09-18 05:50:43','2016-09-18 05:50:43','',0,'http://lukeboyle.com/wp/',1,'nav_menu_item','',0),(156,1,'2016-03-19 13:08:01','2016-03-19 13:08:01','After a long battle with the weird Google Task Javascript API I\'ve established a module for <a href=\"http://agander.io\">Agander</a> that has the ability to:\n\n<ul>\n<li>Authorise a user</li>\n<li>Display all tasks in a given tasklist</li>\n<li>Complete a task</li>\n</ul>\n\nAuthorising the user and displaying their tasks is reasonably easy following the quickstart guide <a href=\"https://developers.google.com/google-apps/tasks/quickstart/js#prerequisites\">here.</a>\n\nEssentially, requests are separated into two categories; either <code>tasks</code> or <code>tasklists</code>. When you have loaded the tasks api, you can see the basic structure and work from there.\n\n<a href=\"https://developers.google.com/google-apps/tasks/v1/reference/\">API Reference for JS</a>\n\nTo find the tasklists, you would use the list function (returns an array of tasklist objects).\n\n<pre><code class=\"javascript\">function listTaskLists(gAPI) {\n    var request = gAPI.client.tasks.tasklists.list({\n        \'maxResults\': 10\n    });\n    request.execute();\n}\n</code></pre>\n\nFinding tasks in a given task list operates much the same way, however, you are dealing with Google here, so it\'s tasks.tasks.list... \nBasic parameters here would just be the tasklist you want to pull tasks from, however, there are other options.\n\n<pre><code class=\"javascript\">function getTasksByListId(gAPI, tasklistId) {\n    var request = gAPI.client.tasks.tasks.list({\n        \'tasklist\': tasklistId\n    })\n        request.execute();\n</code></pre>\n\nSo, we\'ve covered getting the tasks, how do we manipulate it? That\'s where the tricky part comes in. The <code>gapi</code> client interactions we used before have an <code>update</code> method. However. Whenever I called update on anything, I got a 400 error with \'Invalid Value\'. This is a common issue I\'ve observed online with no real solutions. The gist of it is, that there is a bunch of \'required parameters\' for you to include in the request, but there is absolutely no documentation on this (thanks Google).\n\nTo get around this, we found that it was simply easier to outright request it using the request method and giving it a url.\n\nThe path parameter requires a tasklist Id, and a task id. This is basically the url that comes down with the getTasksByListId request. \nMake sure you define the method as PUT, and you pass the whole task object with your updated values to Google. In this instance, we are marking the task as \'completed\' and giving it a completed timestamp.\n\n<pre><code class=\"javascript\">function markTaskComplete(gAPI, task) {\n    gAPI.client.request({\n        path: \'https://www.googleapis.com/tasks/v1/lists/\' + tasklistId + \'/tasks/\' + task.id,\n        method: \'PUT\',\n        body: Object.assign(\n            {},\n            task.originalTask,\n            {\n                completed: new Date().toISOString(),\n                status: \'completed\'\n            }\n        )\n    }).execute();\n}\n</code></pre>\n\nNow you have a basis, the world is your oyster.','Google Task Javascript API - Invalid Value 400 Error','','publish','open','open','','using-google-task-api-with-javascript','','','2016-03-19 13:08:01','2016-03-19 13:08:01','',0,'http://lukeboyle.com/wp/blog/?p=156',0,'post','',0),(164,1,'2016-04-11 14:05:20','2016-04-11 14:05:20','Agander started in November 2015 with a vision to unify several of the productivity services I use. With Agander I could now have one tab where previously I had four or five. This post is fairly overdue, but I think it\'s worth taking the time to appreciate how far the project has come. While I did start in November, the biggest progress didn\'t start until January 2016. Working a 9-5 job and then coming home to work on Agander until 1AM has been a struggle, but the outcome is the true reward.\n\nAs of Version 0.1 in December (with vaporware calendar) -\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2015-11-09-at-3.10.53-AM.png\"><img class=\"alignnone wp-image-177 size-large\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2015-11-09-at-3.10.53-AM-1024x640.png\" alt=\"Screen Shot 2015-11-09 at 3.10.53 AM\" width=\"604\" height=\"378\" /></a>\n\nAs of Version 1.0 on March 19th -\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-03-19-at-5.59.57-PM-copy.png\"><img class=\"alignnone wp-image-178 size-large\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-03-19-at-5.59.57-PM-copy-1024x625.png\" alt=\"Screen Shot 2016-03-19 at 5.59.57 PM copy\" width=\"604\" height=\"369\" /></a>\n\nAgander has now entered a brief period of refactoring and optimisation, after which point, the next set of integrations will be developed to create a more comprehensive platform.','Agander 1.0 is now out.','','publish','open','open','','agander-1-0-now','','','2016-04-11 14:05:20','2016-04-11 14:05:20','',0,'http://lukeboyle.com/wp/blog/?p=164',0,'post','',0),(170,1,'2016-04-06 03:52:45','2016-04-06 03:52:45','I\'ve been a Spotify Premium subscriber since 2013, and I\'ve watched a gradual change from useful to straight up garbage.\n\n<strong>Adding a local file</strong>\n\nIt used to be that a paired device would appear in the sidebar and you could drag local files onto it.\n\nI\'m not sure what the justification behind it is, but the paired devices no longer appear as accessible storage, as a compromise you can now use your devices as remote controllers.\n\nThe current process to add local files to other devices is to add the local file to Spotify in your preferences, go to the local files in the sidebar (see below)\n\n<img class=\"alignnone size-medium wp-image-173\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-06-at-1.43.34-PM-300x230.png\" alt=\"Screen Shot 2016-04-06 at 1.43.34 PM\" width=\"300\" height=\"230\" />\n\nDrag the files to a playlist and then make the playlist available offline on your mobile device.\n\nWhat\'s wrong with this?\n\n<ul>\n    <li>The local files tab DOESN\'T UPDATE unless you remove the folder and re-add it in preferences, or log out/log back in. This means no updates you make locally will even be detected by Spotify</li>\n    <li>You can\'t listen download offline if you don\'t have a premium subscription.</li>\n    <li>Therefore, you cannot listen to local files without paying</li>\n</ul>\n\nI switched to Apple Music (this is not an endorsement, there\'s plenty wrong with Apple music too)\n\nThe reason I chose apple is because\n\n<ul>\n    <li>I use an iPhone/Macbook</li>\n    <li>It lets you download/sync local music even without a paid subscription</li>\n    <li>It has a music library comparable to Spotify</li>\n</ul>','Why I cancelled my Spotify subscription.','','publish','open','open','','switched-spotify-apple-music','','','2016-04-06 03:52:45','2016-04-06 03:52:45','',0,'http://lukeboyle.com/wp/blog/?p=170',0,'post','',0),(171,1,'2016-09-18 05:50:43','2016-09-18 05:50:43',' ','','','publish','closed','closed','','171','','','2016-09-18 05:50:43','2016-09-18 05:50:43','',0,'http://lukeboyle.com/wp/',3,'nav_menu_item','',0),(193,1,'2016-04-25 01:40:28','2016-04-25 01:40:28','30 days ago I decided to see how long I could keep up a streak on Github, but I didn\'t want to half ass it. 1 commit days just would not do. I quickly found that if I was going to be successful I would need to make a conscious effort to reserve time and energy each day. So my typical day became:\n\n<table>\n<thead>\n<tr>\n<td>Ride tram</td>\n<td>Work</td>\n<td>Lunch</td>\n<td>Tram home</td>\n<td>Get home</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Github Work</td>\n<td>Do my real job</td>\n<td>Smash a sandwich and do Github work</td>\n<td>Github Work</td>\n<td>Github Work and human functions</td>\n</tr>\n</tbody>\n</table>\n\nBetween all that there hasn\'t been much room to have a life. But when I look at where I was 30 days ago, I had just published Agander 1.0 and didn\'t have much else going on.\n\nSo, I needed stuff to work on.\n\n<h2>Portfolio</h2>\n\nFirst I looked to my portfolio site, which was in desperate need of an overhaul.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-10.54.45-AM.png\" rel=\"attachment wp-att-204\"><img class=\"alignnone size-large wp-image-204\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-10.54.45-AM-1024x556.png\" alt=\"Screen Shot 2016-04-25 at 10.54.45 AM\" width=\"604\" height=\"328\" /></a>\n\nIt was a column/row layout that you could traverse using keyboard controls or swipe. Pretty ordinary.\n\nAs usual, I threw myself in the deep end without any proper planning and started plugging away, and eventually I decided that I needed to do away with the rows. If each slide is a scrollable canvas the content can be much more fleshed out.\n\nSo the idea became that each slide was inlined and their position would be translated depending on which slide you have selected.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/portfolio-1.png\" rel=\"attachment wp-att-205\"><img class=\"alignnone size-large wp-image-205\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/portfolio-1-1024x576.png\" alt=\"portfolio 1\" width=\"604\" height=\"340\" /></a>\n\nThe tricky part was that when you scrolled down and pressed next, you would be in the middle of the slide. So I needed to figure out how to make it fixed while it was off-screen.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/portfolio-2.png\" rel=\"attachment wp-att-206\"><img class=\"alignnone size-large wp-image-206\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/portfolio-2-1024x576.png\" alt=\"portfolio 2\" width=\"604\" height=\"340\" /></a>\n\nWith this system, when you hit next, you\'ll be at the top of the next slide. I\'m hoping to figure out a more user friendly way of generating the slides and then I\'ll package it up and release it as a site plugin. The slide classes are applied using JavaScript so it has a nice no-js fallback where all the slides just stack naturally and you can scroll down. Next step will be to add little thumbnails to signify the slides and then force IE into no-js mode because it doesn\'t support this tech.\n\nThis is live here: http://lukeboyle.com/wp/\n\n<h2>Type with Apps</h2>\n\nThis idea was conceived during a thrilling trip to the laundromat. I had just seen this picture of someone making a message using app icons.\n\nhttp://i.imgur.com/OB2nsgy.jpg\n\nWell, what better way to spend a Sunday than recreating this? I spent the first part of the project trying to make an accurate representation of the iOS homescreen, and once that was done I had to build a library of app icons with a letter in their icon.\n\nThe process is simple, it grabs the input, splits it up into characters, and then filters out unacceptable characters. Pretty simple, but it\'s a great effect.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-11.18.02-AM.png\" rel=\"attachment wp-att-207\"><img class=\"alignnone wp-image-207 size-medium\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-11.18.02-AM-169x300.png\" alt=\"Screen Shot 2016-04-25 at 11.18.02 AM\" width=\"169\" height=\"300\" /></a>\n\nhttp://3stacks.github.io/type-with-apps/\n\n<h2>Pypes</h2>\n\nPypes is a collaborative project between me and a <a href=\"http://www.brycehanscomb.com/\">friend named Bryce</a>. I remember complaining endlessly about there being so few CMS platforms that just do what I want it to do and have a reasonable templating system. So we decided to make one.\n\nNot being people to shy away from a challenge, we jumped right into it. On the first night we defined a template syntax using pipes <code>||| header |||</code>. Pypes has a function that processes your the view file, finds the <code>|||</code> and then searches for the file you defined inside it.\n\nThe only thing you need to do to make a new partial is make a php file in the partials folder and then reference it in the view. Super simple.\n\nWhile Bryce was working hard to make the RESTful API, I got to work on the admin panel (Pypes Face) which was built in Angular. The admin panel has the ability to view all posts, edit posts, create new posts and delete posts. Pypes Face has an API client for the basic http requests, and then the controllers use those functions with Promises to do things such as generating a permalink and checking if it is unique. This project is constantly evolving and we\'re hoping to package it up and let people use it.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-11.29.31-AM.png\" rel=\"attachment wp-att-209\"><img src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-11.29.31-AM-1024x675.png\" alt=\"Screen Shot 2016-04-25 at 11.29.31 AM\" width=\"604\" height=\"398\" class=\"alignnone size-large wp-image-209\" /></a>\n\nI also made a text to <a href=\"http://3stacks.github.io/unicode-full-width/\">unicode full-width translator</a> and accomplished a lot on <a href=\"https://agander.io\">Agander</a>.\n\nWhen all is said and done, in the last month I have doubled my contributions in the last 12 months and I\'ve started several interesting projects.\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-10.35.06-AM.png\" rel=\"attachment wp-att-210\"><img src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/04/Screen-Shot-2016-04-25-at-10.35.06-AM-1024x403.png\" alt=\"Screen Shot 2016-04-25 at 10.35.06 AM\" width=\"604\" height=\"238\" class=\"alignnone size-large wp-image-210\" /></a>\n\nIf you are going to attempt something like this, I would absolutely make a plan before you begin. I found after the first two weeks I started to get a general fatigue and didn\'t want to work on the projects I currently had running. To avoid this you should map out what you want to accomplish because it\'ll make it much more gratifying as you progress through the month.\n\nThe value of this experiment is incalculable. I\'ve learned so much and I hope to continue my streak, however, it might be time for a holiday.','I forced myself to make meaningful Github commits for 30 days.','','publish','open','open','','forced-make-meaningful-github-commits-30-days','','','2016-04-25 01:40:28','2016-04-25 01:40:28','',0,'http://lukeboyle.com/wp/blog/?p=193',0,'post','',0),(199,1,'2016-04-20 06:50:38','2016-04-20 06:50:38','When you request a Google Calendar event it will come with a colorId which is either undefined if user didn\'t select a colour, or between one and 11 if they did. Since I needed these for Agander, I decided to collate these for the curious. These are the corresponding colours used in the Google Calendar app.\n\n<table>\n    <thead>\n    <tr>\n        <td>\n            Color ID\n        </td>\n        <td>\n            Color Name\n        </td>\n        <td>\n            Hex Code\n        </td>\n        <td>\n            Sample\n        </td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>\n            undefined\n        </td>\n        <td>\n            Who knows\n        </td>\n        <td>\n            #039be5\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--7\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            1\n        </td>\n        <td>\n            Lavender\n        </td>\n        <td>\n            #7986cb\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--1\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            2\n        </td>\n        <td>\n            Sage\n        </td>\n        <td>\n            #33b679\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--2\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            3\n        </td>\n        <td>\n            Grape\n        </td>\n        <td>\n            #8e24aa\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--3\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            4\n        </td>\n        <td>\n            Flamingo\n        </td>\n        <td>\n            #e67c73\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--4\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            5\n        </td>\n        <td>\n            Banana\n        </td>\n        <td>\n            #f6c026\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--5\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            6\n        </td>\n        <td>\n            Tangerine\n        </td>\n        <td>\n            #f5511d\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--6\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            7\n        </td>\n        <td>\n            Peacock\n        </td>\n        <td>\n            #039be5\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--7\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            8\n        </td>\n        <td>\n            Graphite\n        </td>\n        <td>\n            #616161\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--8\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            9\n        </td>\n        <td>\n            Blueberry\n        </td>\n        <td>\n            #3f51b5\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--9\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            10\n        </td>\n        <td>\n            Basil\n        </td>\n        <td>\n            #0b8043\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--10\">\n                &nbsp;\n            </div>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            11\n        </td>\n        <td>\n            Tomato\n        </td>\n        <td>\n            #d60000\n        </td>\n        <td class=\"color-sample\">\n            <div class=\"color-sample--11\"\n            &nbsp;>\n            </div>\n        </td>\n    </tr>\n    </tbody>\n</table>','Google Calendar API - ColorId','','publish','open','open','','google-calendar-api-colorid','','','2016-04-20 06:50:38','2016-04-20 06:50:38','',0,'http://lukeboyle.com/wp/blog/?p=199',0,'post','',0),(218,1,'2016-12-16 14:40:48','2016-12-16 14:40:48','Grid based CSS Frameworks are a dime a dozen, but are any of them actually good?\n\nHere I\'m presenting what I think are good alternatives to Bootstrap.\n\n<h2> Zurb Foundation </h2>\n\n<h2> Bulma.io </h2>\n\nA robust alternative to\n\n<strong>Why it\'s good</strong>\n\n<h2> Skeleton.css </h2>\n\nA super lightweight drop in framework which is great if you want to get started really quickly.\n\n<strong>Why it\'s good</strong>\n\nSince it targets elements instead of classes, it will instantly make your site look better, so for speedy implementation it doesn\'t really get better.\n\nHowever, beyond this, it takes a different stance on the nomenclature. Whereas in Foundation for Sites, you can use column or columns in the classes, it doesn\'t really make sense (because the sizing is done using large-3, small-12 etc). In Skeleton you use \'one column\' or \'two columns\'.\n\n<strong> What it\'s lacking </strong>\n\nSkeleton doesn\'t have any breakpoints out of the box so you can\'t size the columns with classes alone and you have to use raw media queries.\n\n<strong> Warning </strong>\n\nSkeleton is no longer maintained, so you shouldn\'t expect any updates or new features.','Alternatives to Bootstrap CSS Framework','','draft','open','open','','alternatives-to-bootstrap','','','2016-12-16 14:41:08','2016-12-16 14:41:08','Grid based CSS Frameworks are a dime a dozen, but are any of them actually good?\r\n\r\nHere I\'m presenting what I think are good alternatives to Bootstrap.\r\n\r\n<h2> Zurb Foundation </h2>\r\n\r\n<h2> Bulma.io </h2>\r\n\r\nA robust alternative to\r\n\r\n<strong>Why it\'s good</strong>\r\n\r\n<h2> Skeleton.css </h2>\r\n\r\nA super lightweight drop in framework which is great if you want to get started really quickly.\r\n\r\n<strong>Why it\'s good</strong>\r\n\r\nSince it targets elements instead of classes, it will instantly make your site look better, so for speedy implementation it doesn\'t really get better.\r\n\r\nHowever, beyond this, it takes a different stance on the nomenclature. Whereas in Foundation for Sites, you can use column or columns in the classes, it doesn\'t really make sense (because the sizing is done using large-3, small-12 etc). In Skeleton you use \'one column\' or \'two columns\'.\r\n\r\n<strong> What it\'s lacking </strong>\r\n\r\nSkeleton doesn\'t have any breakpoints out of the box so you can\'t size the columns with classes alone and you have to use raw media queries.\r\n\r\n<strong> Warning </strong>\r\n\r\nSkeleton is no longer maintained, so you shouldn\'t expect any updates or new features.',0,'http://lukeboyle.com/wp/blog/?p=218',0,'post','',0),(224,1,'2016-05-02 22:15:27','2016-05-02 22:15:27','After much frustration with this issue, I found this section in the react material-ui documentation - React-Tap-Event-Plugin. The custom components like the select field don\'t work well with the traditional onClick listener, so as a temporary fix, the react-tap-event-plugin must be included in your react project. The dependency is supposedly a temporary fix.\r\n\r\nSee the repo here: <a href=\"https://github.com/zilverline/react-tap-event-plugin\" target=\"_blank\">https://github.com/zilverline/react-tap-event-plugin</a>','React Material-UI touch events not firing','','publish','open','open','','react-material-ui-touch-events-not-firing','','','2016-09-24 02:32:44','2016-09-24 02:32:44','',0,'http://lukeboyle.com/wp/blog/?p=224',0,'post','',0),(230,1,'2016-06-07 23:21:12','2016-06-07 23:21:12','It\'s been about 2 and a half months since the first official full release of Agander went live, and it\'s out with the old in with the new.\n\n<h2>What\'s new?</h2>\n\nOutwardly, the changes are minimal. The most obvious change is that the add module dialogue is now a modal instead of a floating column element. Various styles have been optimised and reduced as much as possible so the button sizes specifically are more consistent across browsers.\n\n<h2>So why the new version?</h2>\n\nAround three quarters of the way through version 1 it became apparent that the app was outgrowing the constraints of the Vue system I had created, so the app has been rebuilt in React.js and Redux.\n\n<strong>The standard module model</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/05/Screen-Shot-2016-05-30-at-11.43.46-PM.png\" rel=\"attachment wp-att-234\"><img src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2016/05/Screen-Shot-2016-05-30-at-11.43.46-PM.png\" alt=\"Screen Shot 2016-05-30 at 11.43.46 PM\" width=\"298\" height=\"238\" class=\"alignnone size-full wp-image-234\" /></a>\n\nUsing this model, every module has a content object and an event object under it. The content object handles calendar events, Asana workspaces and so on. Adhering to this model will allow for rapid development of new modules in future.\n\n<strong>Events</strong>\n\nThe event system is simulated using the Redux middleware called Thunk. The base dispatch will set the event to executing and it will continue to execute until it is told to stop. If error is true, the event stops executing and and the error response is populated in the response key. Error false means the event resolved correctly and the response is the delicious events or tasks.\n\nReact also makes rendering the correct component a breeze. I know to hide all content if the user hasn\'t authorised, and if the event is executing. Error messages are nice and simple too.\n\nhttps://youtu.be/T43RzjxwBys\n\n<strong>Next Steps</strong>\n\nAgander is being temporarily put on hold to focus on other projects - but in its current state it is very much usable. Aside from bug fixes, there will be no new features for at least a couple months while I\'m working on other things. I\'m really happy with how far the app has come and I can finally use it for my own agenda tracking.','Agander 2.0 is now out.','','publish','open','open','','agander-2-0-now','','','2016-06-07 23:21:12','2016-06-07 23:21:12','',0,'http://lukeboyle.com/wp/blog/?p=230',0,'post','',0),(238,1,'2016-08-11 01:18:56','2016-08-11 01:18:56','Having built and published a few React components to npm, in keeping with the plug-n-play spirit of npm, I have what I believe to be a very simple implementation for both the development and installation of components.\n\nI published a boilerplate project to Git/npm and this is now my go-to whenever I need to put together an external component. <a href=\"https://www.npmjs.com/package/@lukeboyle/react-component-boilerplate\" target=\"_blank\">https://www.npmjs.com/package/@lukeboyle/react-component-boilerplate</a>\n\nThe basic concept is that you have an index.jsx in a \'src\' folder. This should be transpiled to ES5 and output to the root directory called \'index.js\'. In this instance, index.js is the \"main\" in your package.json. You may notice the entry \"jsnext:main\" in the package which points to the jsx file. This convention was established by rollup (<a href=\"https://github.com/rollup/rollup/wiki/jsnext:main\" target=\"_blank\">https://github.com/rollup/rollup/wiki/jsnext:main</a>) as an entry point for ES6 modules. The idea is that when you bundle using Rollup (and the ES6 import/export syntax), your ES6 module will be used instead of the ES5 one.\n\nGiven that we\'re still largely in the ES5 age, the rollup config generates an ES5 version (which is the main entry point) and an ES6 version in the src so you can feel free to write all the JSX goodness you please.\n\nThe folder structure should roughly look like this:\n\n<pre>\nproject-root\n|--src\n|  |--index.jsx\n|--index.js\n|--rollup.config.js (OR)\n|--webpack.config.js\n|--demo\n|  |--dist\n|     |--build files\n|  |--src\n|     |--src files\n</pre>\n\n<pre>\nindex.jsx\n\nimport * as React from \'react\';\n\nexport function ReactComponent(props) {\n    return (<div>\n        Job\'s Done\n    </div>)\n}\n\nexport default ReactComponent;\n</pre>\n\nAlso, to play your part in improving our package ecosystem, consider namespacing your package for npm: <a href=\"http://blog.npmjs.org/post/116936804365/solving-npms-hard-problem-naming-packages\" target=\"_blank\">http://blog.npmjs.org/post/116936804365/solving-npms-hard-problem-naming-packages</a>','Publishing React components to npm','','publish','open','open','','publishing-react-components-npm','','','2016-08-11 01:18:56','2016-08-11 01:18:56','',0,'http://lukeboyle.com/wp/blog/?p=238',0,'post','',0),(242,1,'2016-11-14 02:22:18','2016-11-14 02:22:18','15 - The I.L.Y\'s - Scum With Boundaries\n\n<img class=\"alignnone size-full wp-image-402\" src=\"http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\" alt=\"artworks-000171795169-xpeqqm-t500x500\" width=\"600\" height=\"600\" />\n\n14 - Ab-Soul - Do What Thou Wilt.\n\n<img class=\"alignnone size-full wp-image-401\" src=\"http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg\" alt=\"dwtw\" width=\"600\" height=\"600\" />\n\n13 - Kendrick Lamar - Untitled, Unmastered\n\n<img class=\"alignnone size-full wp-image-400\" src=\"http://lukeboyle.com/app/uploads/2016/07/untitled.jpg\" alt=\"untitled\" width=\"600\" height=\"600\" />\n\n12 - Open Mike Eagle - Hella Personal Film Festival\n\n<img class=\"alignnone size-full wp-image-399\" src=\"http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg\" alt=\"a1158245013_10\" width=\"600\" height=\"600\" />\n\n11 - A Tribe Called Quest - We got it from Here... Thank You 4 Your Service<i></i>\n\n<img class=\"alignnone size-full wp-image-398\" src=\"http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\" alt=\"09e256ce885fe6b3cf181239c3b3231c-1000x1000x1\" width=\"600\" height=\"600\" />\n\n10 - Kanye West - The Life of Pablo\n\n<img class=\"alignnone size-full wp-image-397\" src=\"http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg\" alt=\"the_life_of_pablo_alternate\" width=\"600\" height=\"600\" />\n\n9 - YG - Still Brazy\n\n<img class=\"alignnone size-full wp-image-396\" src=\"http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg\" alt=\"e308ca36\" width=\"600\" height=\"600\" />\n\n8 - Isaiah Rashad - The Sun\'s Tirade\n\n<img class=\"alignnone size-full wp-image-395\" src=\"http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg\" alt=\"thesunstirade\" width=\"600\" height=\"600\" />\n\n7 - Danny Brown - Atrocity Exhibition\n\n<img class=\"alignnone size-full wp-image-394\" src=\"http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg\" alt=\"atrocityexhibition\" width=\"600\" height=\"600\" />\n\n6 - NxWorries - Yes Lawd\n\n<img class=\"alignnone size-full wp-image-393\" src=\"http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\" alt=\"nxworries-anderson-paak-knxwledge-yes-lawd-cover-art\" width=\"600\" height=\"600\" />\n\n5 - Death Grips - Bottomless Pit\n\n<img class=\"alignnone size-full wp-image-392\" src=\"http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg\" alt=\"deathgripscoverbottom\" width=\"600\" height=\"600\" />\n\n4 - Flatbush Zombies - 3001: A Laced Oddysey\n\n<img class=\"alignnone size-full wp-image-391\" src=\"http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg\" alt=\"3001alaced_odyssey\" width=\"600\" height=\"600\" />\n\n3 - ScHoolboy Q - Blank Face LP\n\n<img class=\"alignnone size-full wp-image-390\" src=\"http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg\" alt=\"blank-face-lp\" width=\"600\" height=\"600\" />\n\n2 - Frank Ocean - Blonde\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg\" alt=\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df\" width=\"600\" height=\"600\" class=\"alignnone size-full wp-image-403\" />\n\n1 - Anderson .Paak - Malibu\n\n<img class=\"alignnone size-full wp-image-389\" src=\"http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg\" alt=\"anderson-paak-malibu-cover-art\" width=\"600\" height=\"600\" />','Top 15 Albums of 2016','','publish','open','open','','top-albums-2016','','','2016-12-14 01:48:15','2016-12-14 01:48:15','15 - The I.L.Y\'s - Scum With Boundaries\r\n\r\n<img class=\"alignnone size-full wp-image-402\" src=\"http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\" alt=\"artworks-000171795169-xpeqqm-t500x500\" width=\"600\" height=\"600\" />\r\n\r\n14 - Ab-Soul - Do What Thou Wilt.\r\n\r\n<img class=\"alignnone size-full wp-image-401\" src=\"http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg\" alt=\"dwtw\" width=\"600\" height=\"600\" />\r\n\r\n13 - Kendrick Lamar - Untitled, Unmastered\r\n\r\n<img class=\"alignnone size-full wp-image-400\" src=\"http://lukeboyle.com/app/uploads/2016/07/untitled.jpg\" alt=\"untitled\" width=\"600\" height=\"600\" />\r\n\r\n12 - Open Mike Eagle - Hella Personal Film Festival\r\n\r\n<img class=\"alignnone size-full wp-image-399\" src=\"http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg\" alt=\"a1158245013_10\" width=\"600\" height=\"600\" />\r\n\r\n11 - A Tribe Called Quest - We got it from Here... Thank You 4 Your Service<i></i>\r\n\r\n<img class=\"alignnone size-full wp-image-398\" src=\"http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\" alt=\"09e256ce885fe6b3cf181239c3b3231c-1000x1000x1\" width=\"600\" height=\"600\" />\r\n\r\n10 - Kanye West - The Life of Pablo\r\n\r\n<img class=\"alignnone size-full wp-image-397\" src=\"http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg\" alt=\"the_life_of_pablo_alternate\" width=\"600\" height=\"600\" />\r\n\r\n9 - YG - Still Brazy\r\n\r\n<img class=\"alignnone size-full wp-image-396\" src=\"http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg\" alt=\"e308ca36\" width=\"600\" height=\"600\" />\r\n\r\n8 - Isaiah Rashad - The Sun\'s Tirade\r\n\r\n<img class=\"alignnone size-full wp-image-395\" src=\"http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg\" alt=\"thesunstirade\" width=\"600\" height=\"600\" />\r\n\r\n7 - Danny Brown - Atrocity Exhibition\r\n\r\n<img class=\"alignnone size-full wp-image-394\" src=\"http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg\" alt=\"atrocityexhibition\" width=\"600\" height=\"600\" />\r\n\r\n6 - NxWorries - Yes Lawd\r\n\r\n<img class=\"alignnone size-full wp-image-393\" src=\"http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\" alt=\"nxworries-anderson-paak-knxwledge-yes-lawd-cover-art\" width=\"600\" height=\"600\" />\r\n\r\n5 - Death Grips - Bottomless Pit\r\n\r\n<img class=\"alignnone size-full wp-image-392\" src=\"http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg\" alt=\"deathgripscoverbottom\" width=\"600\" height=\"600\" />\r\n\r\n4 - Flatbush Zombies - 3001: A Laced Oddysey\r\n\r\n<img class=\"alignnone size-full wp-image-391\" src=\"http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg\" alt=\"3001alaced_odyssey\" width=\"600\" height=\"600\" />\r\n\r\n3 - ScHoolboy Q - Blank Face LP\r\n\r\n<img class=\"alignnone size-full wp-image-390\" src=\"http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg\" alt=\"blank-face-lp\" width=\"600\" height=\"600\" />\r\n\r\n2 - Frank Ocean - Blonde\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg\" alt=\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df\" width=\"600\" height=\"600\" class=\"alignnone size-full wp-image-403\" />\r\n\r\n1 - Anderson .Paak - Malibu\r\n\r\n<img class=\"alignnone size-full wp-image-389\" src=\"http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg\" alt=\"anderson-paak-malibu-cover-art\" width=\"600\" height=\"600\" />',0,'http://lukeboyle.com/wp/blog/?p=242',0,'post','',0),(286,1,'2016-08-11 00:37:34','2016-08-11 00:37:34','<pre class=\"disclaimer-block\">\nDisclaimer: Shopify is not good. I recommend steering clear and opting for one of many alternatives. It\'s an extremely closed platform that doesn\'t encourage innovation and naturally leans towards bad practice. Given this, if you still have to use it, read on.\n</pre>\n\nIn Shopify, there is a native (albeit \'unsupported\') filtering system. Native Filtering is based on the tags you specify on your product. If you go to your collection, you can link the user to a tag and Shopify can filter product with simple Javascript like so; collections/collection-name/tag-one/tag-two. Now given that in a collection you have access to collection.all_vendors and all_types, WHY OH WHY, is there not native filtering based on that. Filtering could EASILY be dynamic if Shopify cared enough to implement that.\n\nThe \'official\' solution (as per the documentation; <a href=\"https://help.shopify.com/themes/customization/collections/filtering-a-collection-with-multiple-tag-drop-down\" target=\"_blank\">https://help.shopify.com/themes/customization/collections/filtering-a-collection-with-multiple-tag-drop-down</a>) is to make several drop downs and set tags to be a list of tags you want to allow filtering by (e.g. tags = \"red\", \"blue\", \"green\"). So next week when I add a yellow shirt I have to go back into the pits and add another tag? Not happening.\n\nThis is how I make filters dynamic. After searching for hours, I can conclusively say that there is no open source solution for this, and given the constraints of the garbage liquid templating engine, I can confidently say that this is the least convoluted solution available.\n\nAll it takes is implementing a rigid structure in your tagging system, so this is much easier on a new store.\n\nThe tag structure is basically as such: category:tagName. Let\'s say you want to filter your products by brand. In your product page, on the tags section, enter brand:brandName. Same goes for <code>size:1</code> or <code>color:blue</code>. It\'s up to you how many you use, because I guarantee your collection sorting template is going to be a BIG file.\n\nThe best part about all this is that there\'s no array filter or equivalent method in liquid, so we\'re going to have to do some crazy shit.\n\n<pre>\n{% for tag in collection.all_tags %} <-- Start iterating over all tags\n  {% if tag contains \'style\' %} <-- Check if it contains your keyword\n    {% capture raw_style_tags %} <-- Initialise the variable `raw_style_tags`\n      {{ raw_style_tags | append : tag | append: \', \' }} <-- Build a string of tags separated by commas\n    {% endcapture %}\n    {% assign style_tags = raw_style_tags | split: \', \' %} <-- Split the strings on the commas to build a new array\n  {% endif %}\n{% endfor %}\n</pre>\n\nThe variable <code>style_tags</code> is now an array of all tags including \'style:\'. Now, you will make a select field where the options are all of your style tags. Note that current_tags returns a list of the tags you are currently filtering by.\n\n<pre>\n<label>\n  Shop by style\n  <select class=\"coll-filter\">\n    <option value=\"\">All</option>\n      {% for t in style_tags %}\n        {% assign tag = t | strip %}\n    {% if current_tags contains tag %} <-- check if the tag is currently active - applies selected attribute\n      <option value=\"{{ tag | handle }}\" selected>{{ tag | remove: \'style:\' }}</option>\n    {% elsif product_tags contains tag %} <-- else, just make it an option\n      <option value=\"{{ tag | handle }}\">{{ tag | remove: \'style:\' }}</option> <-- use the remove filter to have just the tag name\n    {% endif %}\n      {% endfor %}\n  </select>\n</label>\n</pre>\n\nIf you include the Javascript from the Shopify docs, it will automatically listen for changes to that .coll-filter. This way, if you ever add any more tags under the <code>style:</code> category, you won\'t have to update your view.\n\nAnd the best part is, you can just add a new category in your product page, copy paste those lines of code and change \'style\' to whatever your new category is called.\n\nI must reiterate, you should only use Shopify if you have no other choice.\n\nCheers!','Dynamic Product Filtering in Shopify','','publish','open','open','','dynamic-product-filtering-shopify','','','2016-08-11 00:37:34','2016-08-11 00:37:34','',0,'http://lukeboyle.com/wp/blog/?p=286',0,'post','',0),(302,1,'2017-01-31 02:32:30','0000-00-00 00:00:00','I\'ve recently taken to a simpler approach to the build process for front end projects. That is, not using Grunt or Gulp to trigger build tasks, and just using npm scripts.\n\nLet\'s take the folder structure for a project I recently worked on (<a href=\"https://github.com/stak-digital/split-visualiser\">https://github.com/stak-digital/split-visualiser</a>)\n\n.\n&#9500;&#9472;&#9472; src                      # Application source code\n&#9474;   &#9500;&#9472;&#9472; html                 # All HTML view files live under here\n&#9474;   &#9500;&#9472;&#9472; img                  # Application bootstrap and rendering\n&#9474;   &#9500;&#9472;&#9472; js                   # Global Reusable Presentational Components\n&#9474;   &#9492;&#9472;&#9472; sass           # Global Reusable Container Components\n&#9492;&#9472;&#9472; package.json','Developing without a task runner','','draft','open','open','','developing-without-task-runner','','','2017-01-31 02:32:30','2017-01-31 02:32:30','I\'ve recently taken to a simpler approach to the build process for front end projects. That is, not using Grunt or Gulp to trigger build tasks, and just using npm scripts.\r\n\r\nLet\'s take the folder structure for a project I recently worked on ([https://github.com/stak-digital/split-visualiser](https://github.com/stak-digital/split-visualiser))\r\n\r\n.\r\n&#9500;&#9472;&#9472; src                      # Application source code\r\n&#9474;   &#9500;&#9472;&#9472; html                 # All HTML view files live under here\r\n&#9474;   &#9500;&#9472;&#9472; img                  # Application bootstrap and rendering\r\n&#9474;   &#9500;&#9472;&#9472; js                   # Global Reusable Presentational Components\r\n&#9474;   &#9492;&#9472;&#9472; sass           # Global Reusable Container Components\r\n&#9492;&#9472;&#9472; package.json',0,'http://lukeboyle.com/wp/blog/?p=302',0,'post','',0),(310,1,'2016-09-22 01:10:37','2016-09-22 01:10:37','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\n\nThe structure of the data looked like this:\n\n<pre>\n    input = [\n        {\n            text: \"asdfg\",\n            children: [\n                {\n                    text: \"asdfg\",\n                    children: [...]\n                }\n            ]\n        }   \n    ]\n</pre>\n\nEach time you step into the <code>children</code> part, that represents another level of depth. The numbers input might look like <code>1.1</code> which would be the first piece of text from the second level of the object (0-based). Enter the function below...\n\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\n\nThis checks if:\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\n2. There are no children.\n\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function.\n\nEdit: For a more relatable example, here is a function that can calculate how many months it will take you to pay off your credit card given a debt amount and interest rate.\n\n<script src=\"https://gist.github.com/3stacks/beb35a65359ecde0d8dac6d833249857.js\"></script>\n\nYou initialise the month parameter with 1 (first month) and then it will call until there is no more debt. This is a fine use case for a <code>while</code> loop, so if you feel like using it, feel free. For another example of a good use case for recursion, see this article: <a href=\"http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/\">http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/</a>.','Practical recursive functions in JavaScript','','publish','open','open','','practical-recursive-functions-javascript','','','2016-09-26 07:46:11','2016-09-26 07:46:11','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\r\n\r\nThe structure of the data looked like this:\r\n<pre>\r\n    input = [\r\n        {\r\n            text: \"asdfg\",\r\n            children: [\r\n                {\r\n                    text: \"asdfg\",\r\n                    children: [...]\r\n                }\r\n            ]\r\n        }   \r\n    ]\r\n</pre>\r\n\r\nEach time you step into the `children` part, that represents another level of depth. The numbers input might look like `1.1` which would be the first piece of text from the second level of the object (0-based). Enter the function below...\r\n\r\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\r\n\r\nThis checks if:\r\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\r\n2. There are no children.\r\n\r\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function. \r\n\r\nEdit: For a more relatable example, here is a function that can calculate how many months it will take you to pay off your credit card given a debt amount and interest rate.\r\n\r\n<script src=\"https://gist.github.com/3stacks/beb35a65359ecde0d8dac6d833249857.js\"></script>\r\n\r\nYou initialise the month parameter with 1 (first month) and then it will call until there is no more debt. This is a fine use case for a `while` loop, so if you feel like using it, feel free. For another example of a good use case for recursion, see this article: [http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/](http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/).',0,'http://lukeboyle.com/wp/blog/?p=310',0,'post','',0),(312,1,'2015-08-03 02:52:05','2015-08-03 02:52:05','','distant relatives','','inherit','open','open','','distant-relatives','','','2015-08-03 02:52:05','2015-08-03 02:52:05','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/distant-relatives-1.jpg',0,'attachment','image/jpeg',0),(313,1,'2015-08-03 02:52:08','2015-08-03 02:52:08','','earl earl','','inherit','open','open','','earl-earl','','','2015-08-03 02:52:08','2015-08-03 02:52:08','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/earl-earl-1.jpg',0,'attachment','image/jpeg',0),(314,1,'2015-08-21 15:30:21','2015-08-21 15:30:21','','0003376627_10-1024x1024','','inherit','open','closed','','0003376627_10-1024x1024','','','2015-08-21 15:30:21','2015-08-21 15:30:21','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/0003376627_10-1024x1024.jpg',0,'attachment','image/jpeg',0),(315,1,'2015-08-21 15:30:21','2015-08-21 15:30:21','','0003376627_10-640x250','','inherit','open','closed','','0003376627_10-640x250','','','2015-08-21 15:30:21','2015-08-21 15:30:21','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/0003376627_10-640x250.jpg',0,'attachment','image/jpeg',0),(316,1,'2015-08-10 00:01:53','2015-08-10 00:01:53','','1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135','','inherit','open','closed','','1c72a048c1ced01428cecde7cf8221ba-1000x1000x1-300x135','','','2015-08-10 00:01:53','2015-08-10 00:01:53','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x135.jpg',0,'attachment','image/jpeg',0),(317,1,'2015-08-10 00:01:53','2015-08-10 00:01:53','','1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300','','inherit','open','closed','','1c72a048c1ced01428cecde7cf8221ba-1000x1000x1-300x300','','','2015-08-10 00:01:53','2015-08-10 00:01:53','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300.jpg',0,'attachment','image/jpeg',0),(318,1,'2015-08-10 00:01:48','2015-08-10 00:01:48','','1c72a048c1ced01428cecde7cf8221ba.1000x1000x1','','inherit','open','closed','','1c72a048c1ced01428cecde7cf8221ba-1000x1000x1','','','2015-08-10 00:01:48','2015-08-10 00:01:48','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1.jpg',0,'attachment','image/jpeg',0),(319,1,'2015-08-06 04:51:52','2015-08-06 04:51:52','','3aigo63ters0f3mwk7jaseng0.400x400x7','','inherit','open','closed','','3aigo63ters0f3mwk7jaseng0-400x400x7','','','2015-08-06 04:51:52','2015-08-06 04:51:52','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/3aigo63ters0f3mwk7jaseng0.400x400x7.gif',0,'attachment','image/gif',0),(320,1,'2015-08-09 23:56:25','2015-08-09 23:56:25','','51Zzc7PUDML','','inherit','open','closed','','51zzc7pudml','','','2015-08-09 23:56:25','2015-08-09 23:56:25','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/51Zzc7PUDML.jpg',0,'attachment','image/jpeg',0),(321,1,'2015-08-09 06:44:40','2015-08-09 06:44:40','','91gMAln-dPL._SL1500_-300x300','','inherit','open','closed','','91gmaln-dpl-_sl1500_-300x300','','','2015-08-09 06:44:40','2015-08-09 06:44:40','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_-300x300.jpg',0,'attachment','image/jpeg',0),(322,1,'2015-08-09 06:44:40','2015-08-09 06:44:40','','91gMAln-dPL._SL1500_-50x50','','inherit','open','closed','','91gmaln-dpl-_sl1500_-50x50','','','2015-08-09 06:44:40','2015-08-09 06:44:40','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_-50x50.jpg',0,'attachment','image/jpeg',0),(323,1,'2015-08-09 23:53:50','2015-08-09 23:53:50','','95469-300x300','','inherit','open','closed','','95469-300x300','','','2015-08-09 23:53:50','2015-08-09 23:53:50','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/95469-300x300.jpg',0,'attachment','image/jpeg',0),(324,1,'2015-08-09 06:44:46','2015-08-09 06:44:46','','ASAP_Rocky_Liveloveaap-front-large-50x50','','inherit','open','closed','','asap_rocky_liveloveaap-front-large-50x50','','','2015-08-09 06:44:46','2015-08-09 06:44:46','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/ASAP_Rocky_Liveloveaap-front-large-50x50.jpg',0,'attachment','image/jpeg',0),(325,1,'2015-08-09 06:46:16','2015-08-09 06:46:16','','030911-2_1up [Converted]','','inherit','open','closed','','030911-2_1up-converted','','','2015-08-09 06:46:16','2015-08-09 06:46:16','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/08/Black_up-300x300.jpg',0,'attachment','image/jpeg',0),(326,1,'2016-09-18 06:18:58','2016-09-18 06:18:58','','1035x1035-dre-compton-soundtrack-1-1024x1024','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-1024x1024','','','2016-09-18 06:18:58','2016-09-18 06:18:58','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-1024x1024.jpg',0,'attachment','image/jpeg',0),(327,1,'2016-09-18 06:19:03','2016-09-18 06:19:03','','1035x1035-dre-compton-soundtrack-1-150x150','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-150x150','','','2016-09-18 06:19:03','2016-09-18 06:19:03','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-150x150.jpg',0,'attachment','image/jpeg',0),(328,1,'2016-09-18 06:19:03','2016-09-18 06:19:03','','1035x1035-dre-compton-soundtrack-1-300x135','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-300x135','','','2016-09-18 06:19:03','2016-09-18 06:19:03','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-300x135.jpg',0,'attachment','image/jpeg',0),(329,1,'2016-09-18 06:19:07','2016-09-18 06:19:07','','1035x1035-dre-compton-soundtrack-1-300x300','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-300x300','','','2016-09-18 06:19:07','2016-09-18 06:19:07','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-300x300.jpg',0,'attachment','image/jpeg',0),(330,1,'2016-09-18 06:19:08','2016-09-18 06:19:08','','1035x1035-dre-compton-soundtrack-1-50x50','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-50x50','','','2016-09-18 06:19:08','2016-09-18 06:19:08','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-50x50.jpg',0,'attachment','image/jpeg',0),(331,1,'2016-09-18 06:19:08','2016-09-18 06:19:08','','1035x1035-dre-compton-soundtrack-1-640x250','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1-640x250','','','2016-09-18 06:19:08','2016-09-18 06:19:08','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1-640x250.jpg',0,'attachment','image/jpeg',0),(332,1,'2016-09-18 06:19:12','2016-09-18 06:19:12','','1035x1035-dre-compton-soundtrack-1','','inherit','open','closed','','1035x1035-dre-compton-soundtrack-1','','','2016-09-18 06:19:12','2016-09-18 06:19:12','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/1035x1035-dre-compton-soundtrack-1.jpg',0,'attachment','image/jpeg',0),(333,1,'2016-09-18 06:19:20','2016-09-18 06:19:20','','JayRock90059album-150x150','','inherit','open','closed','','jayrock90059album-150x150','','','2016-09-18 06:19:20','2016-09-18 06:19:20','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/JayRock90059album-150x150.jpg',0,'attachment','image/jpeg',0),(334,1,'2016-09-18 06:19:20','2016-09-18 06:19:20','','JayRock90059album','','inherit','open','closed','','jayrock90059album','','','2016-09-18 06:19:20','2016-09-18 06:19:20','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/JayRock90059album.jpg',0,'attachment','image/jpeg',0),(335,1,'2016-09-18 06:19:22','2016-09-18 06:19:22','','patchwork-150x150','','inherit','open','closed','','patchwork-150x150','','','2016-09-18 06:19:22','2016-09-18 06:19:22','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/patchwork-150x150.jpeg',0,'attachment','image/jpeg',0),(336,1,'2016-09-18 06:19:22','2016-09-18 06:19:22','','patchwork-300x150','','inherit','open','closed','','patchwork-300x150','','','2016-09-18 06:19:22','2016-09-18 06:19:22','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/patchwork-300x150.jpeg',0,'attachment','image/jpeg',0),(337,1,'2016-09-18 06:19:25','2016-09-18 06:19:25','','patchwork','','inherit','open','closed','','patchwork','','','2016-09-18 06:19:25','2016-09-18 06:19:25','',0,'http://lukeboyle.com/wp/wp-content/uploads/2015/09/patchwork.jpeg',0,'attachment','image/jpeg',0),(338,1,'2016-09-18 06:21:37','2016-09-18 06:21:37','<strong>Earl Sweatshirt - Earl</strong>\n\n<img class=\" size-medium wp-image-6 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/earl-earl-300x300.jpg\" alt=\"earl earl\" width=\"300\" height=\"300\" />\n\n<strong>Big Boi - Sir Lucious Left Foot</strong><img class=\" size-medium wp-image-10 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/sir-lucious-300x300.jpg\" alt=\"sir lucious\" width=\"300\" height=\"300\" />\n\n<strong>Nas &amp; Damian Marley - Distant Relatives</strong><img class=\" size-full wp-image-5 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/distant-relatives.jpg\" alt=\"distant relatives\" width=\"300\" height=\"300\" />\n\n<strong>The Roots - How I Got Over</strong>\n\n<img class=\" size-medium wp-image-7 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/how-i-got-over-300x300.jpg\" alt=\"how i got over\" width=\"300\" height=\"300\" />\n\n<strong>Kanye West - My Beautiful Dark Twisted Fantasy</strong><img class=\" size-medium wp-image-8 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/kanye-west-mbdtf-300x300.jpg\" alt=\"kanye west mbdtf\" width=\"300\" height=\"300\" />\n\n<strong>Kanye West &amp; Jay Z - Watch The Throne</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/kanye-jay-watch-the-throne.jpg\"><img class=\" size-medium wp-image-40 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/kanye-jay-watch-the-throne-300x300.jpg\" alt=\"kanye-jay-watch-the-throne\" width=\"300\" height=\"300\" /></a>\n\n<strong>Danny Brown - XXX</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/xxx.jpg\"><img class=\" size-medium wp-image-42 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/xxx-300x300.jpg\" alt=\"xxx\" width=\"300\" height=\"300\" /></a>\n\n<strong>Kendrick Lamar - Section.80</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Section80Front.jpg\"><img class=\" size-medium wp-image-41 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Section80Front-300x300.jpg\" alt=\"Section80Front\" width=\"300\" height=\"300\" /></a>\n\n<strong>Drake - Take Care</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_.jpg\"><img class=\" size-medium wp-image-43 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_-300x300.jpg\" alt=\"91gMAln-dPL._SL1500_\" width=\"300\" height=\"300\" /></a>\n\n<strong>A$AP Rocky - Live.Love.A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/ASAP_Rocky_Liveloveaap-front-large.jpg\"><img class=\" size-medium wp-image-44 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/ASAP_Rocky_Liveloveaap-front-large-300x300.jpg\" alt=\"ASAP_Rocky_Liveloveaap-front-large\" width=\"300\" height=\"300\" /></a>\n\n<strong>Black Up - Shabazz Palaces</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Black_up.jpg\"><img class=\" size-medium wp-image-45 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Black_up-300x300.jpg\" alt=\"030911-2_1up [Converted]\" width=\"300\" height=\"300\" /></a>\n\n<strong>Goblin - Tyler The Creator</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Goblincover.jpg\"><img class=\" size-full wp-image-46 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Goblincover.jpg\" alt=\"Goblincover\" width=\"300\" height=\"300\" /></a>\n\n<strong>Killer Mike - Pl3dge</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Killer_mike_pl3dge.jpg\"><img class=\" size-medium wp-image-47 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Killer_mike_pl3dge-300x300.jpg\" alt=\"Killer_mike_pl3dge\" width=\"300\" height=\"300\" /></a>\n\n<strong>Death Grips - Exmilitary</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Exmilitary_artwork.png\"><img class=\" size-medium wp-image-39 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Exmilitary_artwork-300x300.png\" alt=\"Exmilitary_artwork\" width=\"300\" height=\"300\" /></a>\n\n<strong>LIL UGLY MANE - MISTA THUG ISOLATION</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/9f8f06aa6d3167d17ed1755f7c79e137.897x897x1.jpg\"><img class=\" size-medium wp-image-38 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/9f8f06aa6d3167d17ed1755f7c79e137.897x897x1-300x300.jpg\" alt=\"9f8f06aa6d3167d17ed1755f7c79e137.897x897x1\" width=\"300\" height=\"300\" /></a>\n\n<strong>ScHoolboy Q - Habits and Contradictions</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-Q-Habits-And-Contradictions-608x608.jpg\"><img class=\" size-medium wp-image-52 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-Q-Habits-And-Contradictions-608x608-300x300.jpg\" alt=\"Schoolboy-Q-Habits-And-Contradictions-608x608\" width=\"300\" height=\"300\" /></a>\n\n<strong>GOOD Music - Cruel Summer</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/GOOD-Music-Cruel-Summer.jpg\"><img class=\" size-medium wp-image-51 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/GOOD-Music-Cruel-Summer-300x300.jpg\" alt=\"GOOD-Music-Cruel-Summer\" width=\"300\" height=\"300\" /></a>\n\n<strong>Killer Mike - R.A.P Music</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a269b51a.jpg\"><img class=\" size-medium wp-image-50 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a269b51a-300x300.jpg\" alt=\"homepage_large.a269b51a\" width=\"300\" height=\"300\" /></a>\n\nDeath Grips - The Money Store<img class=\" size-medium wp-image-48 alignright\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/95469-300x300.jpg\" alt=\"95469\" width=\"300\" height=\"300\" /><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/95469.jpg\">\n</a>\n\n<strong>Kendrick Lamar - Good Kid m.A.A.d City</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/51Zzc7PUDML.jpg\"><img class=\" size-medium wp-image-49 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/51Zzc7PUDML-300x300.jpg\" alt=\"51Zzc7PUDML\" width=\"300\" height=\"300\" /></a>\n\n<strong>Flatbush Zombies - Better off Dead</strong><img class=\" size-medium wp-image-31 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/flatbushzombies-betteroffdead-300x300.jpg\" alt=\"flatbushzombies-betteroffdead\" width=\"300\" height=\"300\" />\n\n<strong>Earl Sweatshirt - Doris</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Earl_Sweatshirt_Doris.jpg\"><img class=\" size-medium wp-image-53 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Earl_Sweatshirt_Doris-300x300.jpg\" alt=\"Earl_Sweatshirt_Doris\" width=\"300\" height=\"300\" /></a>\n\n<strong>Childish Gambino - because the internet</strong>\n<img class=\" size-medium wp-image-29 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/3aigo63ters0f3mwk7jaseng0.400x400x7-300x300.gif\" alt=\"3aigo63ters0f3mwk7jaseng0.400x400x7\" width=\"300\" height=\"300\" />\n\n<strong>Young Fathers - Tape Two</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Young_Fathers_Tape_Two.jpg\"><img class=\" size-medium wp-image-55 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Young_Fathers_Tape_Two-300x300.jpg\" alt=\"Young_Fathers_Tape_Two\" width=\"300\" height=\"300\" /></a>\n\n<strong>Chance The Rapper - Acid Rap</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1.jpg\"><img class=\" size-medium wp-image-54 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/1c72a048c1ced01428cecde7cf8221ba.1000x1000x1-300x300.jpg\" alt=\"1c72a048c1ced01428cecde7cf8221ba.1000x1000x1\" width=\"300\" height=\"300\" /></a>\n\n<strong>A$AP Ferg - Trap Lord</strong>\n\n<img class=\" size-medium wp-image-30 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/f04832ba410c559c20b0b39c719619d7-300x300.jpg\" alt=\"f04832ba410c559c20b0b39c719619d7\" width=\"300\" height=\"300\" />\n\n<strong>Tyler, The Creator - WOLF</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Wolf_Cover2.jpg\"><img class=\" size-full wp-image-60 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Wolf_Cover2.jpg\" alt=\"Wolf_Cover2\" width=\"300\" height=\"300\" /></a>\n\n<strong>Kanye West - Yeezus</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/yeezus-306-1371753799.jpg\"><img class=\" size-medium wp-image-56 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/yeezus-306-1371753799-300x300.jpg\" alt=\"yeezus-306-1371753799\" width=\"300\" height=\"300\" /></a>\n\n<strong>Pusha T - My Name Is My Name</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Pusha_T_My_Name_Is_My_Name.jpg\"><img class=\" size-full wp-image-59 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Pusha_T_My_Name_Is_My_Name.jpg\" alt=\"Pusha_T_My_Name_Is_My_Name\" width=\"300\" height=\"300\" /></a>\n\n<strong>Busdriver - Perfect Hair</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/0003376627_10.jpg\"><img class=\" size-medium wp-image-84 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/0003376627_10-300x300.jpg\" alt=\"0003376627_10\" width=\"300\" height=\"300\" /></a>\n\n<strong>clipping. - CLPPNG</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.1c2e09c4.jpg\"><img class=\" size-medium wp-image-83 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.1c2e09c4-300x300.jpg\" alt=\"homepage_large.1c2e09c4\" width=\"300\" height=\"300\" /></a>\n\n<strong>ScHoolboy Q - Oxymoron</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-q-oxymoron-deluxecover.jpg\"><img class=\" size-medium wp-image-58 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-q-oxymoron-deluxecover-300x300.jpg\" alt=\"Schoolboy-q-oxymoron-deluxecover\" width=\"300\" height=\"300\" /></a>\n\n<strong>Open Mike Eagle - Dark Comedy</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/a1540567705_10.jpg\"><img class=\" size-medium wp-image-85 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/a1540567705_10-300x300.jpg\" alt=\"a1540567705_10\" width=\"300\" height=\"300\" /></a>\n\n<strong>Vince Staples - Hell Can Wait EP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/The_official_cover_art_for_Vince_Staples_-Hell_Can_Wait-_EP.jpg\"><img class=\" size-medium wp-image-28 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/The_official_cover_art_for_Vince_Staples_-Hell_Can_Wait-_EP-300x300.jpg\" alt=\"The_official_cover_art_for_Vince_Staples_-Hell_Can_Wait-_EP\" width=\"300\" height=\"300\" /></a>\n\n<strong>Run The Jewels - Run The Jewels 2</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/RunTheJewelsRTJ2.jpg\"><img class=\" size-medium wp-image-62 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/RunTheJewelsRTJ2-300x300.jpg\" alt=\"RunTheJewelsRTJ2\" width=\"300\" height=\"300\" /></a>\n\n<strong>Freddie Gibbs &amp; Madlib - Pinata</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.5d549a79.jpg\"><img class=\" size-medium wp-image-63 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.5d549a79-300x300.jpg\" alt=\"homepage_large.5d549a79\" width=\"300\" height=\"300\" /></a>\n\n[/spoiler]\n\n[spoiler title =\'2015\']\n\n<strong>Tyler, The Creator - Cherry Bomb</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.eadbaa73.jpg\"><img class=\" size-medium wp-image-64 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.eadbaa73-300x300.jpg\" alt=\"homepage_large.eadbaa73\" width=\"300\" height=\"300\" /></a>\n\n<strong>Lupe Fiasco - Tetsuo and Youth</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ecabec1f.jpg\">\n</a>\n\n<strong>Wale - The Album About Nothing</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.3bf75029.jpg\">\n</a>\n\n<strong>BADBADNOTGOOD and Ghostface Killa - Sour Soul</strong>\n\n<strong>Drake - If You\'re Reading This It\'s Too Late</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a8c69ffb.jpg\">\n</a>\n\n<strong>Joey B4DA$$ - B4DA$$</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.68e4094a.jpg\">\n</a>\n\n<strong>Earl Sweatshirt - I Don\'t Like Shit I Don\'t Go Outside</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.6283beab.jpg\"><img class=\" size-medium wp-image-69 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.6283beab-300x300.jpg\" alt=\"homepage_large.6283beab\" width=\"300\" height=\"300\" /></a>\n\n<strong>Death Grips - The Powers That B</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artists.jpg\">\n</a>\n\n<strong>A$AP Rocky - At Long Last A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ce403a0f.jpg\">\n</a>\n\n<strong>Dr. Dre - Compton</strong>\n\n<strong>Jay Rock - 90059</strong>\n\n<strong>Vince Staples - Summertime \'06</strong>\n\n<a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.97efc203.jpg\"><img class=\" size-medium wp-image-73 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.97efc203-300x300.jpg\" alt=\"homepage_large.97efc203\" width=\"300\" height=\"300\" /></a>\n\n<strong>Kendrick Lamar - To Pimp A Butterfly</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.d47a5880.jpg\"><img class=\" size-medium wp-image-74 aligncenter\" src=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.d47a5880-300x300.jpg\" alt=\"homepage_large.d47a5880\" width=\"300\" height=\"300\" /></a>','Essential Hip-Hop Albums of the Decade so far.','','inherit','closed','closed','','86-autosave-v1','','','2016-09-18 06:21:37','2016-09-18 06:21:37','',86,'http://lukeboyle.com/wp/86-autosave-v1/',0,'revision','',0),(339,1,'2016-09-18 06:23:15','2016-09-18 06:23:15','<strong>Earl Sweatshirt - Earl</strong>\r\n\r\n<strong>Big Boi - Sir Lucious Left Foot</strong>\r\n\r\n<strong>Nas &amp; Damian Marley - Distant Relatives</strong>\r\n\r\n<strong>The Roots - How I Got Over</strong>\r\n\r\n<strong>Kanye West - My Beautiful Dark Twisted Fantasy</strong>\r\n\r\n<strong>Kanye West &amp; Jay Z - Watch The Throne</strong>\r\n\r\n<strong>Danny Brown - XXX</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/xxx.jpg\">\r\n</a>\r\n\r\n<strong>Kendrick Lamar - Section.80</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Section80Front.jpg\">\r\n</a>\r\n\r\n<strong>Drake - Take Care</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/91gMAln-dPL._SL1500_.jpg\">\r\n</a>\r\n\r\n<strong>A$AP Rocky - Live.Love.A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/ASAP_Rocky_Liveloveaap-front-large.jpg\">\r\n</a>\r\n\r\n<strong>Black Up - Shabazz Palaces</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Black_up.jpg\">\r\n</a>\r\n\r\n<strong>Goblin - Tyler The Creator</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Goblincover.jpg\">\r\n</a>\r\n\r\n<strong>Killer Mike - Pl3dge</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Killer_mike_pl3dge.jpg\">\r\n</a>\r\n\r\n<strong>Death Grips - Exmilitary</strong>\r\n\r\n<strong>LIL UGLY MANE - MISTA THUG ISOLATION</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/9f8f06aa6d3167d17ed1755f7c79e137.897x897x1.jpg\">\r\n</a>\r\n\r\n<strong>ScHoolboy Q - Habits and Contradictions</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-Q-Habits-And-Contradictions-608x608.jpg\">\r\n</a>\r\n\r\n<strong>GOOD Music - Cruel Summer</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/GOOD-Music-Cruel-Summer.jpg\">\r\n</a>\r\n\r\n<strong>Killer Mike - R.A.P Music</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a269b51a.jpg\">\r\n</a>\r\n\r\nDeath Grips - The Money Store\r\n\r\n<strong>Kendrick Lamar - Good Kid m.A.A.d City</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/51Zzc7PUDML.jpg\">\r\n</a>\r\n\r\n<strong>Flatbush Zombies - Better off Dead</strong>\r\n\r\n<strong>Earl Sweatshirt - Doris</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Earl_Sweatshirt_Doris.jpg\">\r\n</a>\r\n\r\n<strong>Childish Gambino - because the internet</strong>\r\n\r\n<strong>Young Fathers - Tape Two</strong>\r\n\r\n<strong>Chance The Rapper - Acid Rap</strong>\r\n\r\n<strong>A$AP Ferg - Trap Lord</strong>\r\n\r\n<strong>Tyler, The Creator - WOLF</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Wolf_Cover2.jpg\">\r\n</a>\r\n\r\n<strong>Kanye West - Yeezus</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/yeezus-306-1371753799.jpg\">\r\n</a>\r\n\r\n<strong>Pusha T - My Name Is My Name</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Pusha_T_My_Name_Is_My_Name.jpg\">\r\n</a>\r\n\r\n<strong>Busdriver - Perfect Hair</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/0003376627_10.jpg\">\r\n</a>\r\n\r\n<strong>clipping. - CLPPNG</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.1c2e09c4.jpg\">\r\n</a>\r\n\r\n<strong>ScHoolboy Q - Oxymoron</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/Schoolboy-q-oxymoron-deluxecover.jpg\">\r\n</a>\r\n\r\n<strong>Open Mike Eagle - Dark Comedy</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/a1540567705_10.jpg\">\r\n</a>\r\n\r\n<strong>Vince Staples - Hell Can Wait EP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/The_official_cover_art_for_Vince_Staples_-Hell_Can_Wait-_EP.jpg\">\r\n</a>\r\n\r\n<strong>Run The Jewels - Run The Jewels 2</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/RunTheJewelsRTJ2.jpg\">\r\n</a>\r\n\r\n<strong>Freddie Gibbs &amp; Madlib - Pinata</strong>\r\n\r\n<strong>Tyler, The Creator - Cherry Bomb</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.eadbaa73.jpg\">\r\n</a>\r\n\r\n<strong>Lupe Fiasco - Tetsuo and Youth</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ecabec1f.jpg\">\r\n</a>\r\n\r\n<strong>Wale - The Album About Nothing</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.3bf75029.jpg\">\r\n</a>\r\n\r\n<strong>BADBADNOTGOOD and Ghostface Killa - Sour Soul</strong>\r\n\r\n<strong>Drake - If You\'re Reading This It\'s Too Late</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.a8c69ffb.jpg\">\r\n</a>\r\n\r\n<strong>Joey B4DA$$ - B4DA$$</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.68e4094a.jpg\">\r\n</a>\r\n\r\n<strong>Earl Sweatshirt - I Don\'t Like Shit I Don\'t Go Outside</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.6283beab.jpg\">\r\n</a>\r\n\r\n<strong>Death Grips - The Powers That B</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/This_is_the_cover_art_for_The_Powers_That_B_._The_cover_art_copyright_is_believed_to_belong_to_the_record_label_or_the_graphic_artists.jpg\">\r\n</a>\r\n\r\n<strong>A$AP Rocky - At Long Last A$AP</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.ce403a0f.jpg\">\r\n</a>\r\n\r\n<strong>Dr. Dre - Compton</strong>\r\n\r\n<strong>Jay Rock - 90059</strong>\r\n\r\n<strong>Vince Staples - Summertime \'06</strong>\r\n\r\n<strong>Kendrick Lamar - To Pimp A Butterfly</strong><a href=\"http://lukeboyle.com/wp/blog/wp-content/uploads/2015/08/homepage_large.d47a5880.jpg\">\r\n</a>','Essential Hip-Hop Albums of the Decade so far.','','inherit','closed','closed','','86-revision-v1','','','2016-09-18 06:23:15','2016-09-18 06:23:15','',86,'http://lukeboyle.com/wp/86-revision-v1/',0,'revision','',0),(341,1,'2016-09-18 10:40:59','2016-09-18 10:40:59','','Pypes','','publish','closed','closed','','pypes','','','2017-02-27 08:05:59','2017-02-27 08:05:59','',0,'http://lukeboyle.com/wp/?post_type=portfolio_item&#038;p=341',0,'portfolio_item','',0),(342,1,'2016-09-18 10:51:01','2016-09-18 10:51:01','','Broccoli and Co.','','publish','closed','closed','','broccoli-and-co-2','','','2017-02-26 09:45:16','2017-02-26 09:45:16','',0,'http://lukeboyle.com/wp/?post_type=portfolio_item&#038;p=342',0,'portfolio_item','',0),(343,1,'2017-02-24 10:52:38','2017-02-24 10:52:38','','Agander','','publish','closed','closed','','agander-2','','','2017-02-28 00:57:36','2017-02-28 00:57:36','',0,'http://lukeboyle.com/wp/?post_type=portfolio_item&#038;p=343',0,'portfolio_item','',0),(344,1,'2016-01-18 10:53:39','2016-01-18 10:53:39','','Vices','','publish','closed','closed','','vices-2','','','2017-02-28 00:55:23','2017-02-28 00:55:23','',0,'http://lukeboyle.com/wp/?post_type=portfolio_item&#038;p=344',0,'portfolio_item','',0),(345,1,'2016-09-19 05:17:02','2016-09-19 05:17:02','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-19 05:17:02','2016-09-19 05:17:02','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(346,1,'2016-09-20 23:18:48','2016-09-20 23:18:48','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-09-20 23:18:48','2016-09-20 23:18:48','',14,'http://lukeboyle.com/wp/14-revision-v1/',0,'revision','',0),(347,1,'2016-09-22 00:53:07','2016-09-22 00:53:07','<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>','Recursive functions in action','','inherit','closed','closed','','310-revision-v1','','','2016-09-22 00:53:07','2016-09-22 00:53:07','',310,'http://lukeboyle.com/wp/310-revision-v1/',0,'revision','',0),(348,1,'2016-09-22 01:10:37','2016-09-22 01:10:37','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\r\n\r\nThe structure of the data looked like this:\r\n<pre>\r\n    input = [\r\n        {\r\n            text: \"asdfg\",\r\n            children: [\r\n                {\r\n                    text: \"asdfg\",\r\n                    children: [...]\r\n                }\r\n            ]\r\n        }   \r\n    ]\r\n</pre>\r\n\r\nEach time you step into the `children` part, that represents another level of depth. The numbers input might look like `1.1` which would be the first piece of text from the second level of the object (0-based). Enter the function below...\r\n\r\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\r\n\r\nThis checks if:\r\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\r\n2. There are no children.\r\n\r\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function. ','Practical recursive functions in JavaScript','','inherit','closed','closed','','310-revision-v1','','','2016-09-22 01:10:37','2016-09-22 01:10:37','',310,'http://lukeboyle.com/wp/310-revision-v1/',0,'revision','',0),(349,1,'2016-09-24 02:32:44','2016-09-24 02:32:44','After much frustration with this issue, I found this section in the react material-ui documentation - React-Tap-Event-Plugin. The custom components like the select field don\'t work well with the traditional onClick listener, so as a temporary fix, the react-tap-event-plugin must be included in your react project. The dependency is supposedly a temporary fix.\r\n\r\nSee the repo here: <a href=\"https://github.com/zilverline/react-tap-event-plugin\" target=\"_blank\">https://github.com/zilverline/react-tap-event-plugin</a>','React Material-UI touch events not firing','','inherit','closed','closed','','224-revision-v1','','','2016-09-24 02:32:44','2016-09-24 02:32:44','',224,'http://lukeboyle.com/224-revision-v1/',0,'revision','',0),(350,1,'2016-09-25 09:50:26','2016-09-25 09:50:26','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-example/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\n\n<pre><code class=\"javascript\">  return (\n    &lt;div\n      // event listeners are prefixed with on- or nativeOn-\n      on-click={this.clickHandler}\n      nativeOn-click={this.nativeClickHandler}\n      key=\"key\"\n      ref=\"ref\"&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<h3>Considerations</h3>\n\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the <code>nativeOn-change</code> doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with <code>this.refs</code>, you need to use <code>this.$refs</code> which follows the usual Vue convention. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a <code>render</code> function.\n\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.','JSX in Vue.JS','','publish','open','open','','jsx-in-vue-js','','','2016-09-25 12:10:58','2016-09-25 12:10:58','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)\r\n\r\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a `template` entry, there\'s a `render` function which returns jsx.\r\n\r\n```javascript\r\nVue.component(&#039;jsx-example&#039;, {\r\n  render (h) { // &lt;-- h must be in scope\r\n    return &lt;div id=&quot;foo&quot;&gt;bar&lt;/div&gt;\r\n  }\r\n})\r\n\r\n// Usage\r\n\r\n&lt;div&gt;\r\n    &lt;jsx-example/&gt;\r\n&lt;/div&gt;\r\n```\r\n\r\n`h` is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\r\n\r\n```javascript\r\n\r\nconst pageView = new Vue({\r\n    el: &#039;#root&#039;,\r\n    data: {},\r\n    methods: {},\r\n    render () {\r\n        const h = this.$createElement;\r\n        return (\r\n            &lt;div&gt;\r\n                &lt;jsx-example/&gt;\r\n            &lt;/div&gt;\r\n        )\r\n    }\r\n});\r\n\r\n```\r\n\r\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\r\n\r\n```javascript\r\n  return (\r\n    &lt;div\r\n      // event listeners are prefixed with on- or nativeOn-\r\n      on-click={this.clickHandler}\r\n      nativeOn-click={this.nativeClickHandler}\r\n      key=&quot;key&quot;\r\n      ref=&quot;ref&quot;&gt;\r\n    &lt;/div&gt;\r\n```\r\n\r\n### Considerations\r\n\r\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the `nativeOn-change` doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with `this.refs`, you need to use `this.$refs` which follows the usual Vue convention. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a `render` function.\r\n\r\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.',0,'http://lukeboyle.com/?p=350',0,'post','',0),(351,1,'2016-09-24 22:56:06','2016-09-24 22:56:06','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\nGetting Started','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 22:56:06','2016-09-24 22:56:06','',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(352,1,'2016-09-24 23:09:14','2016-09-24 23:09:14','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h2>Getting Started</h2>','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:09:14','2016-09-24 23:09:14','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n## Getting Started',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(353,1,'2016-09-24 23:09:40','2016-09-24 23:09:40','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:09:40','2016-09-24 23:09:40','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(354,1,'2016-09-24 23:16:09','2016-09-24 23:16:09','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: (https://github.com/vuejs/babel-plugin-transform-vue-jsx)[https://github.com/vuejs/babel-plugin-transform-vue-jsx]','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:16:09','2016-09-24 23:16:09','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: (https://github.com/vuejs/babel-plugin-transform-vue-jsx)[https://github.com/vuejs/babel-plugin-transform-vue-jsx]',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(355,1,'2016-09-24 23:16:21','2016-09-24 23:16:21','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:16:21','2016-09-24 23:16:21','I\'ve recently been experimenting with the Vue JSX plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(356,1,'2016-09-24 23:22:17','2016-09-24 23:22:17','I\'ve recently been experimenting with the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-input/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that JSX provided by having to integrate it into Vue.','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:22:17','2016-09-24 23:22:17','I\'ve recently been experimenting with the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)\r\n\r\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a `template` entry, there\'s a `render` function which returns jsx.\r\n\r\n```javascript\r\nVue.component(&#039;jsx-example&#039;, {\r\n  render (h) { // &lt;-- h must be in scope\r\n    return &lt;div id=&quot;foo&quot;&gt;bar&lt;/div&gt;\r\n  }\r\n})\r\n\r\n// Usage\r\n\r\n&lt;div&gt;\r\n    &lt;jsx-example/&gt;\r\n&lt;/div&gt;\r\n```\r\n\r\n`h` is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\r\n\r\n```javascript\r\n\r\nconst pageView = new Vue({\r\n    el: &#039;#root&#039;,\r\n    data: {},\r\n    methods: {},\r\n    render () {\r\n        const h = this.$createElement;\r\n        return (\r\n            &lt;div&gt;\r\n                &lt;jsx-input/&gt;\r\n            &lt;/div&gt;\r\n        )\r\n    }\r\n});\r\n\r\n```\r\n\r\nFrom the get go it seems to me like we\'ve lost some of the versatility that JSX provided by having to integrate it into Vue.',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(357,1,'2016-09-24 23:26:52','2016-09-24 23:26:52','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-input/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\n\n<pre><code class=\"javascript\">  return (\n    &lt;div\n      // event listeners are prefixed with on- or nativeOn-\n      on-click={this.clickHandler}\n      nativeOn-click={this.nativeClickHandler}\n      key=\"key\"\n      ref=\"ref\"&gt;\n    &lt;/div&gt;\n</code></pre>','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-24 23:26:52','2016-09-24 23:26:52','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)\r\n\r\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a `template` entry, there\'s a `render` function which returns jsx.\r\n\r\n```javascript\r\nVue.component(&#039;jsx-example&#039;, {\r\n  render (h) { // &lt;-- h must be in scope\r\n    return &lt;div id=&quot;foo&quot;&gt;bar&lt;/div&gt;\r\n  }\r\n})\r\n\r\n// Usage\r\n\r\n&lt;div&gt;\r\n    &lt;jsx-example/&gt;\r\n&lt;/div&gt;\r\n```\r\n\r\n`h` is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\r\n\r\n```javascript\r\n\r\nconst pageView = new Vue({\r\n    el: &#039;#root&#039;,\r\n    data: {},\r\n    methods: {},\r\n    render () {\r\n        const h = this.$createElement;\r\n        return (\r\n            &lt;div&gt;\r\n                &lt;jsx-input/&gt;\r\n            &lt;/div&gt;\r\n        )\r\n    }\r\n});\r\n\r\n```\r\n\r\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\r\n\r\n```javascript\r\n  return (\r\n    &lt;div\r\n      // event listeners are prefixed with on- or nativeOn-\r\n      on-click={this.clickHandler}\r\n      nativeOn-click={this.nativeClickHandler}\r\n      key=&quot;key&quot;\r\n      ref=&quot;ref&quot;&gt;\r\n    &lt;/div&gt;\r\n```',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(358,1,'2016-09-25 09:50:26','2016-09-25 09:50:26','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-example/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\n\n<pre><code class=\"javascript\">  return (\n    &lt;div\n      // event listeners are prefixed with on- or nativeOn-\n      on-click={this.clickHandler}\n      nativeOn-click={this.nativeClickHandler}\n      key=\"key\"\n      ref=\"ref\"&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<h3>Considerations</h3>\n\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the <code>nativeOn-change</code> doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with <code>this.refs.ref</code>, so I\'m not sure where the ref is actually in scope. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a <code>render</code> function.\n\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.\n\nThe implementation feels sort of half-baked, but it\'s enough to get started on initially if you\'re really against templates.','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-25 09:50:26','2016-09-25 09:50:26','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)\r\n\r\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a `template` entry, there\'s a `render` function which returns jsx.\r\n\r\n```javascript\r\nVue.component(&#039;jsx-example&#039;, {\r\n  render (h) { // &lt;-- h must be in scope\r\n    return &lt;div id=&quot;foo&quot;&gt;bar&lt;/div&gt;\r\n  }\r\n})\r\n\r\n// Usage\r\n\r\n&lt;div&gt;\r\n    &lt;jsx-example/&gt;\r\n&lt;/div&gt;\r\n```\r\n\r\n`h` is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\r\n\r\n```javascript\r\n\r\nconst pageView = new Vue({\r\n    el: &#039;#root&#039;,\r\n    data: {},\r\n    methods: {},\r\n    render () {\r\n        const h = this.$createElement;\r\n        return (\r\n            &lt;div&gt;\r\n                &lt;jsx-example/&gt;\r\n            &lt;/div&gt;\r\n        )\r\n    }\r\n});\r\n\r\n```\r\n\r\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\r\n\r\n```javascript\r\n  return (\r\n    &lt;div\r\n      // event listeners are prefixed with on- or nativeOn-\r\n      on-click={this.clickHandler}\r\n      nativeOn-click={this.nativeClickHandler}\r\n      key=&quot;key&quot;\r\n      ref=&quot;ref&quot;&gt;\r\n    &lt;/div&gt;\r\n```\r\n\r\n### Considerations\r\n\r\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the `nativeOn-change` doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with `this.refs.ref`, so I\'m not sure where the ref is actually in scope. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a `render` function.\r\n\r\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.\r\n\r\nThe implementation feels sort of half-baked, but it\'s enough to get started on initially if you\'re really against templates.',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(359,1,'2016-09-25 12:11:10','2016-09-25 12:11:10','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-example/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\n\n<pre><code class=\"javascript\">  return (\n    &lt;div\n      // event listeners are prefixed with on- or nativeOn-\n      on-click={this.clickHandler}\n      nativeOn-click={this.nativeClickHandler}\n      key=\"key\"\n      ref=\"ref\"&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<h3>Considerations</h3>\n\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the <code>nativeOn-change</code> doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with <code>this.refs</code>, you need to use <code>this.$refs</code> which follows the usual Vue convention. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a <code>render</code> function.\n\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.','JSX in Vue.JS','','inherit','closed','closed','','350-autosave-v1','','','2016-09-25 12:11:10','2016-09-25 12:11:10','',350,'http://lukeboyle.com/350-autosave-v1/',0,'revision','',0),(360,1,'2016-09-25 12:10:58','2016-09-25 12:10:58','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\n\n<h3>Getting Started</h3>\n\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\n\n<pre><code class=\"javascript\">plugins: [\n    \'transform-runtime\',\n    \'transform-vue-jsx\'\n],\npresets: [\'es2015\']\n</code></pre>\n\nThat\'s the basic requirement for getting started. To install those, run:\n\n<ul>\n<li><code>npm install -D babel-plugin-transform-runtime</code></li>\n<li><code>npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</code></li>\n<li><code>npm install -D babel-preset-es2015</code></li>\n</ul>\n\nThe official repo for the Vue jsx is located here: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a>\n\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a <code>template</code> entry, there\'s a <code>render</code> function which returns jsx.\n\n<pre><code class=\"javascript\">Vue.component(\'jsx-example\', {\n  render (h) { // &lt;-- h must be in scope\n    return &lt;div id=\"foo\"&gt;bar&lt;/div&gt;\n  }\n})\n\n// Usage\n\n&lt;div&gt;\n    &lt;jsx-example/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<code>h</code> is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\n\n<pre><code class=\"javascript\"><br />const pageView = new Vue({\n    el: \'#root\',\n    data: {},\n    methods: {},\n    render () {\n        const h = this.$createElement;\n        return (\n            &lt;div&gt;\n                &lt;jsx-example/&gt;\n            &lt;/div&gt;\n        )\n    }\n});\n\n</code></pre>\n\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\n\n<pre><code class=\"javascript\">  return (\n    &lt;div\n      // event listeners are prefixed with on- or nativeOn-\n      on-click={this.clickHandler}\n      nativeOn-click={this.nativeClickHandler}\n      key=\"key\"\n      ref=\"ref\"&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<h3>Considerations</h3>\n\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the <code>nativeOn-change</code> doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with <code>this.refs</code>, you need to use <code>this.$refs</code> which follows the usual Vue convention. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a <code>render</code> function.\n\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.','JSX in Vue.JS','','inherit','closed','closed','','350-revision-v1','','','2016-09-25 12:10:58','2016-09-25 12:10:58','I\'ve recently been experimenting with using jsx in Vue, the Vue jsx plugin for babel and using that instead of the standard template pattern. Since there are really not any official docs for the plugin, I\'m going to run through a quick usage guide.\r\n\r\n### Getting Started\r\n\r\nFor my project I\'m using Webpack and just default npm scripts. Whatever your choice for build process the important part is what you have configured your babel config or .babelrc with.\r\n\r\n```javascript\r\nplugins: [\r\n    &#039;transform-runtime&#039;,\r\n    &#039;transform-vue-jsx&#039;\r\n],\r\npresets: [&#039;es2015&#039;]\r\n```\r\n\r\nThat\'s the basic requirement for getting started. To install those, run:\r\n\r\n- `npm install -D babel-plugin-transform-runtime`\r\n- `npm install -D babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx`\r\n- `npm install -D babel-preset-es2015`\r\n\r\nThe official repo for the Vue jsx is located here: [https://github.com/vuejs/babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)\r\n\r\nThe interesting part about VueJsx in my opinion is that it follows the Angular pattern for registering components. Whereas in React you just import a function that returns jsx and you can name it whatever, in Vue jsx you must declare the name and register the component globally. Vue has a component method that takes a name and an object with all relevant data. The difference being is that instead of a `template` entry, there\'s a `render` function which returns jsx.\r\n\r\n```javascript\r\nVue.component(&#039;jsx-example&#039;, {\r\n  render (h) { // &lt;-- h must be in scope\r\n    return &lt;div id=&quot;foo&quot;&gt;bar&lt;/div&gt;\r\n  }\r\n})\r\n\r\n// Usage\r\n\r\n&lt;div&gt;\r\n    &lt;jsx-example/&gt;\r\n&lt;/div&gt;\r\n```\r\n\r\n`h` is the shorthand for the Vue instance $createElement method so you have to make sure that h is in the scope of your components, like so:\r\n\r\n```javascript\r\n\r\nconst pageView = new Vue({\r\n    el: &#039;#root&#039;,\r\n    data: {},\r\n    methods: {},\r\n    render () {\r\n        const h = this.$createElement;\r\n        return (\r\n            &lt;div&gt;\r\n                &lt;jsx-example/&gt;\r\n            &lt;/div&gt;\r\n        )\r\n    }\r\n});\r\n\r\n```\r\n\r\nFrom the get go it seems to me like we\'ve lost some of the versatility that jsx provides by having to integrate it into the normal Vue component pattern.\r\n\r\n```javascript\r\n  return (\r\n    &lt;div\r\n      // event listeners are prefixed with on- or nativeOn-\r\n      on-click={this.clickHandler}\r\n      nativeOn-click={this.nativeClickHandler}\r\n      key=&quot;key&quot;\r\n      ref=&quot;ref&quot;&gt;\r\n    &lt;/div&gt;\r\n```\r\n\r\n### Considerations\r\n\r\nThere\'s a strange thing where on-change on a form input seems to be naturally debounced, and the `nativeOn-change` doesn\'t seem to be any different. The behaviour doesn\'t seem to be the same as the React class where you can refer to an element with `this.refs`, you need to use `this.$refs` which follows the usual Vue convention. Since there\'s no documentation surrounding the jsx, I\'m assuming the rest of the behaviour follows the standard Vue component pattern, but instead of a template, there\'s a `render` function.\r\n\r\nThe jsx doesn\'t support the normal vue directives so you\'ll have to do any of those things programmatically.',350,'http://lukeboyle.com/350-revision-v1/',0,'revision','',0),(362,1,'2016-09-26 07:45:58','2016-09-26 07:45:58','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\n\nThe structure of the data looked like this:\n\n<pre>\n    input = [\n        {\n            text: \"asdfg\",\n            children: [\n                {\n                    text: \"asdfg\",\n                    children: [...]\n                }\n            ]\n        }   \n    ]\n</pre>\n\nEach time you step into the <code>children</code> part, that represents another level of depth. The numbers input might look like <code>1.1</code> which would be the first piece of text from the second level of the object (0-based). Enter the function below...\n\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\n\nThis checks if:\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\n2. There are no children.\n\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function.\n\nEdit: For a more relatable example, here is a function that can calculate how many months it will take you to pay off your credit card given a debt amount and interest rate.\n\n<script src=\"https://gist.github.com/3stacks/beb35a65359ecde0d8dac6d833249857.js\"></script>\n\nYou initialise the month parameter with 1 (first month) and then it will call until there is no more debt. This is a fine use case for a <code>while</code> loop, so if you feel like using it, feel free. For another example of a good use case for recursion, see this article: <a href=\"http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/\">http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/</a>','Practical recursive functions in JavaScript','','inherit','closed','closed','','310-autosave-v1','','','2016-09-26 07:45:58','2016-09-26 07:45:58','',310,'http://lukeboyle.com/310-autosave-v1/',0,'revision','',0),(363,1,'2016-09-26 07:46:11','2016-09-26 07:46:11','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\n\nThe structure of the data looked like this:\n\n<pre>\n    input = [\n        {\n            text: \"asdfg\",\n            children: [\n                {\n                    text: \"asdfg\",\n                    children: [...]\n                }\n            ]\n        }   \n    ]\n</pre>\n\nEach time you step into the <code>children</code> part, that represents another level of depth. The numbers input might look like <code>1.1</code> which would be the first piece of text from the second level of the object (0-based). Enter the function below...\n\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\n\nThis checks if:\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\n2. There are no children.\n\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function.\n\nEdit: For a more relatable example, here is a function that can calculate how many months it will take you to pay off your credit card given a debt amount and interest rate.\n\n<script src=\"https://gist.github.com/3stacks/beb35a65359ecde0d8dac6d833249857.js\"></script>\n\nYou initialise the month parameter with 1 (first month) and then it will call until there is no more debt. This is a fine use case for a <code>while</code> loop, so if you feel like using it, feel free. For another example of a good use case for recursion, see this article: <a href=\"http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/\">http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/</a>.','Practical recursive functions in JavaScript','','inherit','closed','closed','','310-revision-v1','','','2016-09-26 07:46:11','2016-09-26 07:46:11','In a recent project I was given the challenge to take a complex data structure of an indeterminate depth and create a function to get a specific line based on a line number.\r\n\r\nThe structure of the data looked like this:\r\n<pre>\r\n    input = [\r\n        {\r\n            text: \"asdfg\",\r\n            children: [\r\n                {\r\n                    text: \"asdfg\",\r\n                    children: [...]\r\n                }\r\n            ]\r\n        }   \r\n    ]\r\n</pre>\r\n\r\nEach time you step into the `children` part, that represents another level of depth. The numbers input might look like `1.1` which would be the first piece of text from the second level of the object (0-based). Enter the function below...\r\n\r\n<script src=\"https://gist.github.com/3stacks/0d708f2f5fb8462ffa8f462f25e228cc.js\"></script>\r\n\r\nThis checks if:\r\n1. The current depth is equal to the total depth we need to traverse (numbers.length - 1)\r\n2. There are no children.\r\n\r\nIf either of those are the case, return the text, otherwise we call the function and increment the depth (where we currently are). For something like this you just have to ensure you initialise it with the correct number and make sure there\'s a default so you don\'t end up infinitely calling the function. \r\n\r\nEdit: For a more relatable example, here is a function that can calculate how many months it will take you to pay off your credit card given a debt amount and interest rate.\r\n\r\n<script src=\"https://gist.github.com/3stacks/beb35a65359ecde0d8dac6d833249857.js\"></script>\r\n\r\nYou initialise the month parameter with 1 (first month) and then it will call until there is no more debt. This is a fine use case for a `while` loop, so if you feel like using it, feel free. For another example of a good use case for recursion, see this article: [http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/](http://blog.javascriptroom.com/2013/01/10/fibonacci-an-introduction-to-recursion/).',310,'http://lukeboyle.com/310-revision-v1/',0,'revision','',0),(364,1,'2016-09-27 05:48:32','0000-00-00 00:00:00','','Using the fetch API','','draft','open','open','','','','','2016-09-27 05:48:32','2016-09-27 05:48:32','',0,'http://lukeboyle.com/?p=364',0,'post','',0),(365,1,'2016-09-27 05:48:32','2016-09-27 05:48:32','','Using the fetch API','','inherit','closed','closed','','364-revision-v1','','','2016-09-27 05:48:32','2016-09-27 05:48:32','',364,'http://lukeboyle.com/364-revision-v1/',0,'revision','',0),(367,1,'2016-10-13 02:57:36','2016-10-13 02:57:36','A quick-start guide for running Karma tests for Chrome in Travis CI.\n\nWhen you run Travis on a Node.js project, Travis will - by default - run <code>npm install</code> and then <code>npm test</code>. I first ran into the issue in an Angular project that had tests triggered in the <code>prepublish</code> command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\n\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment.\n\nFor this to work, you\'ll need to make changes to your <code>travis.yml</code> file and your karma config file.\n\n<h2>travis.yml</h2>\n\n<small>Note that I\'m using only latest node as that is the requirement for me</small>\n\n<pre>\n  language: node_js\n  node_js:\n    - \"node\"\n  before_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start\n</pre>\n\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\n\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\n\nMy test script is:\n\n<pre>\n\"test\": \"karma start karma.config.js\"\n</pre>\n\n<h2>karma.config.js</h2>\n\n<pre>\nconst configuration = {\n    files: [\n        {pattern: \'tests/**/**/**.*\', watched: true}\n    ],\n    customLaunchers: {\n        chromeTravisCi: {\n            base: \'Chrome\',\n            flags: [\'--no-sandbox\']\n        }\n    },\n    frameworks: [\'mocha\'],\n    browsers: [\'Chrome\'],\n    failOnEmptyTestSuite: true,\n    singleRun: true\n};\n\nif (process.env.TRAVIS) {\n    configuration.browsers = [\'chromeTravisCi\']\n}\n\nmodule.exports = function (config) {\n    config.set(configuration);\n};\n</pre>\n\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\n\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.','Running Karma tests for Chrome in Travis CI','','publish','open','open','','karma-tests-chrome-travis-ci','','','2016-10-13 02:58:53','2016-10-13 02:58:53','A quick-start guide for running Karma tests for Chrome in Travis CI.\r\n\r\nWhen you run Travis on a Node.js project, Travis will - by default - run `npm install` and then `npm test`. I first ran into the issue in an Angular project that had tests triggered in the `prepublish` command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\r\n\r\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment. \r\n\r\nFor this to work, you\'ll need to make changes to your `travis.yml` file and your karma config file.\r\n\r\n<h2>travis.yml</h2>\r\n\r\n<p><small>Note that I\'m using only latest node as that is the requirement for me</small></p>\r\n<pre>\r\n  language: node_js\r\n  node_js:\r\n    - \"node\"\r\n  before_script:\r\n    - export CHROME_BIN=chromium-browser\r\n    - export DISPLAY=:99.0\r\n    - sh -e /etc/init.d/xvfb start\r\n</pre>\r\n\r\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\r\n\r\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\r\n\r\nMy test script is:\r\n<pre>\r\n\"test\": \"karma start karma.config.js\"\r\n</pre>\r\n\r\n<h2>karma.config.js</h2>\r\n<pre>\r\nconst configuration = {\r\n    files: [\r\n        {pattern: \'tests/**/**/**.*\', watched: true}\r\n    ],\r\n    customLaunchers: {\r\n        chromeTravisCi: {\r\n            base: \'Chrome\',\r\n            flags: [\'--no-sandbox\']\r\n        }\r\n    },\r\n    frameworks: [\'mocha\'],\r\n    browsers: [\'Chrome\'],\r\n    failOnEmptyTestSuite: true,\r\n    singleRun: true\r\n};\r\n\r\nif (process.env.TRAVIS) {\r\n    configuration.browsers = [\'chromeTravisCi\']\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    config.set(configuration);\r\n};\r\n</pre>\r\n\r\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\r\n\r\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.',0,'http://lukeboyle.com/?p=367',0,'post','',0),(368,1,'2016-10-13 02:49:14','2016-10-13 02:49:14','When you run Travis on a Node.js project, Travis will - by default - run <code>npm install</code> and then <code>npm test</code>. I first ran into the issue in an Angular project that had tests triggered in the <code>prepublish</code> command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\n\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment.\n\nFor this to work, you\'ll need to make changes to your <code>travis.yml</code> file and your karma config file.\n\n<h2>travis.yml</h2>\n\n<small>Note that I\'m using only latest node as that is the requirement for me</small>\n\n<pre>\n  language: node_js\n  node_js:\n    - \"node\"\n  before_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start\n</pre>\n\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\n\nPersonally, I am using a','Running Karma tests for Chrome in Travis CI','','inherit','closed','closed','','367-revision-v1','','','2016-10-13 02:49:14','2016-10-13 02:49:14','When you run Travis on a Node.js project, Travis will - by default - run `npm install` and then `npm test`. I first ran into the issue in an Angular project that had tests triggered in the `prepublish` command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\r\n\r\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment. \r\n\r\nFor this to work, you\'ll need to make changes to your `travis.yml` file and your karma config file.\r\n\r\n<h2>travis.yml</h2>\r\n\r\n<p><small>Note that I\'m using only latest node as that is the requirement for me</small></p>\r\n<pre>\r\n  language: node_js\r\n  node_js:\r\n    - \"node\"\r\n  before_script:\r\n    - export CHROME_BIN=chromium-browser\r\n    - export DISPLAY=:99.0\r\n    - sh -e /etc/init.d/xvfb start\r\n</pre>\r\n\r\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\r\n\r\nPersonally, I am using a ',367,'http://lukeboyle.com/367-revision-v1/',0,'revision','',0),(369,1,'2016-10-13 02:57:36','2016-10-13 02:57:36','When you run Travis on a Node.js project, Travis will - by default - run <code>npm install</code> and then <code>npm test</code>. I first ran into the issue in an Angular project that had tests triggered in the <code>prepublish</code> command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\n\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment.\n\nFor this to work, you\'ll need to make changes to your <code>travis.yml</code> file and your karma config file.\n\n<h2>travis.yml</h2>\n\n<small>Note that I\'m using only latest node as that is the requirement for me</small>\n\n<pre>\n  language: node_js\n  node_js:\n    - \"node\"\n  before_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start\n</pre>\n\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\n\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\n\nMy test script is:\n\n<pre>\n\"test\": \"karma start karma.config.js\"\n</pre>\n\n<h2>karma.config.js</h2>\n\n<pre>\nconst configuration = {\n    files: [\n        {pattern: \'tests/**/**/**.*\', watched: true}\n    ],\n    customLaunchers: {\n        chromeTravisCi: {\n            base: \'Chrome\',\n            flags: [\'--no-sandbox\']\n        }\n    },\n    frameworks: [\'mocha\'],\n    browsers: [\'Chrome\'],\n    failOnEmptyTestSuite: true,\n    singleRun: true\n};\n\nif (process.env.TRAVIS) {\n    configuration.browsers = [\'chromeTravisCi\']\n}\n\nmodule.exports = function (config) {\n    config.set(configuration);\n};\n</pre>\n\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\n\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.','Running Karma tests for Chrome in Travis CI','','inherit','closed','closed','','367-revision-v1','','','2016-10-13 02:57:36','2016-10-13 02:57:36','When you run Travis on a Node.js project, Travis will - by default - run `npm install` and then `npm test`. I first ran into the issue in an Angular project that had tests triggered in the `prepublish` command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\r\n\r\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment. \r\n\r\nFor this to work, you\'ll need to make changes to your `travis.yml` file and your karma config file.\r\n\r\n<h2>travis.yml</h2>\r\n\r\n<p><small>Note that I\'m using only latest node as that is the requirement for me</small></p>\r\n<pre>\r\n  language: node_js\r\n  node_js:\r\n    - \"node\"\r\n  before_script:\r\n    - export CHROME_BIN=chromium-browser\r\n    - export DISPLAY=:99.0\r\n    - sh -e /etc/init.d/xvfb start\r\n</pre>\r\n\r\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\r\n\r\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\r\n\r\nMy test script is:\r\n<pre>\r\n\"test\": \"karma start karma.config.js\"\r\n</pre>\r\n\r\n<h2>karma.config.js</h2>\r\n<pre>\r\nconst configuration = {\r\n    files: [\r\n        {pattern: \'tests/**/**/**.*\', watched: true}\r\n    ],\r\n    customLaunchers: {\r\n        chromeTravisCi: {\r\n            base: \'Chrome\',\r\n            flags: [\'--no-sandbox\']\r\n        }\r\n    },\r\n    frameworks: [\'mocha\'],\r\n    browsers: [\'Chrome\'],\r\n    failOnEmptyTestSuite: true,\r\n    singleRun: true\r\n};\r\n\r\nif (process.env.TRAVIS) {\r\n    configuration.browsers = [\'chromeTravisCi\']\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    config.set(configuration);\r\n};\r\n</pre>\r\n\r\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\r\n\r\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.',367,'http://lukeboyle.com/367-revision-v1/',0,'revision','',0),(370,1,'2016-10-13 02:58:53','2016-10-13 02:58:53','A quick-start guide for running Karma tests for Chrome in Travis CI.\n\nWhen you run Travis on a Node.js project, Travis will - by default - run <code>npm install</code> and then <code>npm test</code>. I first ran into the issue in an Angular project that had tests triggered in the <code>prepublish</code> command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\n\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment.\n\nFor this to work, you\'ll need to make changes to your <code>travis.yml</code> file and your karma config file.\n\n<h2>travis.yml</h2>\n\n<small>Note that I\'m using only latest node as that is the requirement for me</small>\n\n<pre>\n  language: node_js\n  node_js:\n    - \"node\"\n  before_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start\n</pre>\n\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\n\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\n\nMy test script is:\n\n<pre>\n\"test\": \"karma start karma.config.js\"\n</pre>\n\n<h2>karma.config.js</h2>\n\n<pre>\nconst configuration = {\n    files: [\n        {pattern: \'tests/**/**/**.*\', watched: true}\n    ],\n    customLaunchers: {\n        chromeTravisCi: {\n            base: \'Chrome\',\n            flags: [\'--no-sandbox\']\n        }\n    },\n    frameworks: [\'mocha\'],\n    browsers: [\'Chrome\'],\n    failOnEmptyTestSuite: true,\n    singleRun: true\n};\n\nif (process.env.TRAVIS) {\n    configuration.browsers = [\'chromeTravisCi\']\n}\n\nmodule.exports = function (config) {\n    config.set(configuration);\n};\n</pre>\n\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\n\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.','Running Karma tests for Chrome in Travis CI','','inherit','closed','closed','','367-revision-v1','','','2016-10-13 02:58:53','2016-10-13 02:58:53','A quick-start guide for running Karma tests for Chrome in Travis CI.\r\n\r\nWhen you run Travis on a Node.js project, Travis will - by default - run `npm install` and then `npm test`. I first ran into the issue in an Angular project that had tests triggered in the `prepublish` command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\r\n\r\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment. \r\n\r\nFor this to work, you\'ll need to make changes to your `travis.yml` file and your karma config file.\r\n\r\n<h2>travis.yml</h2>\r\n\r\n<p><small>Note that I\'m using only latest node as that is the requirement for me</small></p>\r\n<pre>\r\n  language: node_js\r\n  node_js:\r\n    - \"node\"\r\n  before_script:\r\n    - export CHROME_BIN=chromium-browser\r\n    - export DISPLAY=:99.0\r\n    - sh -e /etc/init.d/xvfb start\r\n</pre>\r\n\r\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\r\n\r\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\r\n\r\nMy test script is:\r\n<pre>\r\n\"test\": \"karma start karma.config.js\"\r\n</pre>\r\n\r\n<h2>karma.config.js</h2>\r\n<pre>\r\nconst configuration = {\r\n    files: [\r\n        {pattern: \'tests/**/**/**.*\', watched: true}\r\n    ],\r\n    customLaunchers: {\r\n        chromeTravisCi: {\r\n            base: \'Chrome\',\r\n            flags: [\'--no-sandbox\']\r\n        }\r\n    },\r\n    frameworks: [\'mocha\'],\r\n    browsers: [\'Chrome\'],\r\n    failOnEmptyTestSuite: true,\r\n    singleRun: true\r\n};\r\n\r\nif (process.env.TRAVIS) {\r\n    configuration.browsers = [\'chromeTravisCi\']\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    config.set(configuration);\r\n};\r\n</pre>\r\n\r\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\r\n\r\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.',367,'http://lukeboyle.com/367-revision-v1/',0,'revision','',0),(371,1,'2016-10-13 02:58:59','2016-10-13 02:58:59','A quick-start guide for running Karma tests for Chrome in Travis CI.\n\nWhen you run Travis on a Node.js project, Travis will - by default - run <code>npm install</code> and then <code>npm test</code>. I first ran into the issue in an Angular project that had tests triggered in the <code>prepublish</code> command. My CI build failed and I decided to remove the prepublish hook and change the name of my test script until I had the time to come back. For months I\'ve been avoiding the issue, but I have finally solved it.\n\nThe Karma docs suggest that you can run the tests in Firefox with the --browsers flag (see <a href=\"https://karma-runner.github.io/0.8/plus/Travis-CI.html\" target=\"_blank\">https://karma-runner.github.io/0.8/plus/Travis-CI.html</a>). Travis has since updated so that Chrome can be loaded into the environment.\n\nFor this to work, you\'ll need to make changes to your <code>travis.yml</code> file and your karma config file.\n\n<h2>travis.yml</h2>\n\n<small>Note that I\'m using only latest node as that is the requirement for me</small>\n\n<pre>\n  language: node_js\n  node_js:\n    - \"node\"\n  before_script:\n    - export CHROME_BIN=chromium-browser\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start\n</pre>\n\nThe before_script is the special part, which points travis in the right direction for running Chrome. The last two lines are addressed in the karma docs linked above.\n\nPersonally, I am using a separate karma config file, and I want to make the changes within that config file to keep my test script clean.\n\nMy test script is:\n\n<pre>\n\"test\": \"karma start karma.config.js\"\n</pre>\n\n<h2>karma.config.js</h2>\n\n<pre>\nconst configuration = {\n    files: [\n        {pattern: \'tests/**/**/**.*\', watched: true}\n    ],\n    customLaunchers: {\n        chromeTravisCi: {\n            base: \'Chrome\',\n            flags: [\'--no-sandbox\']\n        }\n    },\n    frameworks: [\'mocha\'],\n    browsers: [\'Chrome\'],\n    failOnEmptyTestSuite: true,\n    singleRun: true\n};\n\nif (process.env.TRAVIS) {\n    configuration.browsers = [\'chromeTravisCi\']\n}\n\nmodule.exports = function (config) {\n    config.set(configuration);\n};\n</pre>\n\nLuckily, Travis sets the process env to TRAVIS and if we check for this, we set the configuration browsers to [\'chromeTravisCi\'] which is defined in the customLaunchers.\n\nHave whatever pre-processors you need in the configuration object and it should work fine when you deploy.','Running Karma tests for Chrome in Travis CI','','inherit','closed','closed','','367-autosave-v1','','','2016-10-13 02:58:59','2016-10-13 02:58:59','',367,'http://lukeboyle.com/367-autosave-v1/',0,'revision','',0),(372,1,'2016-10-19 04:47:24','2016-10-19 04:47:24','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\n\n<pre><code class=\"javascript\">const appState = {\n    key1: {...},\n    key2: {...}\n}\n</code></pre>\n\nand set the data like this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'appData\', appState);\n</code></pre>\n\nThe issue with this is you may not want <code>key1</code> and <code>key2</code> to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'key1\', key1, \'myAppState\');\nlocalStorageManager.set(\'key2\', key2, \'myAppState\');\n</code></pre>\n\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\n\n<pre><code class=\"javascript\">localStorageManager.get(\'key1\', \'myAppState\');\n</code></pre>\n\nThe app is now more robust internally and can handle cases of missing data better. It also uses the <code>getItem</code> and <code>setItem</code> methods internally instead of accessing the localStorage directly.\n\nTo get started, install via npm with <code>npm install @lukeboyle/local-storage-manager</code>\n\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager','Local Storage Manager version 2.1 is out now','','publish','open','open','','local-storage-manager-version-2-1','','','2016-10-19 04:53:49','2016-10-19 04:53:49','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\r\n\r\n```javascript\r\nconst appState = {\r\n    key1: {...},\r\n    key2: {...}\r\n}\r\n```\r\n\r\nand set the data like this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;appData&#039;, appState);\r\n```\r\n\r\nThe issue with this is you may not want `key1` and `key2` to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;key1&#039;, key1, &#039;myAppState&#039;);\r\nlocalStorageManager.set(&#039;key2&#039;, key2, &#039;myAppState&#039;);\r\n```\r\n\r\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\r\n\r\n```javascript\r\nlocalStorageManager.get(&#039;key1&#039;, &#039;myAppState&#039;);\r\n```\r\n\r\nThe app is now more robust internally and can handle cases of missing data better. It also uses the `getItem` and `setItem` methods internally instead of accessing the localStorage directly.\r\n\r\nTo get started, install via npm with `npm install @lukeboyle/local-storage-manager`\r\n\r\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager',0,'http://lukeboyle.com/?p=372',0,'post','',0),(373,1,'2016-10-19 04:41:58','2016-10-19 04:41:58','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\n\n<pre><code class=\"javascript\">const appState = {\n    key1: {...},\n    key2: {...}\n}\n</code></pre>\n\nand set the data like this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'appData\', appState);\n</code></pre>\n\nThe issue with this is you may not want <code>key1</code> and <code>key2</code> to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'key1\', key1, \'myAppState\');\nlocalStorageManager.set(\'key2\', key2, \'myAppState\');\n</code></pre>\n\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\n\n<pre><code class=\"javascript\">localStorageManager.get(\'key1\', \'myAppState\');\n</code></pre>\n\nTo get started, install via npm with <code>npm install @lukeboyle/local-storage-manager</code>\n\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager','Local Storage Manager version 2.1 is out now','','inherit','closed','closed','','372-revision-v1','','','2016-10-19 04:41:58','2016-10-19 04:41:58','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\r\n\r\n```javascript\r\nconst appState = {\r\n    key1: {...},\r\n    key2: {...}\r\n}\r\n```\r\n\r\nand set the data like this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;appData&#039;, appState);\r\n```\r\n\r\nThe issue with this is you may not want `key1` and `key2` to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;key1&#039;, key1, &#039;myAppState&#039;);\r\nlocalStorageManager.set(&#039;key2&#039;, key2, &#039;myAppState&#039;);\r\n```\r\n\r\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\r\n\r\n```javascript\r\nlocalStorageManager.get(&#039;key1&#039;, &#039;myAppState&#039;);\r\n```\r\n\r\nTo get started, install via npm with `npm install @lukeboyle/local-storage-manager`\r\n\r\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager',372,'http://lukeboyle.com/372-revision-v1/',0,'revision','',0),(374,1,'2016-10-19 04:47:24','2016-10-19 04:47:24','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\n\n<pre><code class=\"javascript\">const appState = {\n    key1: {...},\n    key2: {...}\n}\n</code></pre>\n\nand set the data like this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'appData\', appState);\n</code></pre>\n\nThe issue with this is you may not want <code>key1</code> and <code>key2</code> to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\n\n<pre><code class=\"javascript\">localStorageManager.set(\'key1\', key1, \'myAppState\');\nlocalStorageManager.set(\'key2\', key2, \'myAppState\');\n</code></pre>\n\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\n\n<pre><code class=\"javascript\">localStorageManager.get(\'key1\', \'myAppState\');\n</code></pre>\n\nThe app is now more robust internally and can handle cases of missing data better. It also uses the <code>getItem</code> and <code>setItem</code> methods internally instead of accessing the localStorage directly.\n\nTo get started, install via npm with <code>npm install @lukeboyle/local-storage-manager</code>\n\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager','Local Storage Manager version 2.1 is out now','','inherit','closed','closed','','372-revision-v1','','','2016-10-19 04:47:24','2016-10-19 04:47:24','The latest version of local-storage-manager has had the internal interface greatly improved for tidiness and best practice, and now has the new Namespace feature. Traditionally, you would have to store your data like so:\r\n\r\n```javascript\r\nconst appState = {\r\n    key1: {...},\r\n    key2: {...}\r\n}\r\n```\r\n\r\nand set the data like this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;appData&#039;, appState);\r\n```\r\n\r\nThe issue with this is you may not want `key1` and `key2` to be grouped together but don\'t want them to be tossed straight into the local storage. With namespaces you can do this:\r\n\r\n```javascript\r\nlocalStorageManager.set(&#039;key1&#039;, key1, &#039;myAppState&#039;);\r\nlocalStorageManager.set(&#039;key2&#039;, key2, &#039;myAppState&#039;);\r\n```\r\n\r\nThis makes it easier to access all of your data at once while still keeping those keys theoretically separate. When accessing the namespaced data, you simply add the namespace as the second arg like so:\r\n\r\n```javascript\r\nlocalStorageManager.get(&#039;key1&#039;, &#039;myAppState&#039;);\r\n```\r\n\r\nThe app is now more robust internally and can handle cases of missing data better. It also uses the `getItem` and `setItem` methods internally instead of accessing the localStorage directly.\r\n\r\nTo get started, install via npm with `npm install @lukeboyle/local-storage-manager`\r\n\r\nSee the npm page with documentation and in depth instructions at - https://www.npmjs.com/package/@lukeboyle/local-storage-manager',372,'http://lukeboyle.com/372-revision-v1/',0,'revision','',0),(376,1,'2016-12-08 05:51:25','2016-12-08 05:51:25','I\'m sorry. &#9829;\n\n<h2>5. Lazy weekend mornings in here with you</h2>\n\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\n\n<h2>4. Yochi with you</h2>\n\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\n\n<h2>3. Coffee and sitting outside looking at doggos</h2>\n\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\n\n<h2>2. With a croissant</h2>\n\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\n\n<h2>1. Rare trips away.</h2>\n\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />','5 Reasons I miss Ronnie','','private','open','open','','5-reasons-miss-ronnie','','','2016-12-08 06:10:51','2016-12-08 06:10:51','I\'m sorry. &#9829;\r\n<h2>5. Lazy weekend mornings in here with you</h2>\r\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\r\n<h2>4. Yochi with you</h2>\r\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\r\n<h2>3. Coffee and sitting outside looking at doggos</h2>\r\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\r\n<h2>2. With a croissant</h2>\r\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\r\n<h2>1. Rare trips away.</h2>\r\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />',0,'http://lukeboyle.com/?p=376',0,'post','',0),(377,1,'2016-12-08 05:48:34','2016-12-08 05:48:34','','img_0298','','inherit','open','closed','','img_0298','','','2016-12-08 05:48:34','2016-12-08 05:48:34','',376,'http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg',0,'attachment','image/jpeg',0),(378,1,'2016-12-08 05:51:25','2016-12-08 05:51:25','I\'m sorry.\n\n<h2>5. Lazy weekend mornings in here with you</h2>\n\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\n\n<h2>4. Yochi with you</h2>\n\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" />\n\n<h2>3.Coffee and sitting outside looking at doggos</h2>\n\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" />\n\n<h2>2.With a croissant</h2>\n\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" />\n\n<h2>1.Rare trips away.</h2>\n\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" />','5 Reasons I miss Ronnie','','inherit','closed','closed','','376-revision-v1','','','2016-12-08 05:51:25','2016-12-08 05:51:25','I\'m sorry.\r\n<h2>5. Lazy weekend mornings in here with you</h2>\r\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\r\n<h2>4. Yochi with you</h2>\r\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" />\r\n<h2>3.Coffee and sitting outside looking at doggos</h2>\r\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" />\r\n<h2>2.With a croissant</h2>\r\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" />\r\n<h2>1.Rare trips away.</h2>\r\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" />',376,'http://lukeboyle.com/376-revision-v1/',0,'revision','',0),(379,1,'2016-12-08 05:52:10','2016-12-08 05:52:10','I\'m sorry.\n\n<h2>5. Lazy weekend mornings in here with you</h2>\n\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\n\n<h2>4. Yochi with you</h2>\n\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\n\n<h2>3.Coffee and sitting outside looking at doggos</h2>\n\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\"  />\n\n<h2>2.With a croissant</h2>\n\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\"  />\n\n<h2>1.Rare trips away.</h2>\n\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\"  />','5 Reasons I miss Ronnie','','inherit','closed','closed','','376-revision-v1','','','2016-12-08 05:52:10','2016-12-08 05:52:10','I\'m sorry.\r\n<h2>5. Lazy weekend mornings in here with you</h2>\r\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\r\n<h2>4. Yochi with you</h2>\r\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\r\n<h2>3.Coffee and sitting outside looking at doggos</h2>\r\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\"  />\r\n<h2>2.With a croissant</h2>\r\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\"  />\r\n<h2>1.Rare trips away.</h2>\r\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\"  />',376,'http://lukeboyle.com/376-revision-v1/',0,'revision','',0),(380,1,'2016-12-08 05:53:33','2016-12-08 05:53:33','I\'m sorry. &#9829;\n\n<h2>5. Lazy weekend mornings in here with you</h2>\n\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\n\n<h2>4. Yochi with you</h2>\n\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\n\n<h2>3.Coffee and sitting outside looking at doggos</h2>\n\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\n\n<h2>2.With a croissant</h2>\n\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\n\n<h2>1.Rare trips away.</h2>\n\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />','5 Reasons I miss Ronnie','','inherit','closed','closed','','376-revision-v1','','','2016-12-08 05:53:33','2016-12-08 05:53:33','I\'m sorry. &#9829;\r\n<h2>5. Lazy weekend mornings in here with you</h2>\r\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\r\n<h2>4. Yochi with you</h2>\r\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\r\n<h2>3.Coffee and sitting outside looking at doggos</h2>\r\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\r\n<h2>2.With a croissant</h2>\r\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\r\n<h2>1.Rare trips away.</h2>\r\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />',376,'http://lukeboyle.com/376-revision-v1/',0,'revision','',0),(381,1,'2016-12-08 05:53:50','2016-12-08 05:53:50','I\'m sorry. &#9829;\n\n<h2>5. Lazy weekend mornings in here with you</h2>\n\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\n\n<h2>4. Yochi with you</h2>\n\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\n\n<h2>3. Coffee and sitting outside looking at doggos</h2>\n\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\n\n<h2>2. With a croissant</h2>\n\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\n\n<h2>1. Rare trips away.</h2>\n\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />','5 Reasons I miss Ronnie','','inherit','closed','closed','','376-revision-v1','','','2016-12-08 05:53:50','2016-12-08 05:53:50','I\'m sorry. &#9829;\r\n<h2>5. Lazy weekend mornings in here with you</h2>\r\n<img class=\"alignnone size-full wp-image-377\" src=\"http://lukeboyle.com/app/uploads/2016/12/IMG_0298.jpg\" alt=\"img_0298\" width=\"782\" height=\"586\" />\r\n<h2>4. Yochi with you</h2>\r\n<img src=\"http://i.imgur.com/ssA9lpi.jpg\" width=\"782\" height=\"586\" />\r\n<h2>3. Coffee and sitting outside looking at doggos</h2>\r\n<img src=\"http://i.imgur.com/lP3HnpP.jpg\" width=\"782\" height=\"586\" />\r\n<h2>2. With a croissant</h2>\r\n<img src=\"http://i.imgur.com/SAEBmEL.jpg\" width=\"782\" height=\"586\" />\r\n<h2>1. Rare trips away.</h2>\r\n<img src=\"http://i.imgur.com/skDVYFG.jpg\" width=\"782\" height=\"586\" />',376,'http://lukeboyle.com/376-revision-v1/',0,'revision','',0),(382,1,'2016-12-14 02:41:39','2016-12-14 02:41:39','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n        saveCurrentBranch(repo).then(\n            repoName =&gt; {\n                featureBranch = repoName\n            })\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n</code></pre>\n\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\n\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\n\n<pre><code>shell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\n\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\n</code></pre>\n\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\n\n<pre><code class=\"javascript\"><br />/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction switchToDevelop(repo) {\n    return repo.checkoutBranch(\'develop\');\n}\n\nswitchToDevelop(repo).then(...)\n</code></pre>\n\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\n\n<pre><code class=\"javascript\">shell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\n\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\n</code></pre>\n\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like <code>.argus-eyes/diff_develop_feature_branch_name</code>\n\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\n\n<h2>Retrospective</h2>\n\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.','Automating CSS regression testing','','publish','open','open','','automating-css-regression-testing-argus-eyes-phantomjs','','','2016-12-22 11:15:28','2016-12-22 11:15:28','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        saveCurrentBranch(repo).then(\r\n            repoName =&gt; {\r\n                featureBranch = repoName\r\n            })\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n```\r\n\r\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\r\n\r\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\r\n\r\n```\r\nshell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\r\n\r\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\r\n```\r\n\r\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction switchToDevelop(repo) {\r\n    return repo.checkoutBranch(\'develop\');\r\n}\r\n\r\nswitchToDevelop(repo).then(...)\r\n```\r\n\r\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\r\n\r\n\r\n```javascript\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\r\n\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\r\n```\r\n\r\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like `.argus-eyes/diff_develop_feature_branch_name`\r\n\r\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\r\n\r\n## Retrospective\r\n\r\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.',0,'http://lukeboyle.com/?p=382',0,'post','',0),(383,1,'2016-12-13 00:48:05','2016-12-13 00:48:05','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>)\n\nhttp://www.nodegit.org/','Automating CSS regression testing with Argus Eyes (PhantomCSS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-13 00:48:05','2016-12-13 00:48:05','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>)\r\n\r\n\r\n\r\nhttp://www.nodegit.org/',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(384,1,'2016-12-13 01:15:06','2016-12-13 01:15:06','','nav','','inherit','open','closed','','nav','','','2016-12-13 01:15:06','2016-12-13 01:15:06','',382,'http://lukeboyle.com/app/uploads/2016/12/nav.png',0,'attachment','image/png',0),(385,1,'2016-12-13 01:15:43','2016-12-13 01:15:43','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nhttp://www.nodegit.org/','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-13 01:15:43','2016-12-13 01:15:43','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong. \r\n\r\nhttp://www.nodegit.org/',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(386,1,'2016-12-13 01:16:54','2016-12-13 01:16:54','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nhttp://www.nodegit.org/','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-13 01:16:54','2016-12-13 01:16:54','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nhttp://www.nodegit.org/',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(387,1,'2016-12-13 01:18:04','2016-12-13 01:18:04','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nhttp://www.nodegit.org/','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-13 01:18:04','2016-12-13 01:18:04','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nhttp://www.nodegit.org/',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(388,1,'2016-12-14 01:46:13','2016-12-14 01:46:13','15 - The I.L.Y\'s - Scum With Boundaries\n\n<img class=\"alignnone size-full wp-image-402\" src=\"http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\" alt=\"artworks-000171795169-xpeqqm-t500x500\" width=\"600\" height=\"600\" />\n\n14 - Ab-Soul - Do What Thou Wilt.\n\n<img class=\"alignnone size-full wp-image-401\" src=\"http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg\" alt=\"dwtw\" width=\"715\" height=\"715\" />\n\n13 - Kendrick Lamar - Untitled, Unmastered\n\n<img class=\"alignnone size-full wp-image-400\" src=\"http://lukeboyle.com/app/uploads/2016/07/untitled.jpg\" alt=\"untitled\" width=\"1000\" height=\"1000\" />\n\n12 - Open Mike Eagle - Hella Personal Film Festival\n\n<img class=\"alignnone size-full wp-image-399\" src=\"http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg\" alt=\"a1158245013_10\" width=\"1200\" height=\"1200\" />\n\n11 - A Tribe Called Quest - We got it from Here... Thank You 4 Your Service<i></i>\n\n<img class=\"alignnone size-full wp-image-398\" src=\"http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\" alt=\"09e256ce885fe6b3cf181239c3b3231c-1000x1000x1\" width=\"1000\" height=\"1000\" />\n\n10 - Kanye West - The Life of Pablo\n\n<img class=\"alignnone size-full wp-image-397\" src=\"http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg\" alt=\"the_life_of_pablo_alternate\" width=\"600\" height=\"600\" />\n\n9 - YG - Still Brazy\n\n<img class=\"alignnone size-full wp-image-396\" src=\"http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg\" alt=\"e308ca36\" width=\"600\" height=\"600\" />\n\n8 - Isaiah Rashad - The Sun\'s Tirade\n\n<img class=\"alignnone size-full wp-image-395\" src=\"http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg\" alt=\"thesunstirade\" width=\"2048\" height=\"2048\" />\n\n7 - Danny Brown - Atrocity Exhibition\n\n<img class=\"alignnone size-full wp-image-394\" src=\"http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg\" alt=\"atrocityexhibition\" width=\"1000\" height=\"1000\" />\n\n6 - NxWorries - Yes Lawd\n\n<img class=\"alignnone size-full wp-image-393\" src=\"http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\" alt=\"nxworries-anderson-paak-knxwledge-yes-lawd-cover-art\" width=\"626\" height=\"626\" />\n\n5 - Death Grips - Bottomless Pit\n\n<img class=\"alignnone size-full wp-image-392\" src=\"http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg\" alt=\"deathgripscoverbottom\" width=\"1280\" height=\"1280\" />\n\n4 - Flatbush Zombies - 3001: A Laced Oddysey\n\n<img class=\"alignnone size-full wp-image-391\" src=\"http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg\" alt=\"3001alaced_odyssey\" width=\"400\" height=\"400\" />\n\n3 - ScHoolboy Q - Blank Face LP\n\n<img class=\"alignnone size-full wp-image-390\" src=\"http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg\" alt=\"blank-face-lp\" width=\"1200\" height=\"1200\" />\n\n2 - Frank Ocean - Blonde\n\n&nbsp;\n\n1 - Anderson .Paak - Malibu\n\n<img class=\"alignnone size-full wp-image-389\" src=\"http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg\" alt=\"anderson-paak-malibu-cover-art\" width=\"630\" height=\"630\" />','Top 15 Albums of 2016','','inherit','closed','closed','','242-autosave-v1','','','2016-12-14 01:46:13','2016-12-14 01:46:13','',242,'http://lukeboyle.com/242-autosave-v1/',0,'revision','',0),(389,1,'2016-12-14 01:42:20','2016-12-14 01:42:20','','anderson-paak-malibu-cover-art','','inherit','open','closed','','anderson-paak-malibu-cover-art','','','2016-12-14 01:42:20','2016-12-14 01:42:20','',242,'http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg',0,'attachment','image/jpeg',0),(390,1,'2016-12-14 01:43:03','2016-12-14 01:43:03','','blank-face-lp','','inherit','open','closed','','blank-face-lp','','','2016-12-14 01:43:03','2016-12-14 01:43:03','',242,'http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg',0,'attachment','image/jpeg',0),(391,1,'2016-12-14 01:43:17','2016-12-14 01:43:17','','3001alaced_odyssey','','inherit','open','closed','','3001alaced_odyssey','','','2016-12-14 01:43:17','2016-12-14 01:43:17','',242,'http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg',0,'attachment','image/jpeg',0),(392,1,'2016-12-14 01:43:29','2016-12-14 01:43:29','','deathgripscoverbottom','','inherit','open','closed','','deathgripscoverbottom','','','2016-12-14 01:43:29','2016-12-14 01:43:29','',242,'http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg',0,'attachment','image/jpeg',0),(393,1,'2016-12-14 01:43:38','2016-12-14 01:43:38','','nxworries-anderson-paak-knxwledge-yes-lawd-cover-art','','inherit','open','closed','','nxworries-anderson-paak-knxwledge-yes-lawd-cover-art','','','2016-12-14 01:43:38','2016-12-14 01:43:38','',242,'http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg',0,'attachment','image/jpeg',0),(394,1,'2016-12-14 01:43:45','2016-12-14 01:43:45','','atrocityexhibition','','inherit','open','closed','','atrocityexhibition','','','2016-12-14 01:43:45','2016-12-14 01:43:45','',242,'http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg',0,'attachment','image/jpeg',0),(395,1,'2016-12-14 01:44:57','2016-12-14 01:44:57','','thesunstirade','','inherit','open','closed','','thesunstirade','','','2016-12-14 01:44:57','2016-12-14 01:44:57','',242,'http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg',0,'attachment','image/jpeg',0),(396,1,'2016-12-14 01:45:06','2016-12-14 01:45:06','','e308ca36','','inherit','open','closed','','e308ca36','','','2016-12-14 01:45:06','2016-12-14 01:45:06','',242,'http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg',0,'attachment','image/jpeg',0),(397,1,'2016-12-14 01:45:12','2016-12-14 01:45:12','','the_life_of_pablo_alternate','','inherit','open','closed','','the_life_of_pablo_alternate','','','2016-12-14 01:45:12','2016-12-14 01:45:12','',242,'http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg',0,'attachment','image/jpeg',0),(398,1,'2016-12-14 01:45:23','2016-12-14 01:45:23','','09e256ce885fe6b3cf181239c3b3231c-1000x1000x1','','inherit','open','closed','','09e256ce885fe6b3cf181239c3b3231c-1000x1000x1','','','2016-12-14 01:45:23','2016-12-14 01:45:23','',242,'http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg',0,'attachment','image/jpeg',0),(399,1,'2016-12-14 01:45:33','2016-12-14 01:45:33','','a1158245013_10','','inherit','open','closed','','a1158245013_10','','','2016-12-14 01:45:33','2016-12-14 01:45:33','',242,'http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg',0,'attachment','image/jpeg',0),(400,1,'2016-12-14 01:45:46','2016-12-14 01:45:46','','untitled','','inherit','open','closed','','untitled','','','2016-12-14 01:45:46','2016-12-14 01:45:46','',242,'http://lukeboyle.com/app/uploads/2016/07/untitled.jpg',0,'attachment','image/jpeg',0),(401,1,'2016-12-14 01:45:54','2016-12-14 01:45:54','','dwtw','','inherit','open','closed','','dwtw','','','2016-12-14 01:45:54','2016-12-14 01:45:54','',242,'http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg',0,'attachment','image/jpeg',0),(402,1,'2016-12-14 01:46:02','2016-12-14 01:46:02','','artworks-000171795169-xpeqqm-t500x500','','inherit','open','closed','','artworks-000171795169-xpeqqm-t500x500','','','2016-12-14 01:46:02','2016-12-14 01:46:02','',242,'http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg',0,'attachment','image/jpeg',0),(403,1,'2016-12-14 01:47:41','2016-12-14 01:47:41','','frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df','','inherit','open','closed','','frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df','','','2016-12-14 01:47:41','2016-12-14 01:47:41','',242,'http://lukeboyle.com/app/uploads/2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg',0,'attachment','image/jpeg',0),(404,1,'2016-12-14 01:48:15','2016-12-14 01:48:15','15 - The I.L.Y\'s - Scum With Boundaries\n\n<img class=\"alignnone size-full wp-image-402\" src=\"http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\" alt=\"artworks-000171795169-xpeqqm-t500x500\" width=\"600\" height=\"600\" />\n\n14 - Ab-Soul - Do What Thou Wilt.\n\n<img class=\"alignnone size-full wp-image-401\" src=\"http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg\" alt=\"dwtw\" width=\"600\" height=\"600\" />\n\n13 - Kendrick Lamar - Untitled, Unmastered\n\n<img class=\"alignnone size-full wp-image-400\" src=\"http://lukeboyle.com/app/uploads/2016/07/untitled.jpg\" alt=\"untitled\" width=\"600\" height=\"600\" />\n\n12 - Open Mike Eagle - Hella Personal Film Festival\n\n<img class=\"alignnone size-full wp-image-399\" src=\"http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg\" alt=\"a1158245013_10\" width=\"600\" height=\"600\" />\n\n11 - A Tribe Called Quest - We got it from Here... Thank You 4 Your Service<i></i>\n\n<img class=\"alignnone size-full wp-image-398\" src=\"http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\" alt=\"09e256ce885fe6b3cf181239c3b3231c-1000x1000x1\" width=\"600\" height=\"600\" />\n\n10 - Kanye West - The Life of Pablo\n\n<img class=\"alignnone size-full wp-image-397\" src=\"http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg\" alt=\"the_life_of_pablo_alternate\" width=\"600\" height=\"600\" />\n\n9 - YG - Still Brazy\n\n<img class=\"alignnone size-full wp-image-396\" src=\"http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg\" alt=\"e308ca36\" width=\"600\" height=\"600\" />\n\n8 - Isaiah Rashad - The Sun\'s Tirade\n\n<img class=\"alignnone size-full wp-image-395\" src=\"http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg\" alt=\"thesunstirade\" width=\"600\" height=\"600\" />\n\n7 - Danny Brown - Atrocity Exhibition\n\n<img class=\"alignnone size-full wp-image-394\" src=\"http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg\" alt=\"atrocityexhibition\" width=\"600\" height=\"600\" />\n\n6 - NxWorries - Yes Lawd\n\n<img class=\"alignnone size-full wp-image-393\" src=\"http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\" alt=\"nxworries-anderson-paak-knxwledge-yes-lawd-cover-art\" width=\"600\" height=\"600\" />\n\n5 - Death Grips - Bottomless Pit\n\n<img class=\"alignnone size-full wp-image-392\" src=\"http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg\" alt=\"deathgripscoverbottom\" width=\"600\" height=\"600\" />\n\n4 - Flatbush Zombies - 3001: A Laced Oddysey\n\n<img class=\"alignnone size-full wp-image-391\" src=\"http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg\" alt=\"3001alaced_odyssey\" width=\"600\" height=\"600\" />\n\n3 - ScHoolboy Q - Blank Face LP\n\n<img class=\"alignnone size-full wp-image-390\" src=\"http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg\" alt=\"blank-face-lp\" width=\"600\" height=\"600\" />\n\n2 - Frank Ocean - Blonde\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg\" alt=\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df\" width=\"600\" height=\"600\" class=\"alignnone size-full wp-image-403\" />\n\n1 - Anderson .Paak - Malibu\n\n<img class=\"alignnone size-full wp-image-389\" src=\"http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg\" alt=\"anderson-paak-malibu-cover-art\" width=\"600\" height=\"600\" />','Top 15 Albums of 2016','','inherit','closed','closed','','242-revision-v1','','','2016-12-14 01:48:15','2016-12-14 01:48:15','15 - The I.L.Y\'s - Scum With Boundaries\r\n\r\n<img class=\"alignnone size-full wp-image-402\" src=\"http://lukeboyle.com/app/uploads/2016/07/artworks-000171795169-xpeqqm-t500x500.jpg\" alt=\"artworks-000171795169-xpeqqm-t500x500\" width=\"600\" height=\"600\" />\r\n\r\n14 - Ab-Soul - Do What Thou Wilt.\r\n\r\n<img class=\"alignnone size-full wp-image-401\" src=\"http://lukeboyle.com/app/uploads/2016/07/dwtw.jpg\" alt=\"dwtw\" width=\"600\" height=\"600\" />\r\n\r\n13 - Kendrick Lamar - Untitled, Unmastered\r\n\r\n<img class=\"alignnone size-full wp-image-400\" src=\"http://lukeboyle.com/app/uploads/2016/07/untitled.jpg\" alt=\"untitled\" width=\"600\" height=\"600\" />\r\n\r\n12 - Open Mike Eagle - Hella Personal Film Festival\r\n\r\n<img class=\"alignnone size-full wp-image-399\" src=\"http://lukeboyle.com/app/uploads/2016/07/a1158245013_10-1.jpg\" alt=\"a1158245013_10\" width=\"600\" height=\"600\" />\r\n\r\n11 - A Tribe Called Quest - We got it from Here... Thank You 4 Your Service<i></i>\r\n\r\n<img class=\"alignnone size-full wp-image-398\" src=\"http://lukeboyle.com/app/uploads/2016/07/09e256ce885fe6b3cf181239c3b3231c.1000x1000x1.jpg\" alt=\"09e256ce885fe6b3cf181239c3b3231c-1000x1000x1\" width=\"600\" height=\"600\" />\r\n\r\n10 - Kanye West - The Life of Pablo\r\n\r\n<img class=\"alignnone size-full wp-image-397\" src=\"http://lukeboyle.com/app/uploads/2016/07/The_life_of_pablo_alternate.jpg\" alt=\"the_life_of_pablo_alternate\" width=\"600\" height=\"600\" />\r\n\r\n9 - YG - Still Brazy\r\n\r\n<img class=\"alignnone size-full wp-image-396\" src=\"http://lukeboyle.com/app/uploads/2016/07/e308ca36.jpg\" alt=\"e308ca36\" width=\"600\" height=\"600\" />\r\n\r\n8 - Isaiah Rashad - The Sun\'s Tirade\r\n\r\n<img class=\"alignnone size-full wp-image-395\" src=\"http://lukeboyle.com/app/uploads/2016/07/TheSunsTirade.jpeg\" alt=\"thesunstirade\" width=\"600\" height=\"600\" />\r\n\r\n7 - Danny Brown - Atrocity Exhibition\r\n\r\n<img class=\"alignnone size-full wp-image-394\" src=\"http://lukeboyle.com/app/uploads/2016/07/AtrocityExhibition.jpg\" alt=\"atrocityexhibition\" width=\"600\" height=\"600\" />\r\n\r\n6 - NxWorries - Yes Lawd\r\n\r\n<img class=\"alignnone size-full wp-image-393\" src=\"http://lukeboyle.com/app/uploads/2016/07/NxWorries-Anderson-.Paak-Knxwledge-Yes-Lawd-cover-art.jpg\" alt=\"nxworries-anderson-paak-knxwledge-yes-lawd-cover-art\" width=\"600\" height=\"600\" />\r\n\r\n5 - Death Grips - Bottomless Pit\r\n\r\n<img class=\"alignnone size-full wp-image-392\" src=\"http://lukeboyle.com/app/uploads/2016/07/deathgripscoverbottom.jpg\" alt=\"deathgripscoverbottom\" width=\"600\" height=\"600\" />\r\n\r\n4 - Flatbush Zombies - 3001: A Laced Oddysey\r\n\r\n<img class=\"alignnone size-full wp-image-391\" src=\"http://lukeboyle.com/app/uploads/2016/07/3001ALaced_Odyssey.jpeg\" alt=\"3001alaced_odyssey\" width=\"600\" height=\"600\" />\r\n\r\n3 - ScHoolboy Q - Blank Face LP\r\n\r\n<img class=\"alignnone size-full wp-image-390\" src=\"http://lukeboyle.com/app/uploads/2016/07/Blank-Face-LP.jpg\" alt=\"blank-face-lp\" width=\"600\" height=\"600\" />\r\n\r\n2 - Frank Ocean - Blonde\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/07/frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df.jpg\" alt=\"frank-ocean-blond-compressed-0933daea-f052-40e5-85a4-35e07dac73df\" width=\"600\" height=\"600\" class=\"alignnone size-full wp-image-403\" />\r\n\r\n1 - Anderson .Paak - Malibu\r\n\r\n<img class=\"alignnone size-full wp-image-389\" src=\"http://lukeboyle.com/app/uploads/2016/07/anderson-.paak-malibu-cover-art.jpg\" alt=\"anderson-paak-malibu-cover-art\" width=\"600\" height=\"600\" />',242,'http://lukeboyle.com/242-revision-v1/',0,'revision','',0),(405,1,'2016-12-14 01:51:16','0000-00-00 00:00:00','','Responsive imagery in 2016','','draft','open','open','','','','','2016-12-14 01:51:16','2016-12-14 01:51:16','',0,'http://lukeboyle.com/?p=405',0,'post','',0),(406,1,'2016-12-14 01:50:29','2016-12-14 01:50:29','','desktop','','inherit','open','closed','','desktop','','','2016-12-14 01:50:29','2016-12-14 01:50:29','',405,'http://lukeboyle.com/app/uploads/2016/12/Desktop.jpg',0,'attachment','image/jpeg',0),(407,1,'2016-12-14 01:51:16','2016-12-14 01:51:16','','Responsive imagery in 2016','','inherit','closed','closed','','405-revision-v1','','','2016-12-14 01:51:16','2016-12-14 01:51:16','',405,'http://lukeboyle.com/405-revision-v1/',0,'revision','',0),(408,1,'2016-12-14 02:01:08','2016-12-14 02:01:08','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n\n        saveCurrentBranch(repo).then(...)\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n\n</code></pre>','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-14 02:01:08','2016-12-14 02:01:08','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        \r\n        saveCurrentBranch(repo).then(...)\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n\r\n```',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(409,1,'2016-12-14 02:04:56','2016-12-14 02:04:56','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n        saveCurrentBranch(repo).then(\n            repoName =&gt; {\n                featureBranch = repoName\n            })\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n</code></pre>\n\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\n\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\n\n<pre><code>shell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\n</code></pre>','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-14 02:04:56','2016-12-14 02:04:56','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        saveCurrentBranch(repo).then(\r\n            repoName =&gt; {\r\n                featureBranch = repoName\r\n            })\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n```\r\n\r\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\r\n\r\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\r\n\r\n```\r\nshell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\r\n```\r\n\r\n\r\n',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(410,1,'2016-12-14 02:15:43','2016-12-14 02:15:43','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n        saveCurrentBranch(repo).then(\n            repoName =&gt; {\n                featureBranch = repoName\n            })\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n</code></pre>\n\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\n\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\n\n<pre><code>shell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\n\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\n</code></pre>\n\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\n\n<pre><code class=\"javascript\"><br />/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction switchToDevelop(repo) {\n    return repo.checkoutBranch(\'develop\');\n}\n\nswitchToDevelop(repo).then(...)\n</code></pre>\n\nAfter successfully changing to develop, we still have to capture the branch and then compare them\n\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-14 02:15:43','2016-12-14 02:15:43','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        saveCurrentBranch(repo).then(\r\n            repoName =&gt; {\r\n                featureBranch = repoName\r\n            })\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n```\r\n\r\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\r\n\r\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\r\n\r\n```\r\nshell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\r\n\r\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\r\n```\r\n\r\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction switchToDevelop(repo) {\r\n    return repo.checkoutBranch(\'develop\');\r\n}\r\n\r\nswitchToDevelop(repo).then(...)\r\n```\r\n\r\nAfter successfully changing to develop, we still have to capture the branch and then compare them\r\n\r\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\r\n',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(411,1,'2016-12-14 02:41:39','2016-12-14 02:41:39','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n        saveCurrentBranch(repo).then(\n            repoName =&gt; {\n                featureBranch = repoName\n            })\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n</code></pre>\n\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\n\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\n\n<pre><code>shell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\n\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\n</code></pre>\n\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\n\n<pre><code class=\"javascript\"><br />/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction switchToDevelop(repo) {\n    return repo.checkoutBranch(\'develop\');\n}\n\nswitchToDevelop(repo).then(...)\n</code></pre>\n\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\n\n<pre><code class=\"javascript\">shell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\n\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\n</code></pre>\n\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like <code>.argus-eyes/diff_develop_feature_branch_name</code>\n\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\n\n<h2>Retrospective</h2>\n\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.','Automating CSS regression testing with Argus Eyes (PhantomJS)','','inherit','closed','closed','','382-revision-v1','','','2016-12-14 02:41:39','2016-12-14 02:41:39','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        saveCurrentBranch(repo).then(\r\n            repoName =&gt; {\r\n                featureBranch = repoName\r\n            })\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n```\r\n\r\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\r\n\r\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\r\n\r\n```\r\nshell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\r\n\r\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\r\n```\r\n\r\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction switchToDevelop(repo) {\r\n    return repo.checkoutBranch(\'develop\');\r\n}\r\n\r\nswitchToDevelop(repo).then(...)\r\n```\r\n\r\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\r\n\r\n\r\n```javascript\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\r\n\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\r\n```\r\n\r\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like `.argus-eyes/diff_develop_feature_branch_name`\r\n\r\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\r\n\r\n## Retrospective\r\n\r\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(416,1,'2016-12-16 14:40:48','2016-12-16 14:40:48','Grid based CSS Frameworks are a dime a dozen, but are any of them actually good?\n\nHere I\'m presenting what I think are good alternatives to Bootstrap.\n\n<h2> Zurb Foundation </h2>\n\n<h2> Bulma.io </h2>\n\nA robust alternative to\n\n<strong>Why it\'s good</strong>\n\n<h2> Skeleton.css </h2>\n\nA super lightweight drop in framework which is great if you want to get started really quickly.\n\n<strong>Why it\'s good</strong>\n\nSince it targets elements instead of classes, it will instantly make your site look better, so for speedy implementation it doesn\'t really get better.\n\nHowever, beyond this, it takes a different stance on the nomenclature. Whereas in Foundation for Sites, you can use column or columns in the classes, it doesn\'t really make sense (because the sizing is done using large-3, small-12 etc). In Skeleton you use \'one column\' or \'two columns\'.\n\n<strong> What it\'s lacking </strong>\n\nSkeleton doesn\'t have any breakpoints out of the box so you can\'t size the columns with classes alone and you have to use raw media queries.\n\n<strong> Warning </strong>\n\nSkeleton is no longer maintained, so you shouldn\'t expect any updates or new features.','Alternatives to Bootstrap CSS Framework','','inherit','closed','closed','','218-revision-v1','','','2016-12-16 14:40:48','2016-12-16 14:40:48','Grid based CSS Frameworks are a dime a dozen, but are any of them actually good?\r\n\r\nHere I\'m presenting what I think are good alternatives to Bootstrap.\r\n\r\n<h2> Zurb Foundation </h2>\r\n\r\n<h2> Bulma.io </h2>\r\n\r\nA robust alternative to\r\n\r\n<strong>Why it\'s good</strong>\r\n\r\n<h2> Skeleton.css </h2>\r\n\r\nA super lightweight drop in framework which is great if you want to get started really quickly.\r\n\r\n<strong>Why it\'s good</strong>\r\n\r\nSince it targets elements instead of classes, it will instantly make your site look better, so for speedy implementation it doesn\'t really get better.\r\n\r\nHowever, beyond this, it takes a different stance on the nomenclature. Whereas in Foundation for Sites, you can use column or columns in the classes, it doesn\'t really make sense (because the sizing is done using large-3, small-12 etc). In Skeleton you use \'one column\' or \'two columns\'.\r\n\r\n<strong> What it\'s lacking </strong>\r\n\r\nSkeleton doesn\'t have any breakpoints out of the box so you can\'t size the columns with classes alone and you have to use raw media queries.\r\n\r\n<strong> Warning </strong>\r\n\r\nSkeleton is no longer maintained, so you shouldn\'t expect any updates or new features.',218,'http://lukeboyle.com/218-revision-v1/',0,'revision','',0),(417,1,'2016-12-16 14:45:33','2016-12-16 14:45:33','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-12-16 14:45:33','2016-12-16 14:45:33','',14,'http://lukeboyle.com/14-revision-v1/',0,'revision','',0),(418,1,'2016-12-16 14:51:49','2016-12-16 14:51:49','','Home','','inherit','closed','closed','','14-revision-v1','','','2016-12-16 14:51:49','2016-12-16 14:51:49','',14,'http://lukeboyle.com/14-revision-v1/',0,'revision','',0),(419,1,'2016-12-22 11:15:28','2016-12-22 11:15:28','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work.\n\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\n\nAll <code>components</code> are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\n\n<pre><code class=\"javascript\">{\n  \"sizes\": [ \"320x480\", \"1280x768\", \"1920x1080\" ],\n  \"pages\": [\n    {\n      \"name\": \"homepage\",\n      \"url\": \"http://localhost:3000/\",\n      \"components\": [ \"hero\", \"all\" ]\n    }\n  ],\n  \"components\": [\n    {\n      \"name\": \"all\",\n      \"selector\": \"body\"\n    },\n    {\n      \"name\": \"hero\",\n      \"selector\": \".hero\"\n    }\n  ]\n}\n</code></pre>\n\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in <code>package.json</code>.\n\nThis presents the first issue:\n\nThe usage of Argus is like so: <code>argus-eyes capture &lt;branch-name&gt;</code>\n\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\n\nSo the workflow becomes:\n\n<ul>\n<li>Clone <code>develop</code> branch</li>\n<li>run <code>argus-eyes capture develop</code> (this is the baseline)</li>\n<li>Clone <code>feature-branch-name</code></li>\n<li>run <code>argus-eyes capture feature-branch-name</code></li>\n<li>run <code>argus-eyes compare develop feature-branch-name</code></li>\n</ul>\n\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\n\nFor example, bumping the padding on your nav will result in something like this.\n\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\n\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\n\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\n\n<h2>Automation</h2>\n\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things.\n\n<ul>\n<li>The ability to use git functions in node (http://www.nodegit.org/)</li>\n<li>The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)</li>\n</ul>\n\nI\'ve tried to make the node script as pure as possible. I created a file called <code>argus-test.js</code>. In that, there is an individual function for each git action.\n\nFirst is a function to initialise the repo.\n\n<pre><code class=\"javascript\">/**\n * @param {string} path - path to the repository (.git)\n * @returns {Promise}\n */\nfunction openRepository(path) {\n    return Git.Repository.open(path);\n}\n\n// Path is based on current working directory\nconst repoPath = require(\"path\").resolve(\"./.git\");\n\nopenRepository(repoPath).then(...)\n\n</code></pre>\n\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\n\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of <code>then</code>.\n\n<pre><code class=\"javascript\"><br />// Initialise this let to keep track of which branch we\'re on\nlet featureBranch;\n\n/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction saveCurrentBranch(repo) {\n    return repo.getCurrentBranch();\n}\n\nopenRepository(repoPath).then(\n    repo =&gt; {\n        saveCurrentBranch(repo).then(\n            repoName =&gt; {\n                featureBranch = repoName\n            })\n    },\n    err =&gt; {\n        // Usually would only happen if you give it the incorrect path\n        throw new Error(error)\n    }\n);\n</code></pre>\n\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\n\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\n\n<pre><code>shell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\n\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\n</code></pre>\n\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\n\n<pre><code class=\"javascript\"><br />/**\n * @param {Repository} repo - The reference to the repository object\n * @returns {Promise}\n */\nfunction switchToDevelop(repo) {\n    return repo.checkoutBranch(\'develop\');\n}\n\nswitchToDevelop(repo).then(...)\n</code></pre>\n\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\n\n<pre><code class=\"javascript\">shell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\n\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\n</code></pre>\n\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like <code>.argus-eyes/diff_develop_feature_branch_name</code>\n\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\n\n<h2>Retrospective</h2>\n\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.','Automating CSS regression testing','','inherit','closed','closed','','382-revision-v1','','','2016-12-22 11:15:28','2016-12-22 11:15:28','I have had my eyes on Argus Eyes (<a href=\"http://arguseyes.io/\">http://arguseyes.io/</a>) for quite some time and now I have the time to implement it at work. \r\n\r\nThe interface is rather simple. You define your browser breakpoints, the pages, and the parts of the pages you wish to capture.\r\n\r\nAll `components` are defined with a name and a selector. For example, \".site-nav\" or \"body\". You define all components in the components array, but then you can cherry pick which ones are used on each page. Such as, homepage may use the hero component, but about may not.\r\n\r\n```javascript\r\n{\r\n  &quot;sizes&quot;: [ &quot;320x480&quot;, &quot;1280x768&quot;, &quot;1920x1080&quot; ],\r\n  &quot;pages&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;homepage&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3000/&quot;,\r\n      &quot;components&quot;: [ &quot;hero&quot;, &quot;all&quot; ]\r\n    }\r\n  ],\r\n  &quot;components&quot;: [\r\n    {\r\n      &quot;name&quot;: &quot;all&quot;,\r\n      &quot;selector&quot;: &quot;body&quot;\r\n    },\r\n    {\r\n      &quot;name&quot;: &quot;hero&quot;,\r\n      &quot;selector&quot;: &quot;.hero&quot;\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nSince I\'m generally against installing npm packages globally (and you probably should be <a href=\"https://www.sitepoint.com/solve-global-npm-module-dependency-problem/\">too</a>), I define my capture scripts in `package.json`.\r\n\r\nThis presents the first issue:\r\n\r\nThe usage of Argus is like so: `argus-eyes capture <branch-name>`\r\n\r\nBut this of course only names the capture for you. It\'s your responsibility to switch branches.\r\n\r\nSo the workflow becomes:\r\n\r\n- Clone `develop` branch\r\n- run `argus-eyes capture develop` (this is the baseline)\r\n- Clone `feature-branch-name`\r\n- run `argus-eyes capture feature-branch-name`\r\n- run `argus-eyes compare develop feature-branch-name`\r\n\r\nArgus then uses blink-diff to compare the two sets of screenshots you just captured (note, you shouldn\'t change your config between captures) and outputs any screenshots in which there are visual differences.\r\n\r\nFor example, bumping the padding on your nav will result in something like this.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2016/12/nav.png\" style=\"max-width:100%;\" alt=\"nav\" width=\"1228\" height=\"111\" class=\"alignnone size-full wp-image-384\" />\r\n\r\nIt\'s not a super intelligent representation, however, it does quickly show you that something is wrong.\r\n\r\nIn my opinion, the current workflow makes it almost worth not bothering. So how do we make it a 1 step test?\r\n\r\n## Automation\r\n\r\nI am attempting to simulate this entire process in node. For this, we\'ll need a few things. \r\n\r\n- The ability to use git functions in node (http://www.nodegit.org/)\r\n- The ability to execute console commands in node (for this, I am using <a href=\"https://www.npmjs.com/package/shelljs\" target=\"_blank\">shelljs</a>)\r\n\r\nI\'ve tried to make the node script as pure as possible. I created a file called `argus-test.js`. In that, there is an individual function for each git action.\r\n\r\nFirst is a function to initialise the repo.\r\n\r\n```javascript\r\n/**\r\n * @param {string} path - path to the repository (.git)\r\n * @returns {Promise}\r\n */\r\nfunction openRepository(path) {\r\n    return Git.Repository.open(path);\r\n}\r\n\r\n// Path is based on current working directory\r\nconst repoPath = require(&quot;path&quot;).resolve(&quot;./.git&quot;);\r\n\r\nopenRepository(repoPath).then(...)\r\n\r\n```\r\n\r\nopenRepository returns a Promise which has the reference to the repository in it. To act on the repository, we need to keep track of this returned value.\r\n\r\nSince all of the nodegit functions return Promises, we\'re going to be seeing a lot of `then`.\r\n\r\n```javascript\r\n\r\n// Initialise this let to keep track of which branch we&#039;re on\r\nlet featureBranch;\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction saveCurrentBranch(repo) {\r\n    return repo.getCurrentBranch();\r\n}\r\n\r\nopenRepository(repoPath).then(\r\n    repo =&gt; {\r\n        saveCurrentBranch(repo).then(\r\n            repoName =&gt; {\r\n                featureBranch = repoName\r\n            })\r\n    },\r\n    err =&gt; {\r\n        // Usually would only happen if you give it the incorrect path\r\n        throw new Error(error)\r\n    }\r\n);\r\n```\r\n\r\nNow we have a reference to the current feature branch, we\'ve got that stored for later.\r\n\r\nIn the function where we set the featureBranch variable, we\'re going to execute our capture functions.\r\n\r\n```\r\nshell.exec(`node node_modules/argus-eyes/bin/argus-eyes.js capture ${featureBranch}`);\r\n\r\n// Successful output will say something like \"12 screenshots saved to .argus-eyes/feature-branch-name\"\r\n```\r\n\r\nThis is the tricky part. We have to switch branch to whatever the base is (develop in this case). This is the biggest hurdle. Although the function is simple, if there are any uncommitted changes, the function may fail. Probably best to warn the user to make sure all changes are committed or stashed first.\r\n\r\n```javascript\r\n\r\n/**\r\n * @param {Repository} repo - The reference to the repository object\r\n * @returns {Promise}\r\n */\r\nfunction switchToDevelop(repo) {\r\n    return repo.checkoutBranch(\'develop\');\r\n}\r\n\r\nswitchToDevelop(repo).then(...)\r\n```\r\n\r\nAfter successfully changing to develop, we still have to capture the branch and then compare them, which is done like so:\r\n\r\n\r\n```javascript\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js capture develop\');\r\n\r\nshell.exec(\'node node_modules/argus-eyes/bin/argus-eyes.js compare develop \' + featureBranch);\r\n```\r\n\r\nIf Argus detects any screenshots over the threshold for change, it will save the diff in a folder like `.argus-eyes/diff_develop_feature_branch_name`\r\n\r\nFor the full file in action, check out this gist: <a href=\"https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88\" target=\"_blank\">https://gist.github.com/3stacks/0976ef8a84c50c6096aea09dbbbebd88</a>\r\n\r\n## Retrospective\r\n\r\nTo improve this process, it might be an idea to save the baseline diff in the repo and then overwrite it whenever you push to that branch. This would eliminate the need to switch over the branches.',382,'http://lukeboyle.com/382-revision-v1/',0,'revision','',0),(420,1,'2016-12-23 02:51:41','0000-00-00 00:00:00','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy).\n\nI\'m using the <code>fetch</code> API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\n\nThe current system grabs that HTML and then grabs all children nodes and inserts them in a new div one by one (see below):\n\n<pre><code>/**\n * @param {HTMLElement} target\n * @param {NodeList} nodes\n * @returns {HTMLElement}\n */\nfunction fillWithNodes(target, nodes) {\n    const nodeArray = Array.from(nodes);\n    nodeArray.forEach((node) =&gt; {\n       target.appendChild(node);\n    });\n    return target;\n}\n\nfunction parseHtml(html, containerClass) {\n    const container = document.createElement(\'div\');\n    const innerContent = document.createElement(\'div\');\n    innerContent.innerHTML = html;\n    container.classList.add(containerClass);\n    // Fill the container with all nodes under the main tag\n    const nodes = innerContent.querySelector(\'main\').childNodes\n    return fillWithNodes(container, nodes);\n}\n</code></pre>\n\nThis action is initialised using the mouse-near package I wrote specifically for this purpose (see <a href=\"https://www.npmjs.com/package/@lukeboyle/mouse-near\" target=\"_blank\">here</a>). The reason I didn\'t just use hoverintent is because it did not allow for a buffer radius around the element and I wanted to prefetch the page when the mouse started approaching it.\n\n<pre><code>    prefetchElements.forEach((item) =&gt; {\n        mouseNear(item, () =&gt; {\n            window.fetch(item.getAttribute(\'data-prefetch\'))\n                .then(\n                    (response) =&gt; response.text()\n                ).then((text) =&gt; {\n                const markup = parseHtml(text, \'portfolio-pane\');\n                item.querySelector(\'a\').addEventListener(\'click\', handleReadMoreLink.bind(this, markup));\n                item.removeAttribute(\'data-portfolio-item\');\n                item.querySelector(\'a\').setAttribute(\'data-portfolio-content-loaded\', \'true\');\n            })\n        }, { buffer: 80 })\n    });\n</code></pre>\n\nThis is all a very convoluted way to just get some html on the page.\n\nIf I was able to use the WP API, I would not have to:\n\n<ul>\n<li>fetch an entire document just to get some content</li>\n<li>process and throw away half of the document</li>\n</ul>\n\nResulting in a faster and easier interface.','Using the new built in Wordpress RESTful API for front end','','draft','open','open','','','','','2016-12-23 02:51:41','2016-12-23 02:51:41','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy). \r\n\r\nI\'m using the `fetch` API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\r\n\r\nThe current system grabs that HTML and then grabs all children nodes and inserts them in a new div one by one (see below):\r\n\r\n```\r\n/**\r\n * @param {HTMLElement} target\r\n * @param {NodeList} nodes\r\n * @returns {HTMLElement}\r\n */\r\nfunction fillWithNodes(target, nodes) {\r\n    const nodeArray = Array.from(nodes);\r\n    nodeArray.forEach((node) =&gt; {\r\n       target.appendChild(node);\r\n    });\r\n    return target;\r\n}\r\n\r\nfunction parseHtml(html, containerClass) {\r\n    const container = document.createElement(&#039;div&#039;);\r\n    const innerContent = document.createElement(&#039;div&#039;);\r\n    innerContent.innerHTML = html;\r\n    container.classList.add(containerClass);\r\n    // Fill the container with all nodes under the main tag\r\n    const nodes = innerContent.querySelector(&#039;main&#039;).childNodes\r\n    return fillWithNodes(container, nodes);\r\n}\r\n```\r\n\r\nThis action is initialised using the mouse-near package I wrote specifically for this purpose (see <a href=\"https://www.npmjs.com/package/@lukeboyle/mouse-near\" target=\"_blank\">here</a>). The reason I didn\'t just use hoverintent is because it did not allow for a buffer radius around the element and I wanted to prefetch the page when the mouse started approaching it.\r\n\r\n```\r\n    prefetchElements.forEach((item) =&gt; {\r\n        mouseNear(item, () =&gt; {\r\n            window.fetch(item.getAttribute(&#039;data-prefetch&#039;))\r\n                .then(\r\n                    (response) =&gt; response.text()\r\n                ).then((text) =&gt; {\r\n                const markup = parseHtml(text, &#039;portfolio-pane&#039;);\r\n                item.querySelector(&#039;a&#039;).addEventListener(&#039;click&#039;, handleReadMoreLink.bind(this, markup));\r\n                item.removeAttribute(&#039;data-portfolio-item&#039;);\r\n                item.querySelector(&#039;a&#039;).setAttribute(&#039;data-portfolio-content-loaded&#039;, &#039;true&#039;);\r\n            })\r\n        }, { buffer: 80 })\r\n    });\r\n```\r\n\r\nThis is all a very convoluted way to just get some html on the page. \r\n\r\nIf I was able to use the WP API, I would not have to:\r\n\r\n- fetch an entire document just to get some content\r\n- process and throw away half of the document\r\n\r\nResulting in a faster and easier interface.',0,'http://lukeboyle.com/?p=420',0,'post','',0),(421,1,'2016-12-23 02:43:08','2016-12-23 02:43:08','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy).\n\nI\'m using the <code>fetch</code> API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\n\nThe current system is','Using the new built in Wordpress RESTful API for front end','','inherit','closed','closed','','420-revision-v1','','','2016-12-23 02:43:08','2016-12-23 02:43:08','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy). \r\n\r\nI\'m using the `fetch` API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\r\n\r\nThe current system is',420,'http://lukeboyle.com/420-revision-v1/',0,'revision','',0),(422,1,'2016-12-23 02:50:52','2016-12-23 02:50:52','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy).\n\nI\'m using the <code>fetch</code> API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\n\nThe current system grabs that HTML and then grabs all children nodes and inserts them in a new div one by one (see below):\n\n<pre><code>/**\n * @param {HTMLElement} target\n * @param {NodeList} nodes\n * @returns {HTMLElement}\n */\nfunction fillWithNodes(target, nodes) {\n    const nodeArray = Array.from(nodes);\n    nodeArray.forEach((node) =&gt; {\n       target.appendChild(node);\n    });\n    return target;\n}\n\nfunction parseHtml(html, containerClass) {\n    const container = document.createElement(\'div\');\n    const innerContent = document.createElement(\'div\');\n    innerContent.innerHTML = html;\n    container.classList.add(containerClass);\n    // Fill the container with all nodes under the main tag\n    const nodes = innerContent.querySelector(\'main\').childNodes\n    return fillWithNodes(container, nodes);\n}\n</code></pre>\n\nThis action is initialised using the mouse-near package I wrote specifically for this purpose (see <a href=\"https://www.npmjs.com/package/@lukeboyle/mouse-near\" target=\"_blank\">here</a>). The reason I didn\'t just use hoverintent is because it did not allow for a buffer radius around the element and I wanted to prefetch the page when the mouse started approaching it.\n\n<pre><code>    prefetchElements.forEach((item) =&gt; {\n        mouseNear(item, () =&gt; {\n            window.fetch(item.getAttribute(\'data-prefetch\'))\n                .then(\n                    (response) =&gt; response.text()\n                ).then((text) =&gt; {\n                const markup = parseHtml(text, \'portfolio-pane\');\n                item.querySelector(\'a\').addEventListener(\'click\', handleReadMoreLink.bind(this, markup));\n                item.removeAttribute(\'data-portfolio-item\');\n                item.querySelector(\'a\').setAttribute(\'data-portfolio-content-loaded\', \'true\');\n            })\n        }, { buffer: 80 })\n    });\n</code></pre>\n\nThis is all a very convoluted way to just get some html on the page.\n\nIf I was able to use the WP API, I would not have to:\n\n<ul>\n<li>fetch an entire document just to get some content</li>\n<li>process and throw away half of the document</li>\n</ul>\n\nResulting in a faster and easier interface.','Using the new built in Wordpress RESTful API for front end','','inherit','closed','closed','','420-revision-v1','','','2016-12-23 02:50:52','2016-12-23 02:50:52','On my portfolio page, there\'s a feature that will request whichever post you mouseover so that it opens that post in the current page (just to be flashy). \r\n\r\nI\'m using the `fetch` API, but since I could only request the url of the post I got an entire HTML document and I had to work on that to get just the content.\r\n\r\nThe current system grabs that HTML and then grabs all children nodes and inserts them in a new div one by one (see below):\r\n\r\n```\r\n/**\r\n * @param {HTMLElement} target\r\n * @param {NodeList} nodes\r\n * @returns {HTMLElement}\r\n */\r\nfunction fillWithNodes(target, nodes) {\r\n    const nodeArray = Array.from(nodes);\r\n    nodeArray.forEach((node) =&gt; {\r\n       target.appendChild(node);\r\n    });\r\n    return target;\r\n}\r\n\r\nfunction parseHtml(html, containerClass) {\r\n    const container = document.createElement(&#039;div&#039;);\r\n    const innerContent = document.createElement(&#039;div&#039;);\r\n    innerContent.innerHTML = html;\r\n    container.classList.add(containerClass);\r\n    // Fill the container with all nodes under the main tag\r\n    const nodes = innerContent.querySelector(&#039;main&#039;).childNodes\r\n    return fillWithNodes(container, nodes);\r\n}\r\n```\r\n\r\nThis action is initialised using the mouse-near package I wrote specifically for this purpose (see <a href=\"https://www.npmjs.com/package/@lukeboyle/mouse-near\" target=\"_blank\">here</a>). The reason I didn\'t just use hoverintent is because it did not allow for a buffer radius around the element and I wanted to prefetch the page when the mouse started approaching it.\r\n\r\n```\r\n    prefetchElements.forEach((item) =&gt; {\r\n        mouseNear(item, () =&gt; {\r\n            window.fetch(item.getAttribute(&#039;data-prefetch&#039;))\r\n                .then(\r\n                    (response) =&gt; response.text()\r\n                ).then((text) =&gt; {\r\n                const markup = parseHtml(text, &#039;portfolio-pane&#039;);\r\n                item.querySelector(&#039;a&#039;).addEventListener(&#039;click&#039;, handleReadMoreLink.bind(this, markup));\r\n                item.removeAttribute(&#039;data-portfolio-item&#039;);\r\n                item.querySelector(&#039;a&#039;).setAttribute(&#039;data-portfolio-content-loaded&#039;, &#039;true&#039;);\r\n            })\r\n        }, { buffer: 80 })\r\n    });\r\n```\r\n\r\nThis is all a very convoluted way to just get some html on the page. \r\n\r\nIf I was able to use the WP API, I would not have to:\r\n\r\n- fetch an entire document just to get some content\r\n- process and throw away half of the document\r\n\r\nResulting in a faster and easier interface.',420,'http://lukeboyle.com/420-revision-v1/',0,'revision','',0),(424,1,'2017-01-16 12:13:09','2017-01-16 12:13:09','','Split Visualiser','','publish','closed','closed','','split-visualiser','','','2017-02-23 05:00:22','2017-02-23 05:00:22','',0,'http://lukeboyle.com/?post_type=portfolio_item&#038;p=424',0,'portfolio_item','',0),(425,1,'2017-01-16 12:11:43','2017-01-16 12:11:43','','asdf','','inherit','open','closed','','asdf','','','2017-01-16 12:11:43','2017-01-16 12:11:43','',424,'http://lukeboyle.com/app/uploads/2017/01/asdf.png',0,'attachment','image/png',0),(427,1,'2017-01-30 01:45:50','2017-01-30 01:45:50','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\n\n<pre><code>const fields = {\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint and I believe it is much cleaner and much more robust.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','publish','open','open','','functional-form-validation-javascript-aka-inheriting-bad-javascript','','','2017-01-30 01:46:32','2017-01-30 01:46:32','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\r\n\r\n```\r\nconst fields = {\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint and I believe it is much cleaner and much more robust.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',0,'http://lukeboyle.com/?p=427',0,'post','',0),(428,1,'2017-01-25 01:10:09','2017-01-25 01:10:09','<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n                            var flagValidation;\n\n                            /* validation for \'FirstName\' */\n                            function FirstNameValidation() {\n                                if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n                                    flagValidation = false;\n                                    document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n                                }\n                                else\n                                    document.getElementById(\"FnameValidation\").innerHTML = \"\"\n                            }\n\n                            /* validation for \'LastName\' */\n                            function LastNameValidation() {\n                                if (document.getElementsByName(\"Last_Name\")[0].value == \"\") {\n                                    flagValidation = false;\n                                    document.getElementById(\"LnameValidation\").innerHTML = \"Cannot be empty\"\n                                }\n                                else\n                                    document.getElementById(\"LnameValidation\").innerHTML = \"\"\n                            }\n\n                            /* validation for \'phone number\' */\n                            function PhoneNumberValidation() {\n                                var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n                                var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n                                if(!normalPhonepattern.test(phoneNum))\n                                {\n                                    flagValidation = false;\n                                    document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n                                }\n                                else\n                                    document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n                            }\n\n                            /* validation for \'Email address\' */\n                            function EmailAddress() {\n                                var emailAddress = document.getElementsByName(\"Email\")[0].value;\n                                var emailPhonepattern = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@+\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                                if (!emailPhonepattern.test(emailAddress)) {\n                                    flagValidation = false;\n                                    document.getElementById(\"EmailValidation\").innerHTML = \"Enter a valid email address\"\n                                }\n                                else\n                                    document.getElementById(\"EmailValidation\").innerHTML = \"\"\n                            }\n\n                            /* validation for \'Club\' */\n                            function Club() {\n                                var selectedanswer=document.getElementsByName(\"Club\")[0].selectedIndex;\n                                if (document.getElementsByTagName(\"option\")[selectedanswer].value == \"\") {\n                                    flagValidation = false;\n                                    document.getElementById(\"ClubValidation\").innerHTML = \"Please select an option\"\n                                }\n                                else\n                                    document.getElementById(\"ClubValidation\").innerHTML = \"\"\n                            }\n\n                            /* validation for \'TermsCondition\' */\n                            function TermsCondition() {\n                                if (document.getElementsByName(\"T_and_C\")[0].checked == 0) {\n                                    flagValidation = false;\n                                    document.getElementById(\"TNCValidation\").innerHTML = \"Please agree to Terms and Conditions\"\n                                }\n                                else\n                                    document.getElementById(\"TNCValidation\").innerHTML = \"\"\n                            }\n\n\n\n                            function SubmitDetails(){\n                                flagValidation = true;\n\n                                FirstNameValidation();\n                                LastNameValidation();\n                                PhoneNumberValidation();\n                                EmailAddress();\n                                TermsCondition();\n\n                                return flagValidation;\n                            }\n\n                        &lt;/script&gt;\n</code></pre>','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-25 01:10:09','2017-01-25 01:10:09','```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n							var flagValidation;\r\n\r\n							/* validation for &#039;FirstName&#039; */\r\n							function FirstNameValidation() {\r\n								if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n									flagValidation = false;\r\n									document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n							/* validation for &#039;LastName&#039; */\r\n							function LastNameValidation() {\r\n								if (document.getElementsByName(&quot;Last_Name&quot;)[0].value == &quot;&quot;) {\r\n									flagValidation = false;\r\n									document.getElementById(&quot;LnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;LnameValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n							/* validation for &#039;phone number&#039; */\r\n							function PhoneNumberValidation() {\r\n								var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n								var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n								if(!normalPhonepattern.test(phoneNum))\r\n								{\r\n									flagValidation = false;\r\n									document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n							/* validation for &#039;Email address&#039; */\r\n							function EmailAddress() {\r\n								var emailAddress = document.getElementsByName(&quot;Email&quot;)[0].value;\r\n								var emailPhonepattern = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@+\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n								if (!emailPhonepattern.test(emailAddress)) {\r\n									flagValidation = false;\r\n									document.getElementById(&quot;EmailValidation&quot;).innerHTML = &quot;Enter a valid email address&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;EmailValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n							/* validation for &#039;Club&#039; */\r\n							function Club() {\r\n								var selectedanswer=document.getElementsByName(&quot;Club&quot;)[0].selectedIndex;\r\n								if (document.getElementsByTagName(&quot;option&quot;)[selectedanswer].value == &quot;&quot;) {\r\n									flagValidation = false;\r\n									document.getElementById(&quot;ClubValidation&quot;).innerHTML = &quot;Please select an option&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;ClubValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n							/* validation for &#039;TermsCondition&#039; */\r\n							function TermsCondition() {\r\n								if (document.getElementsByName(&quot;T_and_C&quot;)[0].checked == 0) {\r\n									flagValidation = false;\r\n									document.getElementById(&quot;TNCValidation&quot;).innerHTML = &quot;Please agree to Terms and Conditions&quot;\r\n								}\r\n								else\r\n									document.getElementById(&quot;TNCValidation&quot;).innerHTML = &quot;&quot;\r\n							}\r\n\r\n\r\n\r\n							function SubmitDetails(){\r\n								flagValidation = true;\r\n\r\n								FirstNameValidation();\r\n								LastNameValidation();\r\n								PhoneNumberValidation();\r\n								EmailAddress();\r\n								TermsCondition();\r\n\r\n								return flagValidation;\r\n							}\r\n\r\n						&lt;/script&gt;\r\n```',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(429,1,'2017-01-25 01:10:56','2017-01-25 01:10:56','<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n    var flagValidation;\n\n    /* validation for \'FirstName\' */\n    function FirstNameValidation() {\n        if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n            flagValidation = false;\n            document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n        }\n        else\n            document.getElementById(\"FnameValidation\").innerHTML = \"\"\n    }\n\n    /* validation for \'LastName\' */\n    function LastNameValidation() {\n        if (document.getElementsByName(\"Last_Name\")[0].value == \"\") {\n            flagValidation = false;\n            document.getElementById(\"LnameValidation\").innerHTML = \"Cannot be empty\"\n        }\n        else\n            document.getElementById(\"LnameValidation\").innerHTML = \"\"\n    }\n\n    /* validation for \'phone number\' */\n    function PhoneNumberValidation() {\n        var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n        var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n        if(!normalPhonepattern.test(phoneNum))\n        {\n            flagValidation = false;\n            document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n        }\n        else\n            document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n    }\n\n    /* validation for \'Email address\' */\n    function EmailAddress() {\n        var emailAddress = document.getElementsByName(\"Email\")[0].value;\n        var emailPhonepattern = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@+\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (!emailPhonepattern.test(emailAddress)) {\n            flagValidation = false;\n            document.getElementById(\"EmailValidation\").innerHTML = \"Enter a valid email address\"\n        }\n        else\n            document.getElementById(\"EmailValidation\").innerHTML = \"\"\n    }\n\n    /* validation for \'Club\' */\n    function Club() {\n        var selectedanswer=document.getElementsByName(\"Club\")[0].selectedIndex;\n        if (document.getElementsByTagName(\"option\")[selectedanswer].value == \"\") {\n            flagValidation = false;\n            document.getElementById(\"ClubValidation\").innerHTML = \"Please select an option\"\n        }\n        else\n            document.getElementById(\"ClubValidation\").innerHTML = \"\"\n    }\n\n    /* validation for \'TermsCondition\' */\n    function TermsCondition() {\n        if (document.getElementsByName(\"T_and_C\")[0].checked == 0) {\n            flagValidation = false;\n            document.getElementById(\"TNCValidation\").innerHTML = \"Please agree to Terms and Conditions\"\n        }\n        else\n            document.getElementById(\"TNCValidation\").innerHTML = \"\"\n    }\n\n\n\n    function SubmitDetails(){\n        flagValidation = true;\n\n        FirstNameValidation();\n        LastNameValidation();\n        PhoneNumberValidation();\n        EmailAddress();\n        TermsCondition();\n\n        return flagValidation;\n    }\n\n&lt;/script&gt;\n\n</code></pre>','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-25 01:10:56','2017-01-25 01:10:56','```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n	var flagValidation;\r\n\r\n	/* validation for &#039;FirstName&#039; */\r\n	function FirstNameValidation() {\r\n		if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n			flagValidation = false;\r\n			document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n	/* validation for &#039;LastName&#039; */\r\n	function LastNameValidation() {\r\n		if (document.getElementsByName(&quot;Last_Name&quot;)[0].value == &quot;&quot;) {\r\n			flagValidation = false;\r\n			document.getElementById(&quot;LnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;LnameValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n	/* validation for &#039;phone number&#039; */\r\n	function PhoneNumberValidation() {\r\n		var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n		var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n		if(!normalPhonepattern.test(phoneNum))\r\n		{\r\n			flagValidation = false;\r\n			document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n	/* validation for &#039;Email address&#039; */\r\n	function EmailAddress() {\r\n		var emailAddress = document.getElementsByName(&quot;Email&quot;)[0].value;\r\n		var emailPhonepattern = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@+\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n		if (!emailPhonepattern.test(emailAddress)) {\r\n			flagValidation = false;\r\n			document.getElementById(&quot;EmailValidation&quot;).innerHTML = &quot;Enter a valid email address&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;EmailValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n	/* validation for &#039;Club&#039; */\r\n	function Club() {\r\n		var selectedanswer=document.getElementsByName(&quot;Club&quot;)[0].selectedIndex;\r\n		if (document.getElementsByTagName(&quot;option&quot;)[selectedanswer].value == &quot;&quot;) {\r\n			flagValidation = false;\r\n			document.getElementById(&quot;ClubValidation&quot;).innerHTML = &quot;Please select an option&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;ClubValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n	/* validation for &#039;TermsCondition&#039; */\r\n	function TermsCondition() {\r\n		if (document.getElementsByName(&quot;T_and_C&quot;)[0].checked == 0) {\r\n			flagValidation = false;\r\n			document.getElementById(&quot;TNCValidation&quot;).innerHTML = &quot;Please agree to Terms and Conditions&quot;\r\n		}\r\n		else\r\n			document.getElementById(&quot;TNCValidation&quot;).innerHTML = &quot;&quot;\r\n	}\r\n\r\n\r\n\r\n	function SubmitDetails(){\r\n		flagValidation = true;\r\n\r\n		FirstNameValidation();\r\n		LastNameValidation();\r\n		PhoneNumberValidation();\r\n		EmailAddress();\r\n		TermsCondition();\r\n\r\n		return flagValidation;\r\n	}\r\n\r\n&lt;/script&gt;\r\n\r\n```',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(430,1,'2017-01-25 01:17:29','2017-01-25 01:17:29','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-25 01:17:29','2017-01-25 01:17:29','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(431,1,'2017-01-25 02:24:13','2017-01-25 02:24:13','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right?','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-25 02:24:13','2017-01-25 02:24:13','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right?\r\n\r\n',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(433,1,'2017-01-30 00:38:36','2017-01-30 00:38:36','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable. So let\'s take it further.','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 00:38:36','2017-01-30 00:38:36','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable. So let\'s take it further.\r\n\r\n',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(434,1,'2017-01-30 00:42:48','2017-01-30 00:42:48','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 00:42:48','2017-01-30 00:42:48','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\n',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(435,1,'2017-01-30 00:46:29','2017-01-30 00:46:29','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const validationMethods = {\n  isFirstNameValid: function() {\n    const firstName = document.getElementsByName(\"First_Name\")[0].value;\n    return firstName !== \'\';\n  },\n  isPhoneNumberValid: function() {\n    const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n    const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n    return phoneNumberRegex.test(phoneNumber);\n  }\n};\n</code></pre>','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 00:46:29','2017-01-30 00:46:29','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst validationMethods = {\r\n  isFirstNameValid: function() {\r\n    const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n    return firstName !== &#039;&#039;;\r\n  },\r\n  isPhoneNumberValid: function() {\r\n    const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n    return phoneNumberRegex.test(phoneNumber);\r\n  }\r\n};\r\n```',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(436,1,'2017-01-30 01:19:15','2017-01-30 01:19:15','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>','Inheriting bad JavaScript','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:19:15','2017-01-30 01:19:15','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(437,1,'2017-01-30 01:27:20','2017-01-30 01:27:20','I was recently tasked with\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:27:20','2017-01-30 01:27:20','I was recently tasked with \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(438,1,'2017-01-30 01:27:59','2017-01-30 01:27:59','I was recently given the job of rebuilding a particularly bad landing page from an external company.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:27:59','2017-01-30 01:27:59','I was recently given the job of rebuilding a particularly bad landing page from an external company. \r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(439,1,'2017-01-30 01:29:11','2017-01-30 01:29:11','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'FirstName\' */\n  function FirstNameValidation() {\n    if (document.getElementsByName(\"First_Name\")[0].value == \"\") {\n      flagValidation = false;\n      document.getElementById(\"FnameValidation\").innerHTML = \"Cannot be empty\"\n    }\n    else\n      document.getElementById(\"FnameValidation\").innerHTML = \"\"\n  }\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n\n    FirstNameValidation();\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:29:11','2017-01-30 01:29:11','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;FirstName&#039; */\r\n  function FirstNameValidation() {\r\n    if (document.getElementsByName(&quot;First_Name&quot;)[0].value == &quot;&quot;) {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;Cannot be empty&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;FnameValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n\r\n    FirstNameValidation();\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these function\r\n- The functions are doing too much, they should just be returning a bool, and a validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(440,1,'2017-01-30 01:31:35','2017-01-30 01:31:35','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const firstNameFeedback = document.getElementById(\"FnameValidation\");\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isFirstNameValid()) {\n        firstNameFeedback.innerHTML = \"\";\n    } else {\n        firstNameFeedback.innerHTML = \"Cannot be empty\";\n        isFormValid = false;\n    }\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isFirstNameValid()) {\n  generateErrorMessage(firstNameFeedback, \'\');\n} else {\n  generateErrorMessage(firstNameFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:31:35','2017-01-30 01:31:35','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const firstNameFeedback = document.getElementById(&quot;FnameValidation&quot;);\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isFirstNameValid()) {\r\n		firstNameFeedback.innerHTML = &quot;&quot;;\r\n	} else {\r\n		firstNameFeedback.innerHTML = &quot;Cannot be empty&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isFirstNameValid()) {\r\n  generateErrorMessage(firstNameFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(firstNameFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(441,1,'2017-01-30 01:34:12','2017-01-30 01:34:12','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  firstName: {\n    isFieldValid: function() {\n      const firstName = document.getElementsByName(\"First_Name\")[0].value;\n      return firstName !== \'\';\n    },\n    userFeedbackElement: document.getElementById(\"FnameValidation\"),\n    errorMessage: \'Cannot be empty\'\n  },\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:34:12','2017-01-30 01:34:12','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  firstName: {\r\n    isFieldValid: function() {\r\n      const firstName = document.getElementsByName(&quot;First_Name&quot;)[0].value;\r\n      return firstName !== &#039;&#039;;\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;FnameValidation&quot;),\r\n    errorMessage: &#039;Cannot be empty&#039;\r\n  },\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(442,1,'2017-01-30 01:35:05','2017-01-30 01:35:05','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:35:05','2017-01-30 01:35:05','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(443,1,'2017-01-30 01:35:30','2017-01-30 01:35:30','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n* There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n* Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\n\n<pre><code>const fields = {\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:35:30','2017-01-30 01:35:30','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n* There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n* Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object.\r\n\r\n```\r\nconst fields = {\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(444,1,'2017-01-30 01:45:50','2017-01-30 01:45:50','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\n\n<pre><code>const fields = {\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:45:50','2017-01-30 01:45:50','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\r\n\r\n```\r\nconst fields = {\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(445,1,'2017-01-30 01:46:32','2017-01-30 01:46:32','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var flagValidation;\n\n  /* validation for \'phone number\' */\n  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n\n  function SubmitDetails(){\n    flagValidation = true;\n    PhoneNumberValidation();\n\n    return flagValidation;\n  }\n\n&lt;/script&gt;\n\n</code></pre>\n\nSo what is wrong with this picture?\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\n- Repeating code (e.g. <code>document.getElement...</code>) unnecessarily\n\nWhen you allow your functions to be purely functional, this function...\n\n<pre><code>  function PhoneNumberValidation() {\n    var phoneNum = document.getElementsByName(\"Phone\")[0].value;\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\n\n    if(!normalPhonepattern.test(phoneNum))\n    {\n      flagValidation = false;\n      document.getElementById(\"PhoneValidation\").innerHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\"\n    }\n    else\n      document.getElementById(\"PhoneValidation\").innerHTML = \"\"\n  }\n</code></pre>\n\nCan become...\n\n<pre><code>function isPhoneNumberValid() {\n  const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n  return phoneNumberRegex.test(phoneNumber);\n}\n</code></pre>\n\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n    let isFormValid = true;\n    const phoneNumberFeedback = document.getElementById(\"PhoneValidation\");\n\n    if (isPhoneNumberValid()) {\n        phoneNumberFeedback.innerHTML = \'\';\n    } else {\n        phoneNumberFeedback.innterHTML = \"Only numbers, \'-\' and \'+\' characters are accepted\";\n        isFormValid = false;\n    }\n\n    if (isFormValid) {\n        contactForm.removeEventListener(\'submit\', validateFormInputs);\n        return true;\n    } else {\n        event.preventDefault();\n    }\n\n}\n</code></pre>\n\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that <code>isFormValid</code> variable and <code>innerHTML</code> appearing every other line. Let\'s take it further.\n\nLet\'s outsource the error message work to a utility function.\n\n<pre><code>function generateErrorMessage(element, message) {\n  return element.innerHTML = message;\n}\n\n// So we use that like this...\n\nif (isPhoneNumberValid()) {\n  generateErrorMessage(phoneNumberFeedback, \'\');\n} else {\n  generateErrorMessage(phoneNumberFeedback, \'Cannot be empty\');\n  isFormValid = false;\n}\n</code></pre>\n\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\n\n<pre><code>const fields = {\n  phoneNumber: {\n    isFieldValid: function() {\n      const phoneNumber = document.getElementsByName(\"Phone\")[0].value;\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\n      return phoneNumberRegex.test(phoneNumber);\n    },\n    userFeedbackElement: document.getElementById(\"PhoneValidation\"),\n    errorMessage: \"Only numbers, \'-\' and \'+\' characters are accepted\"\n  }\n};\n\n// Generate an array from the keys of the methods object and reduce\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\n    // do stuff\n}, true);\n</code></pre>\n\nIf you\'re not familiar with <code>Array.reduce</code>, it will iterate over each item in the array and allow you to process them. The arguments are <code>acc</code> (accumulative) and <code>curr</code> (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\n\nThe function now looks like this:\n\n<pre><code>function validateFormInputs(event) {\n\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\n    const currentField = fields[curr];\n\n    if (currentField.isFieldValid()) {\n      generateErrorMessage(currentField.userFeedbackElement, \'\');\n      return acc;\n    } else {\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\n      return false;\n    }\n  }, true);\n\n  if (isFormValid) {\n    contactForm.removeEventListener(\'submit\', validateFormInputs);\n    return true;\n    } else {\n      event.preventDefault();\n  }\n\n}\n</code></pre>\n\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\n\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is <em>wrong</em>, but my approach looks at the same problem from a functional programming standpoint and I believe it is much cleaner and much more robust.\n\nFor a view of the entire file, see my gist at <a href=\"https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9\">https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9</a>','Functional Form Validation in JavaScript (aka: Inheriting bad JavaScript)','','inherit','closed','closed','','427-revision-v1','','','2017-01-30 01:46:32','2017-01-30 01:46:32','I was recently given the job of rebuilding a particularly bad landing page from an external company. Apart from class names, styles and markup being all over the place, there was a particularly obnoxious form validation script sitting in the middle of the page. An excerpt of the script can be seen below, and this documents the process I took when reviving the JS side of things.\r\n\r\n```\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n\r\n  var flagValidation;\r\n\r\n  /* validation for &#039;phone number&#039; */\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n\r\n  function SubmitDetails(){\r\n    flagValidation = true;\r\n    PhoneNumberValidation();\r\n\r\n    return flagValidation;\r\n  }\r\n\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\nSo what is wrong with this picture?\r\n- There\'s no reason for this to be a script tag on the page, let\'s make it an external script\r\n- Mutation - Basing the validation on mutating the variable to false should not be the responsibility of these functions\r\n- The flagValidation variable being globally scoped and mutated/used in several places leaves a lot of places for it to fail when making changes\r\n- The functions are doing too much. When looking at it from a functional standpoint, they should just be returning a bool, and a final validate function can follow up.\r\n- Repeating code (e.g. `document.getElement...`) unnecessarily\r\n\r\nWhen you allow your functions to be purely functional, this function...\r\n\r\n```\r\n  function PhoneNumberValidation() {\r\n    var phoneNum = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n    var normalPhonepattern = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n\r\n    if(!normalPhonepattern.test(phoneNum))\r\n    {\r\n      flagValidation = false;\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n    }\r\n    else\r\n      document.getElementById(&quot;PhoneValidation&quot;).innerHTML = &quot;&quot;\r\n  }\r\n```\r\n\r\nCan become...\r\n\r\n```\r\nfunction isPhoneNumberValid() {\r\n  const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n  const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n  return phoneNumberRegex.test(phoneNumber);\r\n}\r\n```\r\n\r\nMuch prettier, right? Once we\'ve refactored all of those individual functions, the main input validation function looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n	let isFormValid = true;\r\n	const phoneNumberFeedback = document.getElementById(&quot;PhoneValidation&quot;);\r\n\r\n	if (isPhoneNumberValid()) {\r\n		phoneNumberFeedback.innerHTML = &#039;&#039;;\r\n	} else {\r\n		phoneNumberFeedback.innterHTML = &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;;\r\n		isFormValid = false;\r\n	}\r\n\r\n	if (isFormValid) {\r\n		contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n		return true;\r\n	} else {\r\n		event.preventDefault();\r\n	}\r\n\r\n}\r\n```\r\n\r\nIt\'s cleaner, sure, but I\'m still not okay with using and mutating that `isFormValid` variable and `innerHTML` appearing every other line. Let\'s take it further.\r\n\r\nLet\'s outsource the error message work to a utility function.\r\n\r\n```\r\nfunction generateErrorMessage(element, message) {\r\n  return element.innerHTML = message;\r\n}\r\n\r\n// So we use that like this...\r\n\r\nif (isPhoneNumberValid()) {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;&#039;);\r\n} else {\r\n  generateErrorMessage(phoneNumberFeedback, &#039;Cannot be empty&#039;);\r\n  isFormValid = false;\r\n}\r\n```\r\n\r\nThe next step is to stop mutating that validity flag. To do this, I\'m going to bundle all the validation methods into an object and then reduce that to return an isFormValid bool.\r\n\r\n```\r\nconst fields = {\r\n  phoneNumber: {\r\n    isFieldValid: function() {\r\n      const phoneNumber = document.getElementsByName(&quot;Phone&quot;)[0].value;\r\n      const phoneNumberRegex = /^[0-9\\s\\-\\+]{6,14}$/g;\r\n      return phoneNumberRegex.test(phoneNumber);\r\n    },\r\n    userFeedbackElement: document.getElementById(&quot;PhoneValidation&quot;),\r\n    errorMessage: &quot;Only numbers, &#039;-&#039; and &#039;+&#039; characters are accepted&quot;\r\n  }\r\n};\r\n\r\n// Generate an array from the keys of the methods object and reduce\r\nObject.keys(validationMethods).reduce((acc, curr) =&gt; {\r\n    // do stuff\r\n}, true);\r\n```\r\n\r\nIf you\'re not familiar with `Array.reduce`, it will iterate over each item in the array and allow you to process them. The arguments are `acc` (accumulative) and `curr` (current). The idea is, we\'re going to execute each function and then show/hide error messages accordingly.\r\n\r\nThe function now looks like this:\r\n\r\n```\r\nfunction validateFormInputs(event) {\r\n\r\n  const isFormValid = Object.keys(fields).reduce((acc, curr) =&gt; {\r\n    const currentField = fields[curr];\r\n\r\n    if (currentField.isFieldValid()) {\r\n      generateErrorMessage(currentField.userFeedbackElement, &#039;&#039;);\r\n      return acc;\r\n    } else {\r\n      generateErrorMessage(currentField.userFeedbackElement, currentField.errorMessage);\r\n      return false;\r\n    }\r\n  }, true);\r\n\r\n  if (isFormValid) {\r\n    contactForm.removeEventListener(&#039;submit&#039;, validateFormInputs);\r\n    return true;\r\n    } else {\r\n      event.preventDefault();\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis implementation is clearly a case-by-case basis. It works for my particular scenario because there\'s only one validation condition for each field. If there were more rules, the approach would need to be changed to compensate and it may not be able to be as dynamic.\r\n\r\nIt should also be noted that this is a fairly over-engineered solution. I wouldn\'t say that the original approach is *wrong*, but my approach looks at the same problem from a functional programming standpoint and I believe it is much cleaner and much more robust.\r\n\r\nFor a view of the entire file, see my gist at [https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9](https://gist.github.com/3stacks/c5c49904684e4ddec48aa017ab912db9)',427,'http://lukeboyle.com/427-revision-v1/',0,'revision','',0),(446,1,'2017-01-31 02:13:54','2017-01-31 02:13:54','','Home','','inherit','closed','closed','','14-revision-v1','','','2017-01-31 02:13:54','2017-01-31 02:13:54','',14,'http://lukeboyle.com/14-revision-v1/',0,'revision','',0),(447,1,'2017-01-31 02:32:30','2017-01-31 02:32:30','I\'ve recently taken to a simpler approach to the build process for front end projects. That is, not using Grunt or Gulp to trigger build tasks, and just using npm scripts.\n\nLet\'s take the folder structure for a project I recently worked on (<a href=\"https://github.com/stak-digital/split-visualiser\">https://github.com/stak-digital/split-visualiser</a>)\n\n.\n&#9500;&#9472;&#9472; src                      # Application source code\n&#9474;   &#9500;&#9472;&#9472; html                 # All HTML view files live under here\n&#9474;   &#9500;&#9472;&#9472; img                  # Application bootstrap and rendering\n&#9474;   &#9500;&#9472;&#9472; js                   # Global Reusable Presentational Components\n&#9474;   &#9492;&#9472;&#9472; sass           # Global Reusable Container Components\n&#9492;&#9472;&#9472; package.json','Developing without a task runner','','inherit','closed','closed','','302-revision-v1','','','2017-01-31 02:32:30','2017-01-31 02:32:30','I\'ve recently taken to a simpler approach to the build process for front end projects. That is, not using Grunt or Gulp to trigger build tasks, and just using npm scripts.\r\n\r\nLet\'s take the folder structure for a project I recently worked on ([https://github.com/stak-digital/split-visualiser](https://github.com/stak-digital/split-visualiser))\r\n\r\n.\r\n&#9500;&#9472;&#9472; src                      # Application source code\r\n&#9474;   &#9500;&#9472;&#9472; html                 # All HTML view files live under here\r\n&#9474;   &#9500;&#9472;&#9472; img                  # Application bootstrap and rendering\r\n&#9474;   &#9500;&#9472;&#9472; js                   # Global Reusable Presentational Components\r\n&#9474;   &#9492;&#9472;&#9472; sass           # Global Reusable Container Components\r\n&#9492;&#9472;&#9472; package.json',302,'http://lukeboyle.com/302-revision-v1/',0,'revision','',0),(456,1,'2017-02-23 05:03:59','2017-02-23 05:03:59','','Split Visualiser','','inherit','closed','closed','','424-autosave-v1','','','2017-02-23 05:03:59','2017-02-23 05:03:59','',424,'http://lukeboyle.com/424-autosave-v1/',0,'revision','',0),(457,1,'2017-02-23 05:06:48','2017-02-23 05:06:48','','Journey Tree','','publish','closed','closed','','journey-tree','','','2017-02-23 05:19:34','2017-02-23 05:19:34','',0,'http://lukeboyle.com/?post_type=portfolio_item&#038;p=457',0,'portfolio_item','',0),(458,1,'2017-02-23 05:07:01','2017-02-23 05:07:01','','Journey Tree','','inherit','closed','closed','','457-autosave-v1','','','2017-02-23 05:07:01','2017-02-23 05:07:01','',457,'http://lukeboyle.com/457-autosave-v1/',0,'revision','',0),(459,1,'2017-02-23 05:07:10','2017-02-23 05:07:10','','journeytree-thumbnail-2','','inherit','open','closed','','journeytree-thumbnail-2','','','2017-02-23 05:07:10','2017-02-23 05:07:10','',457,'http://lukeboyle.com/app/uploads/2017/02/journeytree-thumbnail-2.jpg',0,'attachment','image/jpeg',0),(460,1,'2017-02-23 05:21:20','2017-02-23 05:21:20','','spectrum-thumbnail','','inherit','open','closed','','spectrum-thumbnail','','','2017-02-23 05:21:20','2017-02-23 05:21:20','',0,'http://lukeboyle.com/app/uploads/2017/02/spectrum-thumbnail.png',0,'attachment','image/png',0),(461,1,'2017-02-23 12:05:00','2017-02-23 12:05:00','','untitled-1','','inherit','open','closed','','untitled-1','','','2017-02-23 12:05:00','2017-02-23 12:05:00','',344,'http://lukeboyle.com/app/uploads/2016/09/Untitled-1.png',0,'attachment','image/png',0),(462,1,'2016-09-18 11:30:13','2016-09-18 11:30:13','','Type With Apps','','publish','closed','closed','','type-with-apps','','','2017-02-28 00:56:37','2017-02-28 00:56:37','',0,'http://lukeboyle.com/?post_type=portfolio_item&#038;p=462',0,'portfolio_item','',0),(463,1,'2017-02-25 11:29:17','2017-02-25 11:29:17','','Screen Shot 2017-02-25 at 10.28.45 pm','','inherit','open','closed','','screen-shot-2017-02-25-at-10-28-45-pm','','','2017-02-25 11:29:17','2017-02-25 11:29:17','',462,'http://lukeboyle.com/app/uploads/2017/02/Screen-Shot-2017-02-25-at-10.28.45-pm.png',0,'attachment','image/png',0),(464,1,'2017-02-26 09:43:48','2017-02-26 09:43:48','','Screen Shot 2017-02-26 at 8.42.26 pm','','inherit','open','closed','','screen-shot-2017-02-26-at-8-42-26-pm','','','2017-02-26 09:43:48','2017-02-26 09:43:48','',342,'http://lukeboyle.com/app/uploads/2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm.png',0,'attachment','image/png',0),(465,1,'2017-02-26 09:45:04','2017-02-26 09:45:04','','Screen Shot 2017-02-26 at 8.42.26 pm','','inherit','open','closed','','screen-shot-2017-02-26-at-8-42-26-pm-2','','','2017-02-26 09:45:04','2017-02-26 09:45:04','',342,'http://lukeboyle.com/app/uploads/2016/09/Screen-Shot-2017-02-26-at-8.42.26-pm-1.png',0,'attachment','image/png',0),(466,1,'2017-02-26 12:36:16','2017-02-26 12:36:16','','Capture','','inherit','open','closed','','capture','','','2017-02-26 12:36:16','2017-02-26 12:36:16','',343,'http://lukeboyle.com/app/uploads/2016/09/Capture.png',0,'attachment','image/png',0),(467,1,'2017-02-27 08:05:48','2017-02-27 08:05:48','','Screen Shot 2017-02-27 at 7.02.35 pm','','inherit','open','closed','','screen-shot-2017-02-27-at-7-02-35-pm','','','2017-02-27 08:05:48','2017-02-27 08:05:48','',341,'http://lukeboyle.com/app/uploads/2016/09/Screen-Shot-2017-02-27-at-7.02.35-pm.png',0,'attachment','image/png',0),(468,1,'2017-02-27 11:57:18','2017-02-27 11:57:18','','burrito','','inherit','open','closed','','burrito','','','2017-02-27 11:57:18','2017-02-27 11:57:18','',344,'http://lukeboyle.com/app/uploads/2016/09/burrito.png',0,'attachment','image/png',0),(469,1,'2017-02-27 11:59:09','2017-02-27 11:59:09','','Untitled-1','','inherit','open','closed','','untitled-1-2','','','2017-02-27 11:59:09','2017-02-27 11:59:09','',344,'http://lukeboyle.com/app/uploads/2016/09/Untitled-1-1.png',0,'attachment','image/png',0),(470,1,'2017-02-28 00:50:32','2017-02-28 00:50:32','','Spectrum','','publish','closed','closed','','spectrum-2','','','2017-02-28 00:54:30','2017-02-28 00:54:30','',0,'http://lukeboyle.com/?post_type=portfolio_item&#038;p=470',0,'portfolio_item','',0),(472,1,'2017-03-09 03:48:15','2017-03-09 03:48:15','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<br>\n\nNote that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThis approach just requires that your buttons have a container that is <code>display: inline-flex;</code>. Most people would have their buttons in a container anyway, as far as I can tell. Using inline-flex will let the buttons scale naturally and you can also apply flex properties (such as justify-content) to the buttons.\n\nThis approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','publish','open','open','','css-buttons-solved-flexbox','','','2017-03-09 04:41:32','2017-03-09 04:41:32','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0 20px 0 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-flex;\r\n}\r\n</style>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n<br>\r\n<p>Note that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).</p>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThis approach just requires that your buttons have a container that is `display: inline-flex;`. Most people would have their buttons in a container anyway, as far as I can tell. Using inline-flex will let the buttons scale naturally and you can also apply flex properties (such as justify-content) to the buttons.\r\n \r\nThis approach is pretty bullet-proof from my testing and I like it a lot. ',0,'http://lukeboyle.com/?p=472',0,'post','',0),(473,1,'2017-03-09 03:08:23','2017-03-09 03:08:23','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\nOption 1: Padding for vertical centering\n\n<style>\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 50px;\n}\n</style>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for padding? I don\'t think so.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:08:23','2017-03-09 03:08:23','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\nOption 1: Padding for vertical centering\r\n\r\n<style>\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 50px;\r\n}\r\n</style>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for padding? I don\'t think so.\r\n\r\n',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(474,1,'2017-03-09 03:09:25','2017-03-09 03:09:25','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\nOption 1: Padding for vertical centering\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for padding? I don\'t think so.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:09:25','2017-03-09 03:09:25','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\nOption 1: Padding for vertical centering\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for padding? I don\'t think so.\r\n\r\n',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(475,1,'2017-03-09 03:10:29','2017-03-09 03:10:29','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\nOption 1: Padding for vertical centering\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:10:29','2017-03-09 03:10:29','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\nOption 1: Padding for vertical centering\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(476,1,'2017-03-09 03:13:39','2017-03-09 03:13:39','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:13:39','2017-03-09 03:13:39','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(477,1,'2017-03-09 03:14:00','2017-03-09 03:14:00','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #D60C8B;\n    border-color: #ab0a6f;\n    color: #fff;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 1rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:14:00','2017-03-09 03:14:00','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #D60C8B;\r\n    border-color: #ab0a6f;\r\n    color: #fff;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 1rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(478,1,'2017-03-09 03:15:14','2017-03-09 03:15:14','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 1rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:15:14','2017-03-09 03:15:14','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 1rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(479,1,'2017-03-09 03:21:07','2017-03-09 03:21:07','','CCblInSUMAA8kxv','','inherit','open','closed','','ccblinsumaa8kxv','','','2017-03-09 03:21:07','2017-03-09 03:21:07','',472,'http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg',0,'attachment','image/jpeg',0),(480,1,'2017-03-09 03:21:22','2017-03-09 03:21:22','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:21:22','2017-03-09 03:21:22','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(481,1,'2017-03-09 03:25:58','2017-03-09 03:25:58','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:25:58','2017-03-09 03:25:58','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(482,1,'2017-03-09 03:40:00','2017-03-09 03:40:00','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 1rem;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<div class=\"flex-button-container\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:40:00','2017-03-09 03:40:00','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 1rem;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<div class=\"flex-button-container\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(483,1,'2017-03-09 03:40:29','2017-03-09 03:40:29','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 1rem;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:40:29','2017-03-09 03:40:29','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 1rem;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(484,1,'2017-03-09 03:41:10','2017-03-09 03:41:10','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.padding-approach-container {\n    font-size: 16px;\n}\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 1rem;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 1rem;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div class=\"padding-approach-container\">\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:41:10','2017-03-09 03:41:10','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.padding-approach-container {\r\n    font-size: 16px;\r\n}\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 1rem;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 1rem;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div class=\"padding-approach-container\">\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(485,1,'2017-03-09 03:42:34','2017-03-09 03:42:34','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 125px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:42:34','2017-03-09 03:42:34','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 125px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 125px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(486,1,'2017-03-09 03:43:22','2017-03-09 03:43:22','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:43:22','2017-03-09 03:43:22','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(487,1,'2017-03-09 03:44:19','2017-03-09 03:44:19','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\nWhat if I told you there was another way?\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:44:19','2017-03-09 03:44:19','There are two very common approaches to making buttons with CSS. Both of them are a little bit shit.\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\nWhat if I told you there was another way?\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(488,1,'2017-03-09 03:45:22','2017-03-09 03:45:22','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way?\n\n<code>morpheus.wav</code>\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\n<h2>Option 3: Flexbox (aka the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:45:22','2017-03-09 03:45:22','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way?\r\n\r\n`morpheus.wav`\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\n<h2>Option 3: Flexbox (aka the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(489,1,'2017-03-09 03:46:14','2017-03-09 03:46:14','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way?\n\n<code>morpheus.wav</code>\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:46:14','2017-03-09 03:46:14','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way?\r\n\r\n`morpheus.wav`\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(490,1,'2017-03-09 03:48:04','2017-03-09 03:48:04','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way?\n\n<code>morpheus.wav</code>\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:48:04','2017-03-09 03:48:04','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way?\r\n\r\n`morpheus.wav`\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(491,1,'2017-03-09 03:48:15','2017-03-09 03:48:15','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands off for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:48:15','2017-03-09 03:48:15','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands off for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(492,1,'2017-03-09 04:41:03','2017-03-09 04:41:03','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<br>\nNote that if you have varying heights, you may want to add <code>align-self</code> to the buttons so they retain their natural height (<code>align-self: center</code> in this example, flex-start to align to the top).\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThis approach just requires that your buttons have a container that is <code>display: inline-flex;</code>. Most people would have their buttons in a container anyway, as far as I can tell. Using inline-flex will let the buttons scale naturally and you c\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-autosave-v1','','','2017-03-09 04:41:03','2017-03-09 04:41:03','',472,'http://lukeboyle.com/472-autosave-v1/',0,'revision','',0),(493,1,'2017-03-09 03:49:29','2017-03-09 03:49:29','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #D60C8B;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:49:29','2017-03-09 03:49:29','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #D60C8B;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(494,1,'2017-03-09 03:51:56','2017-03-09 03:51:56','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: ##34495e;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:51:56','2017-03-09 03:51:56','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: ##34495e;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(495,1,'2017-03-09 03:52:18','2017-03-09 03:52:18','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:52:18','2017-03-09 03:52:18','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(496,1,'2017-03-09 03:53:03','2017-03-09 03:53:03','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-start;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:53:03','2017-03-09 03:53:03','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(497,1,'2017-03-09 03:55:04','2017-03-09 03:55:04','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  border-color: #ab0a6f;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:55:04','2017-03-09 03:55:04','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  border-color: #ab0a6f;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(498,1,'2017-03-09 03:57:17','2017-03-09 03:57:17','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved with Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:57:17','2017-03-09 03:57:17','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(499,1,'2017-03-09 03:57:47','2017-03-09 03:57:47','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1rem 2rem 1.0625rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 03:57:47','2017-03-09 03:57:47','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1rem 2rem 1.0625rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(500,1,'2017-03-09 04:07:51','2017-03-09 04:07:51','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:07:51','2017-03-09 04:07:51','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(501,1,'2017-03-09 04:10:19','2017-03-09 04:10:19','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n\n.unbalanced {\n    padding: 1rem 2rem;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:10:19','2017-03-09 04:10:19','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n\r\n.unbalanced {\r\n    padding: 1rem 2rem;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(502,1,'2017-03-09 04:11:05','2017-03-09 04:11:05','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n\n.unbalanced {\n    padding: 1rem 2rem;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:11:05','2017-03-09 04:11:05','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n\r\n.unbalanced {\r\n    padding: 1rem 2rem;\r\n}\r\n</style>\r\n<div>\r\n<p><a href=\"#\" class=\"button-padding-approach\">A Button</a></p>\r\n<p><a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a></p>\r\n<p><a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a></p>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(503,1,'2017-03-09 04:12:38','2017-03-09 04:12:38','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n\n.unbalanced {\n    padding: 1rem 2rem;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a><br><br>\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a><br><br>\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:12:38','2017-03-09 04:12:38','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n\r\n.unbalanced {\r\n    padding: 1rem 2rem;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a><br><br>\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a><br><br>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(504,1,'2017-03-09 04:13:11','2017-03-09 04:13:11','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a><br><br>\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a><br><br>\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:13:11','2017-03-09 04:13:11','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a><br><br>\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a><br><br>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(505,1,'2017-03-09 04:13:59','2017-03-09 04:13:59','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:13:59','2017-03-09 04:13:59','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. So if you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(506,1,'2017-03-09 04:15:16','2017-03-09 04:15:16','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>. 5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:15:16','2017-03-09 04:15:16','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`. 5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(507,1,'2017-03-09 04:20:08','2017-03-09 04:20:08','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:20:08','2017-03-09 04:20:08','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (dubbed by me as the green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(508,1,'2017-03-09 04:29:42','2017-03-09 04:29:42','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-block;\n}\n</style>\n\n<div>\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n</div>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\n</div>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:29:42','2017-03-09 04:29:42','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-block;\r\n}\r\n</style>\r\n\r\n<div>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n</div>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n\r\n<br>\r\n<div class=\"flex-button-container\" style=\"max-width: 170px;\">\r\n<a href=\"#\" class=\"button-flexbox-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(509,1,'2017-03-09 04:37:01','2017-03-09 04:37:01','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:37:01','2017-03-09 04:37:01','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0 20px 0 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-flex;\r\n}\r\n</style>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(510,1,'2017-03-09 04:37:29','2017-03-09 04:37:29','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:37:29','2017-03-09 04:37:29','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0 20px 0 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-flex;\r\n}\r\n</style>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(511,1,'2017-03-09 04:38:57','2017-03-09 04:38:57','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<br>\n\nNote that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just <code>display: inline-block;</code> to allow the content to naturally scale, and if you want to restrict how large the button can be, add <code>max-width: x;</code>\n\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:38:57','2017-03-09 04:38:57','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0 20px 0 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-flex;\r\n}\r\n</style>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n<br>\r\n<p>Note that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).</p>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThe main caveat of this approach is that the button now needs a container. The container doesn\'t need anything fancy on it, just `display: inline-block;` to allow the content to naturally scale, and if you want to restrict how large the button can be, add `max-width: x;`\r\n\r\nOther than that, this approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(512,1,'2017-03-09 04:41:32','2017-03-09 04:41:32','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\n\nWhat if I told you there was another way? (<code>morpheus.wav</code>)\n\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\n\n<style>\n.button-padding-approach {\nfont-size: inherit;\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    padding: 1rem 2rem 1.0625rem 2rem;\nfont-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n}\n.unbalanced {\n    padding: 1rem 2rem !important;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\n\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\n\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is <code>padding: 1rem 2rem 1.0625rem 2rem;</code>.  5 significant figures for bottom padding? I don\'t think so.\n\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\n\n<style>\n.button-lineheight-approach {\n    -webkit-appearance: none;\n    border-radius: 0;\n    border-style: solid;\n    border-width: 0;\n    cursor: pointer;\n    font-weight: normal;\n    line-height: normal;\n    margin: 0;\n    position: relative;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    background-color: #999;\n    color: #000;\n    max-width: 170px;\n    height: 50px;\n    line-height: 50px;\n    padding: 0 2rem 0;\n}\n</style>\n\n<div>\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\n\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\n\nThis approach is a lot less hands on for the vertical alignment. You set <code>height: 50px;</code> and <code>line-height: 50px;</code> and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\n\n<h2>Option 3: Flexbox (the secret green pill)</h2>\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\n\n<style>\n.button-flexbox-approach {\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 0;\n  cursor: pointer;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0 20px 0 0;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  padding: 1.5rem 2rem;\n  font-size: 16px;\n  background-color: #34495e;\n  color: #fff;\n}\n.button-flexbox-approach:hover { color: #fff;}\n.flex-button-container {\n    display: inline-flex;\n}\n</style>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\n</div>\n\n<br>\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<br>\n\nNote that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).\n\n<div class=\"flex-button-container\">\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\n</div>\n\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\n\nThis approach just requires that your buttons have a container that is <code>display: inline-flex;</code>. Most people would have their buttons in a container anyway, as far as I can tell. Using inline-flex will let the buttons scale naturally and you can also apply flex properties (such as justify-content) to the buttons.\n\nThis approach is pretty bullet-proof from my testing and I like it a lot.','CSS Buttons: Solved by Flexbox','','inherit','closed','closed','','472-revision-v1','','','2017-03-09 04:41:32','2017-03-09 04:41:32','There are two commonly accepted approaches to making buttons with CSS, but both of them are a little bit shit.\r\n\r\nWhat if I told you there was another way? (`morpheus.wav`)\r\n\r\n\r\n<h2>Option 1: Padding for vertical centering (Blue Pill)</h2>\r\n\r\n<style>\r\n.button-padding-approach {\r\nfont-size: inherit;\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    padding: 1rem 2rem 1.0625rem 2rem;\r\nfont-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n}\r\n.unbalanced {\r\n    padding: 1rem 2rem !important;\r\n}\r\n</style>\r\n<div>\r\n<a href=\"#\" class=\"button-padding-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach unbalanced\">asd yjy</a>\r\n\r\n<a href=\"#\" class=\"button-padding-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/bc138c04a40ee1b9cf2f6418b19b4c5d.js\"></script>\r\n\r\nThis approach works okay, and it\'s good for multi-line (buttons where the marketing team sanctioned too much copy) text. The problem with typography, is that glyphs can have descenders (as in y and j) which push the bottom of the bounds down. This is shown in the second example above, where the button with descenders has equal padding top and bottom. If you want to properly vertically center your text you have to baby the padding so much that it becomes too much of a pain in the ass. The padding on the above buttons is `padding: 1rem 2rem 1.0625rem 2rem;`.  5 significant figures for bottom padding? I don\'t think so.\r\n\r\n<h2>Option 2: Line Height for vertical centering (Red Pill)</h2>\r\n\r\n<style>\r\n.button-lineheight-approach {\r\n    -webkit-appearance: none;\r\n    border-radius: 0;\r\n    border-style: solid;\r\n    border-width: 0;\r\n    cursor: pointer;\r\n    font-weight: normal;\r\n    line-height: normal;\r\n    margin: 0;\r\n    position: relative;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    background-color: #999;\r\n    color: #000;\r\n    max-width: 170px;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    padding: 0 2rem 0;\r\n}\r\n</style>\r\n\r\n<div>\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button</a>\r\n\r\n<a href=\"#\" class=\"button-lineheight-approach\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/8c705d6b88624d5e164355067c4fd0f7.js\"></script>\r\n\r\nThis approach is a lot less hands on for the vertical alignment. You set `height: 50px;` and `line-height: 50px;` and voila, perfect vertical alignment. Until you need two lines and then it bleeds out of the button because you thought a CTA would never be more than 3 words long. At this point you\'re forced to either increase the button width, or reduce your font-size and neither are very designer friendly.\r\n\r\n<h2>Option 3: Flexbox (the secret green pill)</h2>\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/CCblInSUMAA8kxv.jpg\" alt=\"\" width=\"571\" height=\"565\" class=\"alignnone size-full wp-image-479\" />\r\n\r\n<style>\r\n.button-flexbox-approach {\r\ndisplay: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  border-radius: 0;\r\n  border-style: solid;\r\n  border-width: 0;\r\n  cursor: pointer;\r\n  font-weight: normal;\r\n  line-height: normal;\r\n  margin: 0 20px 0 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  padding: 1.5rem 2rem;\r\n  font-size: 16px;\r\n  background-color: #34495e;\r\n  color: #fff;\r\n}\r\n.button-flexbox-approach:hover { color: #fff;}\r\n.flex-button-container {\r\n    display: inline-flex;\r\n}\r\n</style>\r\n\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\">asdf yjyj</a>\r\n</div>\r\n<br>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n<br>\r\n<p>Note that if you have varying heights, you may want to add `align-self` to the buttons so they retain their natural height (`align-self: center` in this example, flex-start to align to the top).</p>\r\n<div class=\"flex-button-container\">\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"align-self: center;\">A Button</a>\r\n    <a href=\"#\" class=\"button-flexbox-approach\" style=\"max-width: 170px;\">A Button that breaks to two lines</a>\r\n</div>\r\n\r\n<script src=\"https://gist.github.com/3stacks/97e7a0d634f9f96cec1da05c109ff91e.js\"></script>\r\n\r\nThis approach just requires that your buttons have a container that is `display: inline-flex;`. Most people would have their buttons in a container anyway, as far as I can tell. Using inline-flex will let the buttons scale naturally and you can also apply flex properties (such as justify-content) to the buttons.\r\n \r\nThis approach is pretty bullet-proof from my testing and I like it a lot. ',472,'http://lukeboyle.com/472-revision-v1/',0,'revision','',0),(515,1,'2017-03-29 12:16:17','0000-00-00 00:00:00','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\n\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\n\n<dl>\n  <dt>\n    Term 1\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n  <dt>\n    Term 2\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n</dl>\n\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\n\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\n\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\n\nThe <code>display:block</code> span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a <code>dl</code> is only supposed to have <code>dt</code> or <code>dd</code> elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a <code>dt+dd</code> group in a div to control flow.\n\nSo how can flexbox help us here?\n\n<script src=\"https://gist.github.com/3stacks/a52b29d707d4d00fc1f3b65683014416.js\"></script>','Responsive Definition Lists: Solved by flexbox','','draft','open','open','','','','','2017-03-29 12:16:17','2017-03-29 12:16:17','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\r\n\r\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\r\n\r\n<dl>\r\n  <dt>\r\n    Term 1\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n  <dt>\r\n    Term 2\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n</dl>\r\n\r\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\r\n\r\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\r\n\r\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\r\n\r\nThe `display:block` span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a `dl` is only supposed to have `dt` or `dd` elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a `dt+dd` group in a div to control flow.\r\n\r\nSo how can flexbox help us here?\r\n\r\n<script src=\"https://gist.github.com/3stacks/a52b29d707d4d00fc1f3b65683014416.js\"></script>\r\n',0,'http://lukeboyle.com/?p=515',0,'post','',0),(516,1,'2017-03-28 23:00:59','2017-03-28 23:00:59','The standard behaviour of','Responsive Definition Lists: Solved by flexbox','','inherit','closed','closed','','515-revision-v1','','','2017-03-28 23:00:59','2017-03-28 23:00:59','The standard behaviour of ',515,'http://lukeboyle.com/515-revision-v1/',0,'revision','',0),(517,1,'2017-03-29 11:59:38','2017-03-29 11:59:38','','Screen Shot 2017-03-29 at 10.58.59 pm','','inherit','open','closed','','screen-shot-2017-03-29-at-10-58-59-pm','','','2017-03-29 11:59:38','2017-03-29 11:59:38','',515,'http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png',0,'attachment','image/png',0),(518,1,'2017-03-29 12:10:22','2017-03-29 12:10:22','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\n\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\n\n<dl>\n  <dt>\n    Term 1\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n  <dt>\n    Term 2\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n</dl>\n\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\n\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\n\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\n\nThe <code>display:block</code> span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a <code>dl</code> is only supposed to have <code>dt</code> or <code>dd</code> elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a <code>dt+dd</code> group in a div to control flow.\n\nSo how can flexbox help us here?','Responsive Definition Lists: Solved by flexbox','','inherit','closed','closed','','515-revision-v1','','','2017-03-29 12:10:22','2017-03-29 12:10:22','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\r\n\r\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\r\n\r\n<dl>\r\n  <dt>\r\n    Term 1\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n  <dt>\r\n    Term 2\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n</dl>\r\n\r\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\r\n\r\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\r\n\r\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\r\n\r\nThe `display:block` span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a `dl` is only supposed to have `dt` or `dd` elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a `dt+dd` group in a div to control flow.\r\n\r\nSo how can flexbox help us here?\r\n\r\n\r\n',515,'http://lukeboyle.com/515-revision-v1/',0,'revision','',0),(519,1,'2017-03-29 12:16:17','2017-03-29 12:16:17','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\n\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\n\n<dl>\n  <dt>\n    Term 1\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n  <dt>\n    Term 2\n  </dt>\n  <dd>\n    A longer definiton. A definition usually expands on the term.&#127770;\n  </dd>\n</dl>\n\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\n\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\n\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\n\nThe <code>display:block</code> span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a <code>dl</code> is only supposed to have <code>dt</code> or <code>dd</code> elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a <code>dt+dd</code> group in a div to control flow.\n\nSo how can flexbox help us here?\n\n<script src=\"https://gist.github.com/3stacks/a52b29d707d4d00fc1f3b65683014416.js\"></script>','Responsive Definition Lists: Solved by flexbox','','inherit','closed','closed','','515-revision-v1','','','2017-03-29 12:16:17','2017-03-29 12:16:17','<script src=\"https://gist.github.com/3stacks/55f1fc8fbaa12a0bfd95fefc187961e3.js\"></script>\r\n\r\nConsider the definition list. Here\'s a simple example. The standard behaviour would have the term and definition both as block level elements, naturally stacking down like so.\r\n\r\n<dl>\r\n  <dt>\r\n    Term 1\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n  <dt>\r\n    Term 2\r\n  </dt>\r\n  <dd>\r\n    A longer definiton. A definition usually expands on the term.&#127770;\r\n  </dd>\r\n</dl>\r\n\r\nBut what if we want the term and definition to sit inline? This usage is semantically a dl, but traditionally, this has been a serious pain in the ass if you want consistent spacing between the terms/definitions. The image below exhibits a compromise I made with the designer on a previous project.\r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/03/Screen-Shot-2017-03-29-at-10.58.59-pm.png\" alt=\"\" width=\"308\" height=\"116\" class=\"alignnone size-full wp-image-517\" />\r\n\r\n<script src=\"https://gist.github.com/3stacks/bfd32ecb4ad35f4b40a325a1ad55e94c.js\"></script>\r\n\r\nMaking the dt/dd inline-block works to a certain degree, however, when setting widths explicitly you will have serious issues going down the breakpoints.\r\n\r\nThe `display:block` span just forces the content to stay in it\'s respective line. This, however, is not correct usage, as a `dl` is only supposed to have `dt` or `dd` elements inside it. EDIT: Since working on this project, it looks like we\'re now permitted to wrap a `dt+dd` group in a div to control flow.\r\n\r\nSo how can flexbox help us here?\r\n\r\n<script src=\"https://gist.github.com/3stacks/a52b29d707d4d00fc1f3b65683014416.js\"></script>\r\n',515,'http://lukeboyle.com/515-revision-v1/',0,'revision','',0),(520,1,'2017-04-19 22:23:51','0000-00-00 00:00:00','There\'s this design trope','Making a triangle cutout to peek over an image in HTML / CSS','','draft','open','open','','','','','2017-04-19 22:23:51','2017-04-19 22:23:51','There\'s this design trope ',0,'http://lukeboyle.com/?p=520',0,'post','',0),(521,1,'2017-04-19 22:23:51','2017-04-19 22:23:51','There\'s this design trope','Making a triangle cutout to peek over an image in HTML / CSS','','inherit','closed','closed','','520-revision-v1','','','2017-04-19 22:23:51','2017-04-19 22:23:51','There\'s this design trope ',520,'http://lukeboyle.com/520-revision-v1/',0,'revision','',0),(523,1,'2017-04-26 14:46:10','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-04-26 14:46:10','0000-00-00 00:00:00','',0,'http://lukeboyle.com/?p=523',0,'post','',0),(524,1,'2017-04-26 14:50:17','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2017-04-26 14:50:17','0000-00-00 00:00:00','',0,'http://lukeboyle.com/?p=524',0,'post','',0),(525,1,'2017-04-26 15:50:17','2017-04-26 15:50:17','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n<h3>How can CSS Vars help Agander?</h3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>\n\nSo, how does this help?\n\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\n\n<code>_buttons.scss</code> now looks like this:\n\n<pre><code>.button {\n  border: 1px solid var(--text-color-var);\n  padding: 6px 5px;\n  background: var(--button-background-color-var);\n  color: var(--text-color-var);\n}\n</code></pre>\n\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly. The user could have a colour swatch tool and be previewing their theme changes live.\n\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\n\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things...\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\n\nWith a few string replacements you have a temporary festive theme to force upon your users.\n\n<h3>Other Applications</h3>\n\n<h4>Accessibility</h4>\n\nSites or apps could have buttons to activate color blind mode and specific \'problem\' colours could be swapped out for friendly colours.\n\nAdditionally, high contrast modes would be a breeze.\n\n<h4>Easter Eggs</h4>\n\nUsers could activate alternate modes for websites to get a different experience.\n\n<h3>Retrospective</h3>\n\nCSS variables are getting me really excited because it\'s the first minimal overhead approach to theming in front-end only applications. This is something that will reward well structured stylesheets and result in a better experience for the user.\n\nI am looking forward to rolling out custom themes in Agander and finally getting around to making the flat UI theme I have wanted to make for some time.','CSS Variables: A Case Study','','publish','open','open','','css-variables-a-case-study','','','2017-04-26 15:51:14','2017-04-26 15:51:14','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?</h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```\r\n\r\nSo, how does this help?\r\n\r\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\r\n\r\n`_buttons.scss` now looks like this:\r\n```\r\n.button {\r\n  border: 1px solid var(--text-color-var);\r\n  padding: 6px 5px;\r\n  background: var(--button-background-color-var);\r\n  color: var(--text-color-var);\r\n}\r\n```\r\n\r\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly. The user could have a colour swatch tool and be previewing their theme changes live.\r\n\r\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\r\n\r\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things... \r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\r\n\r\nWith a few string replacements you have a temporary festive theme to force upon your users.\r\n\r\n<h3>Other Applications</h3>\r\n\r\n<h4>Accessibility</h4>\r\nSites or apps could have buttons to activate color blind mode and specific \'problem\' colours could be swapped out for friendly colours.\r\n\r\nAdditionally, high contrast modes would be a breeze.\r\n\r\n<h4>Easter Eggs</h4> \r\nUsers could activate alternate modes for websites to get a different experience.\r\n\r\n<h3>Retrospective</h3>\r\n\r\nCSS variables are getting me really excited because it\'s the first minimal overhead approach to theming in front-end only applications. This is something that will reward well structured stylesheets and result in a better experience for the user.\r\n\r\nI am looking forward to rolling out custom themes in Agander and finally getting around to making the flat UI theme I have wanted to make for some time.',0,'http://lukeboyle.com/?p=525',0,'post','',0),(526,1,'2017-04-26 14:50:44','2017-04-26 14:50:44','','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 14:50:44','2017-04-26 14:50:44','',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(527,1,'2017-04-26 14:52:27','2017-04-26 14:52:27','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes.','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 14:52:27','2017-04-26 14:52:27','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. ',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(528,1,'2017-04-26 15:01:35','2017-04-26 15:01:35','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:01:35','2017-04-26 15:01:35','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(529,1,'2017-04-26 15:08:23','2017-04-26 15:08:23','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\np {\n  color: var(--primary-color, red);\n}','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:08:23','2017-04-26 15:08:23','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\np {\r\n  color: var(--primary-color, red);\r\n}',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(530,1,'2017-04-26 15:21:27','2017-04-26 15:21:27','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n&lt;\n\nh3>How can CSS Vars help Agander?\n\n&lt;\n\nh3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:21:27','2017-04-26 15:21:27','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?<h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(531,1,'2017-04-26 15:22:10','2017-04-26 15:22:10','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n<h3>How can CSS Vars help Agander?</h3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:22:10','2017-04-26 15:22:10','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?</h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(532,1,'2017-04-26 15:27:36','2017-04-26 15:27:36','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n<h3>How can CSS Vars help Agander?</h3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>\n\nSo, how does this help?\n\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\n\n<code>_buttons.scss</code> now looks like this:\n\n<pre><code>.button {\n  border: 1px solid var(--text-color-var);\n  padding: 6px 5px;\n  background: var(--button-background-color-var);\n  color: var(--text-color-var);\n}\n</code></pre>\n\nAnd it\'s no longer a hassle to add exceptions. I can simply add new variables for colours, and the overhead is very minimal.\n\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly, and realtime. It means the user could have a colour swatch tool and be previewing their theme changes live.','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:27:36','2017-04-26 15:27:36','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?</h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```\r\n\r\nSo, how does this help?\r\n\r\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\r\n\r\n`_buttons.scss` now looks like this:\r\n```\r\n.button {\r\n  border: 1px solid var(--text-color-var);\r\n  padding: 6px 5px;\r\n  background: var(--button-background-color-var);\r\n  color: var(--text-color-var);\r\n}\r\n```\r\n\r\nAnd it\'s no longer a hassle to add exceptions. I can simply add new variables for colours, and the overhead is very minimal.\r\n\r\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly, and realtime. It means the user could have a colour swatch tool and be previewing their theme changes live.\r\n\r\n',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(533,1,'2017-04-26 15:35:49','2017-04-26 15:35:49','','Screen-Shot-2017-04-27-at-1.31.56-am','','inherit','open','closed','','screen-shot-2017-04-27-at-1-31-56-am','','','2017-04-26 15:35:49','2017-04-26 15:35:49','',525,'http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg',0,'attachment','image/jpeg',0),(534,1,'2017-04-26 15:36:23','2017-04-26 15:36:23','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n<h3>How can CSS Vars help Agander?</h3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>\n\nSo, how does this help?\n\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\n\n<code>_buttons.scss</code> now looks like this:\n\n<pre><code>.button {\n  border: 1px solid var(--text-color-var);\n  padding: 6px 5px;\n  background: var(--button-background-color-var);\n  color: var(--text-color-var);\n}\n</code></pre>\n\nAnd it\'s no longer a hassle to add exceptions. I can simply add new variables for colours, and the overhead is very minimal.\n\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly, and realtime. It means the user could have a colour swatch tool and be previewing their theme changes live.\n\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\n\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things...\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\n\nWith a few string replacements you have a temporary festive theme to force upon your users.','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:36:23','2017-04-26 15:36:23','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?</h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```\r\n\r\nSo, how does this help?\r\n\r\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\r\n\r\n`_buttons.scss` now looks like this:\r\n```\r\n.button {\r\n  border: 1px solid var(--text-color-var);\r\n  padding: 6px 5px;\r\n  background: var(--button-background-color-var);\r\n  color: var(--text-color-var);\r\n}\r\n```\r\n\r\nAnd it\'s no longer a hassle to add exceptions. I can simply add new variables for colours, and the overhead is very minimal.\r\n\r\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly, and realtime. It means the user could have a colour swatch tool and be previewing their theme changes live.\r\n\r\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\r\n\r\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things... \r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\r\n\r\nWith a few string replacements you have a temporary festive theme to force upon your users.\r\n',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0),(535,1,'2017-04-26 15:50:11','2017-04-26 15:50:11','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively.\n\nThe general approach for styling a component is as such:\n\n<code>_button.scss</code>\n\n<pre><code>// Define base component styles (e.g. sizing/positioning)\n.button {\n  border: 1px solid;\n  padding: 6px 5px;\n}\n\n// Dark Color scheme styles\n.scheme-dark {\n  .button {\n    background: white;\n    border-color: white;\n    color: black;\n  }\n}\n\n// Light Color scheme styles\n.scheme-light {\n  .button {\n    background: black;\n    border-color: black;\n    color: white;\n  }\n}\n</code></pre>\n\nAlthough this is quite lightweight, there are still issues.\n\n<ol>\n<li>It puts a hard dependency on codebase changes to add, remove or modify themes,</li>\n<li>It makes user defined colour schemes all but impossible</li>\n<li>Simple component partials are no longer neat self-contained partials with one selector defining all the component styles</li>\n<li>There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.</li>\n<li>The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.</li>\n</ol>\n\nEnter the CSS Variable (the hero we need)\n\nCSS Variables are defined like so:\n\n<pre><code>:root { \n  // Initialise the variable\n  --primary-color: pink\n}\n\np {\n  color: var(--primary-color); // it\'s pink, baby.\n}\n</code></pre>\n\nThe <code>var</code> function also takes a second argument which is an initial/fallback value.\n\n<pre><code>p {\n  color: var(--primary-color, red);\n}\n</code></pre>\n\nCSS Variables follow block scoping principles, so, variables defined in <code>:root</code> are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\n\n<h3>How can CSS Vars help Agander?</h3>\n\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\n\nThe idea is that each theme would have all relevant variables defined in objects like so:\n\n<pre><code>const viewState = {\n  currentTheme: \'darkScheme\'\n}\n\nconst themes = {\n  darkSheme = {\n    \'primary-color\': {\n      hex: \'#FFF\'\n    }\n  },\n  lightScheme: {\n    \'primary-color\': {\n      hex: \'#000\'\n    }\n  }\n}\n</code></pre>\n\nAnd then when the currentTheme changes:\n\n<pre><code>import syncVars from \'@lukeboyle/sync-vars\';\n\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\n  syncVars(themes[colorScheme]);\n}\n\n// if we call that function with \'darkScheme\'\nupdateCssVariablesWithCurrentScheme(\'darkScheme\');\n\n&lt;html style=\"--primary-color: #FFF;\"&gt;&lt;/html&gt;\n</code></pre>\n\nSo, how does this help?\n\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\n\n<code>_buttons.scss</code> now looks like this:\n\n<pre><code>.button {\n  border: 1px solid var(--text-color-var);\n  padding: 6px 5px;\n  background: var(--button-background-color-var);\n  color: var(--text-color-var);\n}\n</code></pre>\n\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly. The user could have a colour swatch tool and be previewing their theme changes live.\n\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\n\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things...\n\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\n\nWith a few string replacements you have a temporary festive theme to force upon your users.\n\n<h3>Other Applications</h3>\n\n<h4>Accessibility</h4>\n\nSites or apps could have buttons to activate color blind mode and specific \'problem\' colours could be swapped out for friendly colours.\n\nAdditionally, high contrast modes would be a breeze.\n\n<h4>Easter Eggs</h4>\n\nUsers could activate alternate modes for websites to get a different experience.\n\n<h3>Retrospective</h3>\n\nCSS variables are getting me really excited because it\'s the first minimal overhead approach to theming in front-end only applications. This is something that will reward well structured stylesheets and result in a better experience for the user.\n\nI am looking forward to rolling out custom themes in Agander and finally getting around to making the flat UI theme I have wanted to make for some time.','CSS Variables: A Case Study','','inherit','closed','closed','','525-revision-v1','','','2017-04-26 15:50:11','2017-04-26 15:50:11','In <a href=\"https://agander.io\">Agander</a>, I made my first forays into colour themes. In a very simple approach, I have two colour schemes (light and dark) which are displayed on the body as a class (scheme-light and scheme-dark) respectively. \r\n\r\nThe general approach for styling a component is as such:\r\n\r\n`_button.scss`\r\n```\r\n// Define base component styles (e.g. sizing/positioning)\r\n.button {\r\n  border: 1px solid;\r\n  padding: 6px 5px;\r\n}\r\n\r\n// Dark Color scheme styles\r\n.scheme-dark {\r\n  .button {\r\n    background: white;\r\n    border-color: white;\r\n    color: black;\r\n  }\r\n}\r\n\r\n// Light Color scheme styles\r\n.scheme-light {\r\n  .button {\r\n    background: black;\r\n    border-color: black;\r\n    color: white;\r\n  }\r\n}\r\n```\r\n\r\nAlthough this is quite lightweight, there are still issues.\r\n\r\n1. It puts a hard dependency on codebase changes to add, remove or modify themes,\r\n2. It makes user defined colour schemes all but impossible\r\n3. Simple component partials are no longer neat self-contained partials with one selector defining all the component styles\r\n4. There are several cases where I need to have colours that contradict the global colour scheme (e.g. black text for the white modal dialog) and it requires the use of !important and many colour overrides.\r\n5. The extensibility of the approach is very limited because as more themes are added, the stylesheets WILL get bloated and overweight.\r\n\r\nEnter the CSS Variable (the hero we need)\r\n\r\nCSS Variables are defined like so:\r\n\r\n```\r\n:root { \r\n  // Initialise the variable\r\n  --primary-color: pink\r\n}\r\n\r\np {\r\n  color: var(--primary-color); // it&#039;s pink, baby.\r\n}\r\n```\r\n\r\nThe `var` function also takes a second argument which is an initial/fallback value.\r\n\r\n```\r\np {\r\n  color: var(--primary-color, red);\r\n}\r\n```\r\n\r\nCSS Variables follow block scoping principles, so, variables defined in `:root` are considered to be global variables (but may be overwritten inside specific components) and variables defined in any other element are scoped to that block of styles. This is broken down very nicely on a recent <a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/#scope-and-inheritance\">Smashing Magazine article</a>.\r\n\r\n<h3>How can CSS Vars help Agander?</h3>\r\n\r\nI recently wrote a library to ingest variable names and values and spit them onto the root element (see <a href=\"https://www.npmjs.com/package/@lukeboyle/sync-vars\">the package</a>)\r\n\r\nThe idea is that each theme would have all relevant variables defined in objects like so:\r\n\r\n```\r\nconst viewState = {\r\n  currentTheme: &#039;darkScheme&#039;\r\n}\r\n\r\nconst themes = {\r\n  darkSheme = {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#FFF&#039;\r\n    }\r\n  },\r\n  lightScheme: {\r\n    &#039;primary-color&#039;: {\r\n      hex: &#039;#000&#039;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd then when the currentTheme changes:\r\n\r\n```\r\nimport syncVars from &#039;@lukeboyle/sync-vars&#039;;\r\n\r\nfunction updateCssVariablesWithCurrentScheme(colorScheme) {\r\n  syncVars(themes[colorScheme]);\r\n}\r\n\r\n// if we call that function with &#039;darkScheme&#039;\r\nupdateCssVariablesWithCurrentScheme(&#039;darkScheme&#039;);\r\n\r\n&lt;html style=&quot;--primary-color: #FFF;&quot;&gt;&lt;/html&gt;\r\n```\r\n\r\nSo, how does this help?\r\n\r\nFor one thing, with this approach, I no longer have to worry about adding the colour scheme classes to the body, and I don\'t have to do any hacky overrides, etc.\r\n\r\n`_buttons.scss` now looks like this:\r\n```\r\n.button {\r\n  border: 1px solid var(--text-color-var);\r\n  padding: 6px 5px;\r\n  background: var(--button-background-color-var);\r\n  color: var(--text-color-var);\r\n}\r\n```\r\n\r\nLooking forward, this approach also means that custom colour themes are very nearly in reach. It also means that colour schemes could be changed on the fly. The user could have a colour swatch tool and be previewing their theme changes live.\r\n\r\nTaking it even further, it means that the colour schemes no longer need to be a part of the codebase. It could just as easily be a JSON file on the server and changes could be flexibly pushed.\r\n\r\nWhy is this exciting? Say it\'s Christmas time and you want to get into the spirit of things... \r\n\r\n<img src=\"http://lukeboyle.com/app/uploads/2017/04/Screen-Shot-2017-04-27-at-1.31.56-am.jpg\" alt=\"\" width=\"1440\" height=\"776\" class=\"alignnone size-full wp-image-533\" />\r\n\r\nWith a few string replacements you have a temporary festive theme to force upon your users.\r\n\r\n<h3>Other Applications</h3>\r\n\r\n<h4>Accessibility</h4>\r\nSites or apps could have buttons to activate color blind mode and specific \'problem\' colours could be swapped out for friendly colours.\r\n\r\nAdditionally, high contrast modes would be a breeze.\r\n\r\n<h4>Easter Eggs</h4> \r\nUsers could activate alternate modes for websites to get a different experience.\r\n\r\n<h3>Retrospective</h3>\r\n\r\nCSS variables are getting me really excited because it\'s the first minimal overhead approach to theming in front-end only applications. This is something that will reward well structured stylesheets and result in a better experience for the user.\r\n\r\nI am looking forward to rolling out custom themes in Agander and finally getting around to making the flat UI theme I have wanted to make for some time.',525,'http://lukeboyle.com/525-revision-v1/',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (12,2,0),(56,2,0),(57,2,0),(82,2,0),(85,83,0),(86,4,0),(86,56,0),(107,4,0),(119,83,0),(156,3,0),(156,11,0),(156,20,0),(156,36,0),(156,43,0),(156,69,0),(164,3,0),(164,13,0),(164,76,0),(164,77,0),(170,5,0),(170,21,0),(170,66,0),(170,68,0),(171,83,0),(193,3,0),(193,77,0),(199,3,0),(199,20,0),(199,23,0),(199,24,0),(199,25,0),(199,26,0),(199,27,0),(199,36,0),(199,37,0),(199,41,0),(218,3,0),(224,3,0),(224,9,0),(224,48,0),(224,74,0),(230,3,0),(230,9,0),(230,11,0),(230,13,0),(230,57,0),(230,60,0),(238,3,0),(238,7,0),(238,8,0),(238,9,0),(238,10,0),(238,55,0),(238,58,0),(238,59,0),(242,4,0),(242,12,0),(242,14,0),(242,22,0),(242,38,0),(242,56,0),(242,61,0),(242,73,0),(286,3,0),(286,16,0),(286,17,0),(286,18,0),(286,32,0),(286,34,0),(286,49,0),(286,54,0),(286,65,0),(302,1,0),(310,3,0),(310,11,0),(310,84,0),(310,85,0),(310,86,0),(310,87,0),(350,3,0),(350,88,0),(350,89,0),(350,90,0),(350,91,0),(364,1,0),(367,3,0),(367,36,0),(367,92,0),(367,93,0),(367,94,0),(367,95,0),(367,96,0),(367,97,0),(372,3,0),(372,8,0),(372,10,0),(372,11,0),(372,98,0),(372,99,0),(372,100,0),(376,1,0),(382,3,0),(382,28,0),(382,77,0),(382,101,0),(382,102,0),(382,103,0),(382,104,0),(405,1,0),(420,1,0),(427,3,0),(427,11,0),(427,40,0),(427,105,0),(427,106,0),(472,3,0),(472,28,0),(472,107,0),(515,1,0),(520,1,0),(525,3,0),(525,9,0),(525,11,0),(525,28,0),(525,109,0),(525,110,0),(525,111,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=112 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,0),(2,2,'nav_menu','',0,4),(3,3,'category','',0,16),(4,4,'category','',0,3),(5,5,'category','',0,1),(6,6,'post_tag','',0,0),(7,7,'post_tag','',0,1),(8,8,'post_tag','',0,2),(9,9,'post_tag','',0,4),(10,10,'post_tag','',0,2),(11,11,'post_tag','',0,6),(12,12,'post_tag','',0,1),(13,13,'post_tag','',0,2),(14,14,'post_tag','',0,1),(15,15,'post_tag','',0,0),(16,16,'post_tag','',0,1),(17,17,'post_tag','',0,1),(18,18,'post_tag','',0,1),(19,19,'post_tag','',0,0),(20,20,'post_tag','',0,2),(21,21,'post_tag','',0,1),(22,22,'post_tag','',0,1),(23,23,'post_tag','',0,1),(24,24,'post_tag','',0,1),(25,25,'post_tag','',0,1),(26,26,'post_tag','',0,1),(27,27,'post_tag','',0,1),(28,28,'post_tag','',0,3),(29,29,'post_tag','',0,0),(30,30,'post_tag','',0,0),(31,31,'post_tag','',0,0),(32,32,'post_tag','',0,1),(33,33,'post_tag','',0,0),(34,34,'post_tag','',0,1),(35,35,'post_tag','',0,0),(36,36,'post_tag','',0,3),(37,37,'post_tag','',0,1),(38,38,'post_tag','',0,1),(39,39,'post_tag','',0,0),(40,40,'post_tag','',0,1),(41,41,'post_tag','',0,1),(42,42,'post_tag','',0,0),(43,43,'post_tag','',0,1),(44,44,'post_tag','',0,0),(45,45,'post_tag','',0,0),(46,46,'post_tag','',0,0),(47,47,'post_tag','',0,0),(48,48,'post_tag','',0,1),(49,49,'post_tag','',0,1),(50,50,'post_tag','',0,0),(51,51,'post_tag','',0,0),(52,52,'post_tag','',0,0),(53,53,'post_tag','',0,0),(54,54,'post_tag','',0,1),(55,55,'post_tag','',0,1),(56,56,'post_tag','',0,2),(57,57,'post_tag','',0,1),(58,58,'post_tag','',0,1),(59,59,'post_tag','',0,1),(60,60,'post_tag','',0,1),(61,61,'post_tag','',0,1),(62,62,'post_tag','',0,0),(63,63,'post_tag','',0,0),(64,64,'post_tag','',0,0),(65,65,'post_tag','',0,1),(66,66,'post_tag','',0,1),(67,67,'post_tag','',0,0),(68,68,'post_tag','',0,1),(69,69,'post_tag','',0,1),(70,70,'post_tag','',0,0),(71,71,'post_tag','',0,0),(72,72,'post_tag','',0,0),(73,73,'post_tag','',0,1),(74,74,'post_tag','',0,1),(75,75,'post_tag','',0,0),(76,76,'post_tag','',0,1),(77,77,'post_tag','',0,3),(78,78,'post_tag','',0,0),(79,79,'post_tag','',0,0),(80,80,'post_tag','',0,0),(81,81,'post_tag','',0,0),(82,82,'post_tag','',0,0),(83,83,'nav_menu','',0,3),(84,84,'post_tag','',0,1),(85,85,'post_tag','',0,1),(86,86,'post_tag','',0,1),(87,87,'post_tag','',0,1),(88,88,'post_tag','',0,1),(89,89,'post_tag','',0,1),(90,90,'post_tag','',0,1),(91,91,'post_tag','',0,1),(92,92,'post_tag','',0,1),(93,93,'post_tag','',0,1),(94,94,'post_tag','',0,1),(95,95,'post_tag','',0,1),(96,96,'post_tag','',0,1),(97,97,'post_tag','',0,1),(98,98,'post_tag','',0,1),(99,99,'post_tag','',0,1),(100,100,'post_tag','',0,1),(101,101,'post_tag','',0,1),(102,102,'post_tag','',0,1),(103,103,'post_tag','',0,1),(104,104,'post_tag','',0,1),(105,105,'post_tag','',0,1),(106,106,'post_tag','',0,1),(107,107,'post_tag','',0,1),(108,108,'post_tag','',0,0),(109,109,'post_tag','',0,1),(110,110,'post_tag','',0,1),(111,111,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=112 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'primary','primary',0),(3,'Web Dev','web-dev',0),(4,'Music','music',0),(5,'Life','life',0),(6,'asd','asd',0),(7,'Facebook','facebook',0),(8,'node','node',0),(9,'React','react',0),(10,'npm','npm',0),(11,'JavaScript','javascript',0),(12,'2016','2016',0),(13,'agander','agander',0),(14,'album','album',0),(15,'albums','albums',0),(16,'all_tags','all_tags',0),(17,'all_types','all_types',0),(18,'all_vendors','all_vendors',0),(19,'anticipated','anticipated',0),(20,'api','api',0),(21,'Apple Music','apple-music',0),(22,'best','best',0),(23,'calendar','calendar',0),(24,'color','color',0),(25,'color ids','color-ids',0),(26,'colorid','colorid',0),(27,'colour ids','colour-ids',0),(28,'css','css',0),(29,'css only','css-only',0),(30,'css3','css3',0),(31,'display: absolute','display-absolute',0),(32,'dynamic','dynamic',0),(33,'fancy','fancy',0),(34,'filtering','filtering',0),(35,'garden','garden',0),(36,'google','google',0),(37,'google calendar','google-calendar',0),(38,'hip hop','hip-hop',0),(39,'hov','hov',0),(40,'html','html',0),(41,'id','id',0),(42,'image','image',0),(43,'invalid value','invalid-value',0),(44,'kanye','kanye',0),(45,'kanye west','kanye-west',0),(46,'life','life',0),(47,'madison','madison',0),(48,'material-ui','material-ui',0),(49,'native','native',0),(50,'no javascript','no-javascript',0),(51,'no js','no-js',0),(52,'of','of',0),(53,'pablo','pablo',0),(54,'product','product',0),(55,'Publish','publish',0),(56,'rap','rap',0),(57,'react apps','react-apps',0),(58,'React.js','react-js',0),(59,'Reactjs','reactjs',0),(60,'redux','redux',0),(61,'rnb','rnb',0),(62,'sass','sass',0),(63,'scss','scss',0),(64,'season 3','season-3',0),(65,'shopify','shopify',0),(66,'Spotify','spotify',0),(67,'square','square',0),(68,'Switch','switch',0),(69,'task','task',0),(70,'the','the',0),(71,'the life of pablo','the-life-of-pablo',0),(72,'tlop','tlop',0),(73,'top','top',0),(74,'touch event','touch-event',0),(75,'transitions','transitions',0),(76,'web apps','web-apps',0),(77,'web dev','web-dev',0),(78,'west','west',0),(79,'yeezus','yeezus',0),(80,'yeezy','yeezy',0),(81,'yeezy boosts','yeezy-boosts',0),(82,'yeezy season 3','yeezy-season-3',0),(83,'Filters','filters',0),(84,'practical','practical',0),(85,'recursion','recursion',0),(86,'recursive function','recursive-function',0),(87,'functional programming','functional-programming',0),(88,'vue','vue',0),(89,'jsx','jsx',0),(90,'vue-jsx','vue-jsx',0),(91,'babel-plugin-transform-vue-jsx','babel-plugin-transform-vue-jsx',0),(92,'chrome','chrome',0),(93,'travis','travis',0),(94,'ci','ci',0),(95,'angular','angular',0),(96,'mocha','mocha',0),(97,'karma','karma',0),(98,'localStorage','localstorage',0),(99,'local storage','local-storage',0),(100,'ES6','es6',0),(101,'automation','automation',0),(102,'phantomjs','phantomjs',0),(103,'blinkdiff','blinkdiff',0),(104,'argus eyes','argus-eyes',0),(105,'validation','validation',0),(106,'forms','forms',0),(107,'flexbox','flexbox',0),(108,'#it\'s2017','its2017',0),(109,'css variables','css-variables',0),(110,'css custom properties','css-custom-properties',0),(111,'custom properties','custom-properties',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','Luke'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description','Half man, half amazing.'),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'show_admin_bar_front','true'),(10,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(11,1,'wp_user_level','10'),(12,1,'dismissed_wp_pointers',''),(13,1,'show_welcome_panel','0'),(14,1,'session_tokens','a:3:{s:64:\"4a9c2f70a8d74ee8196b0c95ad8d71fa9e927e6b74c4daddbb7008aba65d5732\";a:4:{s:10:\"expiration\";i:1493630489;s:2:\"ip\";s:14:\"162.158.165.23\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\";s:5:\"login\";i:1493457689;}s:64:\"7740f444ee4cb79cc878a15c658fa37805bc4fd3532a31068337db5118f1e963\";a:4:{s:10:\"expiration\";i:1493630494;s:2:\"ip\";s:14:\"162.158.165.23\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\";s:5:\"login\";i:1493457694;}s:64:\"f8ea46612a24e665a9e9dfc1521f3c0b20529434aec8bda3690aa9275eb3d1fd\";a:4:{s:10:\"expiration\";i:1493630511;s:2:\"ip\";s:14:\"162.158.165.23\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\";s:5:\"login\";i:1493457711;}}'),(15,1,'wp_dashboard_quick_press_last_post_id','523'),(16,1,'closedpostboxes_dashboard','a:0:{}'),(17,1,'metaboxhidden_dashboard','a:0:{}'),(18,1,'acf_user_settings','a:0:{}'),(19,1,'wp_user-settings','libraryContent=browse&editor=html&unfold=1&mfold=o&imgsize=full'),(20,1,'wp_user-settings-time','1488243152'),(21,1,'closedpostboxes_page','a:0:{}'),(22,1,'metaboxhidden_page','a:8:{i:0;s:23:\"acf-group_57d5df4eec639\";i:1;s:23:\"acf-group_57d5dad75a00e\";i:2;s:23:\"acf-group_57d5e02d86213\";i:3;s:10:\"postcustom\";i:4;s:16:\"commentstatusdiv\";i:5;s:11:\"commentsdiv\";i:6;s:7:\"slugdiv\";i:7;s:9:\"authordiv\";}'),(23,1,'default_password_nag',''),(25,1,'_yoast_wpseo_profile_updated','1493218201'),(26,1,'wpseo_title',''),(27,1,'wpseo_metadesc',''),(28,1,'wpseo_metakey',''),(29,1,'wpseo_excludeauthorsitemap',''),(30,1,'wpseo_content_analysis_disable',''),(31,1,'wpseo_keyword_analysis_disable',''),(32,1,'googleplus',''),(33,1,'twitter','tricepidemic'),(34,1,'facebook',''),(35,1,'wpseo_ignore_tour','1'),(36,1,'closedpostboxes_portfolio_item','a:1:{i:0;s:10:\"wpseo_meta\";}'),(37,1,'metaboxhidden_portfolio_item','a:3:{i:0;s:23:\"acf-group_57d5df4eec639\";i:1;s:23:\"acf-group_57d5e02d86213\";i:2;s:7:\"slugdiv\";}'),(38,1,'locale','');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'luke','230ebe42adf73920406c87f3019835aa','luke','luke.boyle.au@gmail.com','','2016-09-11 04:56:11','1493721634:$P$BoRgibZKpMfZnj/f72ET9Od7.KMiT91',0,'Luke');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-05-03  1:05:17
